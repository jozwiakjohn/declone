<aicraft-basic-type>
  ::= ( ( brasilia ) { ( VALUE "BRASILIA" ) }
    | ( brasilias ) { ( VALUE "BRASILIA" ) }
    | ( metro ) { ( VALUE "METRO" ) }
    | ( metros ) { ( VALUE "METRO" ) }
    | ( a t r seven two ) { ( VALUE "ATR72" ) }
    | ( a t r seventy two ) { ( VALUE "ATR72" ) }
    | ( a t r seven twos ) { ( VALUE "ATR72" ) }
    | ( a t r seventy twos ) { ( VALUE "ATR72" ) }
    | ( a three hundred ) { ( VALUE "A300" ) }
    | ( a three hundreds ) { ( VALUE "A300" ) }
    | ( a three ten ) { ( VALUE "A310" ) }
    | ( a three tens ) { ( VALUE "A310" ) }
    | ( a three twenties ) { ( VALUE "A320" ) }
    | ( a three twenty ) { ( VALUE "A320" ) }
    | ( a three one oh ) { ( VALUE "A310" ) }
    | ( a three one ohs ) { ( VALUE "A310" ) }
    | ( a three one zero ) { ( VALUE "A310" ) }
    | ( a three one zeros ) { ( VALUE "A310" ) }
    | ( a three two oh ) { ( VALUE "A320" ) }
    | ( a three two ohs ) { ( VALUE "A320" ) }
    | ( a three two zero ) { ( VALUE "A320" ) }
    | ( a three two zeros ) { ( VALUE "A320" ) }
    | ( a three zero zero ) { ( VALUE "A300" ) }
    | ( a three zero zeros ) { ( VALUE "A300" ) }
    | ( c nine nine ) { ( VALUE "C99" ) }
    | ( c ninety nine ) { ( VALUE "C99" ) }
    | ( c nine nines ) { ( VALUE "C99" ) }
    | ( c ninety nines ) { ( VALUE "C99" ) }
    | ( d c eight ) { ( VALUE "DC8" ) }
    | ( d c eights ) { ( VALUE "DC8" ) }
    | ( d c nine ) { ( VALUE "DC9" ) }
    | ( d c nines ) { ( VALUE "DC9" ) }
    | ( d c ten ) { ( VALUE "DC10" ) }
    | ( d c tens ) { ( VALUE "DC10" ) }
    | ( d c one oh ) { ( VALUE "DC10" ) }
    | ( d c one ohs ) { ( VALUE "DC10" ) }
    | ( d c one zero ) { ( VALUE "DC10" ) }
    | ( d c one zeros ) { ( VALUE "DC10" ) }
    | ( d h c eight ) { ( VALUE "DHC8" ) }
    | ( d h c eights ) { ( VALUE "DHC8" ) }
    | ( d h c seven ) { ( VALUE "DHC7" ) }
    | ( d h c sevens ) { ( VALUE "DHC7" ) }
    | ( f twenty eight ) { ( VALUE "F28" ) }
    | ( f twenty eights ) { ( VALUE "F28" ) }
    | ( f twenty seven ) { ( VALUE "F27" ) }
    | ( f twenty sevens ) { ( VALUE "F27" ) }
    | ( jetstream ) { ( VALUE "JETSTREAM" ) }
    | ( jetstreams ) { ( VALUE "JETSTREAM" ) }
    | ( l one zero one one ) { ( VALUE "L1011" ) }
    | ( l one zero one ones ) { ( VALUE "L1011" ) }
    | ( l ten eleven ) { ( VALUE "L1011" ) }
    | ( l ten elevens ) { ( VALUE "L1011" ) }
    | ( m d eighties ) { ( VALUE "MD80" ) }
    | ( m d eighty ) { ( VALUE "MD80" ) }
    | ( m d eleven ) { ( VALUE "MD11" ) }
    | ( m d elevens ) { ( VALUE "MD11" ) }
    | ( m d eight oh ) { ( VALUE "MD80" ) }
    | ( m d eight ohs ) { ( VALUE "MD80" ) }
    | ( m d eight zero ) { ( VALUE "MD80" ) }
    | ( m d eight zeros ) { ( VALUE "MD80" ) }
    | ( m d one one ) { ( VALUE "MD11" ) }
    | ( m d one ones ) { ( VALUE "MD11" ) }
    | ( nineteen hundred ) { ( VALUE "1900" ) }
    | ( nineteen hundreds ) { ( VALUE "1900" ) }
    | ( one forty six ) { ( VALUE "146" ) }
    | ( one four six ) { ( VALUE "146" ) }
    | ( one forty sixes ) { ( VALUE "146" ) }
    | ( one four sixes ) { ( VALUE "146" ) }
    | ( one hundred ) { ( VALUE "100" ) }
    | ( one hundreds ) { ( VALUE "100" ) }
    | ( one hundred forty six ) { ( VALUE "146" ) }
    | ( one hundred forty sixes ) { ( VALUE "146" ) }
    | ( one nine hundred ) { ( VALUE "1900" ) }
    | ( one nine hundreds ) { ( VALUE "1900" ) }
    | ( one nine zero zero ) { ( VALUE "1900" ) }
    | ( one nine zero zeros ) { ( VALUE "1900" ) }
    | ( one zero zero ) { ( VALUE "100" ) }
    | ( one zero zeros ) { ( VALUE "100" ) }
    | ( s f three forties ) { ( VALUE "SF340" ) }
    | ( s f three forty ) { ( VALUE "SF340" ) }
    | ( s f three four zero ) { ( VALUE "SF340" ) }
    | ( s f three four zeros ) { ( VALUE "SF340" ) }
    | ( seven fifty seven ) { ( VALUE "757" ) }
    | ( seven five seven ) { ( VALUE "757" ) }
    | ( seven fifty sevens ) { ( VALUE "757" ) }
    | ( seven five sevens ) { ( VALUE "757" ) }
    | ( seven forty seven ) { ( VALUE "747" ) }
    | ( seven four seven ) { ( VALUE "747" ) }
    | ( seven forty sevens ) { ( VALUE "747" ) }
    | ( seven four sevens ) { ( VALUE "747" ) }
    | ( seven six seven ) { ( VALUE "767" ) }
    | ( seven sixty seven ) { ( VALUE "767" ) }
    | ( seven six sevens ) { ( VALUE "767" ) }
    | ( seven sixty sevens ) { ( VALUE "767" ) }
    | ( seven thirty seven ) { ( VALUE "737" ) }
    | ( seven three seven ) { ( VALUE "737" ) }
    | ( seven thirty sevens ) { ( VALUE "737" ) }
    | ( seven three sevens ) { ( VALUE "737" ) }
    | ( seven twenty seven ) { ( VALUE "727" ) }
    | ( seven two seven ) { ( VALUE "727" ) }
    | ( seven twenty sevens ) { ( VALUE "727" ) }
    | ( seven two sevens ) { ( VALUE "727" ) }
    | ( three sixties ) { ( VALUE "360" ) }
    | ( three sixty ) { ( VALUE "360" ) }
    | ( three six oh ) { ( VALUE "360" ) }
    | ( three six ohs ) { ( VALUE "360" ) }
    | ( three six zero ) { ( VALUE "360" ) }
    | ( three six zeros ) { ( VALUE "360" ) }
    | ( two twenty eight ) { ( VALUE "228" ) }
    | ( two two eight ) { ( VALUE "228" ) }
    | ( two twenty eights ) { ( VALUE "228" ) }
    | ( two two eights ) { ( VALUE "228" ) }
  ) .

<aircraft-capacity-param>
  ::= ( ( <det> <aircraft> seating capacities ) 
    | ( <aircraft> seating capacities ) 
    | ( <det> seating capacities ) 
    | ( seating capacities ) 
    | ( <det> <aircraft> capacities ) 
    | ( <aircraft> capacities ) 
    | ( <det> capacities ) 
    | ( capacities ) 
    | ( <det> <aircraft> seating capacity ) 
    | ( <aircraft> seating capacity ) 
    | ( <det> seating capacity ) 
    | ( seating capacity ) 
    | ( <det> <aircraft> capacity ) 
    | ( <aircraft> capacity ) 
    | ( <det> capacity ) 
    | ( capacity ) { ( VALUE ) }
  ) .

<aircraft-code-descr>
  ::= ( ( the <code> <aircraft-code> :aircraft-code3 ) { ( VALUE $aircraft-code3 ) }
  ) .

<aircraft-code>
  ::= ( ( a b three ) { ( VALUE "AB3" ) }
    | ( a b threes ) { ( VALUE "AB3" ) }
    | ( a t p ) { ( VALUE "ATP" ) }
    | ( a t ps ) { ( VALUE "ATP" ) }
    | ( a t r ) { ( VALUE "ATR" ) }
    | ( a t rs ) { ( VALUE "ATR" ) }
    | ( a t seven ) { ( VALUE "AT7" ) }
    | ( a t sevens ) { ( VALUE "AT7" ) }
    | ( b e nine ) { ( VALUE "BE9" ) }
    | ( b e nines ) { ( VALUE "BE9" ) }
    | ( b e one ) { ( VALUE "BE1" ) }
    | ( b e ones ) { ( VALUE "BE1" ) }
    | ( d ten ) { ( VALUE "D10" ) }
    | ( d tens ) { ( VALUE "D10" ) }
    | ( d c nine ) { ( VALUE "DC9" ) }
    | ( d c nines ) { ( VALUE "DC9" ) }
    | ( d eight s ) { ( VALUE "D8S" ) }
    | ( d eight ss ) { ( VALUE "D8S" ) }
    | ( d h eight ) { ( VALUE "DH8" ) }
    | ( d h eights ) { ( VALUE "DH8" ) }
    | ( d h seven ) { ( VALUE "DH7" ) }
    | ( d h sevens ) { ( VALUE "DH7" ) }
    | ( d nine s ) { ( VALUE "D9S" ) }
    | ( d nine ss ) { ( VALUE "D9S" ) }
    | ( d oh eight ) { ( VALUE "DO8" ) }
    | ( d oh eights ) { ( VALUE "DO8" ) }
    | ( d one m ) { ( VALUE "D1M" ) }
    | ( d one ms ) { ( VALUE "D1M" ) }
    | ( e m two ) { ( VALUE "EM2" ) }
    | ( e m twos ) { ( VALUE "EM2" ) }
    | ( f twenty eight ) { ( VALUE "F28" ) }
    | ( f two eight ) { ( VALUE "F28" ) }
    | ( f twenty eights ) { ( VALUE "F28" ) }
    | ( f two eights ) { ( VALUE "F28" ) }
    | ( f twenty seven ) { ( VALUE "F27" ) }
    | ( f two seven ) { ( VALUE "F27" ) }
    | ( f twenty sevens ) { ( VALUE "F27" ) }
    | ( f two sevens ) { ( VALUE "F27" ) }
    | ( j thirty one ) { ( VALUE "J31" ) }
    | ( j three one ) { ( VALUE "J31" ) }
    | ( j thirty ones ) { ( VALUE "J31" ) }
    | ( j three ones ) { ( VALUE "J31" ) }
    | ( l fifteen ) { ( VALUE "L15" ) }
    | ( l fifteens ) { ( VALUE "L15" ) }
    | ( l ten ) { ( VALUE "L10" ) }
    | ( l tens ) { ( VALUE "L10" ) }
    | ( l one five ) { ( VALUE "L15" ) }
    | ( l one fives ) { ( VALUE "L15" ) }
    | ( l one oh ) { ( VALUE "L10" ) }
    | ( l one ohs ) { ( VALUE "L10" ) }
    | ( l one zero ) { ( VALUE "L10" ) }
    | ( l one zeros ) { ( VALUE "L10" ) }
    | ( m eighties ) { ( VALUE "M80" ) }
    | ( m eighty ) { ( VALUE "M80" ) }
    | ( m eleven ) { ( VALUE "M11" ) }
    | ( m elevens ) { ( VALUE "M11" ) }
    | ( m eight oh ) { ( VALUE "M80" ) }
    | ( m eight ohs ) { ( VALUE "M80" ) }
    | ( m eight zero ) { ( VALUE "M80" ) }
    | ( m eight zeros ) { ( VALUE "M80" ) }
    | ( m one one ) { ( VALUE "M11" ) }
    | ( m one ones ) { ( VALUE "M11" ) }
    | ( one forty six ) { ( VALUE "146" ) }
    | ( one four six ) { ( VALUE "146" ) }
    | ( one forty sixes ) { ( VALUE "146" ) }
    | ( one four sixes ) { ( VALUE "146" ) }
    | ( one hundred ) { ( VALUE "100" ) }
    | ( one hundreds ) { ( VALUE "100" ) }
    | ( one zero zero ) { ( VALUE "100" ) }
    | ( one zero zeros ) { ( VALUE "100" ) }
    | ( s f three ) { ( VALUE "SF3" ) }
    | ( s f threes ) { ( VALUE "SF3" ) }
    | ( s h six ) { ( VALUE "SH6" ) }
    | ( s h sixes ) { ( VALUE "SH6" ) }
    | ( s w m ) { ( VALUE "SWM" ) }
    | ( s w ms ) { ( VALUE "SWM" ) }
    | ( seven fifty seven ) { ( VALUE "757" ) }
    | ( seven five seven ) { ( VALUE "757" ) }
    | ( seven fifty sevens ) { ( VALUE "757" ) }
    | ( seven five sevens ) { ( VALUE "757" ) }
    | ( seven forty four ) { ( VALUE "747" ) }
    | ( seven four four ) { ( VALUE "744" ) }
    | ( seven forty fours ) { ( VALUE "747" ) }
    | ( seven four fours ) { ( VALUE "744" ) }
    | ( seven forty seven ) { ( VALUE "747" ) }
    | ( seven four seven ) { ( VALUE "747" ) }
    | ( seven forty sevens ) { ( VALUE "747" ) }
    | ( seven four sevens ) { ( VALUE "747" ) }
    | ( seven six seven ) { ( VALUE "767" ) }
    | ( seven sixty seven ) { ( VALUE "767" ) }
    | ( seven six sevens ) { ( VALUE "767" ) }
    | ( seven sixty sevens ) { ( VALUE "767" ) }
    | ( seven six three ) { ( VALUE "763" ) }
    | ( seven sixty three ) { ( VALUE "763" ) }
    | ( seven six threes ) { ( VALUE "763" ) }
    | ( seven sixty threes ) { ( VALUE "763" ) }
    | ( seven thirty five ) { ( VALUE "735" ) }
    | ( seven three five ) { ( VALUE "735" ) }
    | ( seven thirty fives ) { ( VALUE "735" ) }
    | ( seven three fives ) { ( VALUE "735" ) }
    | ( seven thirty four ) { ( VALUE "734" ) }
    | ( seven three four ) { ( VALUE "734" ) }
    | ( seven thirty fours ) { ( VALUE "734" ) }
    | ( seven three fours ) { ( VALUE "734" ) }
    | ( seven thirty seven ) { ( VALUE "737" ) }
    | ( seven three seven ) { ( VALUE "737" ) }
    | ( seven thirty sevens ) { ( VALUE "737" ) }
    | ( seven three sevens ) { ( VALUE "737" ) }
    | ( seven thirty three ) { ( VALUE "733" ) }
    | ( seven three three ) { ( VALUE "733" ) }
    | ( seven thirty threes ) { ( VALUE "733" ) }
    | ( seven three threes ) { ( VALUE "733" ) }
    | ( seven twenty seven ) { ( VALUE "727" ) }
    | ( seven two seven ) { ( VALUE "727" ) }
    | ( seven twenty sevens ) { ( VALUE "727" ) }
    | ( seven two sevens ) { ( VALUE "727" ) }
    | ( seven four l ) { ( VALUE "74L" ) }
    | ( seven four ls ) { ( VALUE "74L" ) }
    | ( seven four m ) { ( VALUE "74M" ) }
    | ( seven four ms ) { ( VALUE "74M" ) }
    | ( seven three s ) { ( VALUE "73S" ) }
    | ( seven three ss ) { ( VALUE "73S" ) }
    | ( seven two s ) { ( VALUE "72S" ) }
    | ( seven two ss ) { ( VALUE "72S" ) }
    | ( seventy four l ) { ( VALUE "74L" ) }
    | ( seventy four ls ) { ( VALUE "74L" ) }
    | ( seventy four m ) { ( VALUE "74M" ) }
    | ( seventy four ms ) { ( VALUE "74M" ) }
    | ( seventy three s ) { ( VALUE "73S" ) }
    | ( seventy three ss ) { ( VALUE "73S" ) }
    | ( seventy two s ) { ( VALUE "72S" ) }
    | ( seventy two ss ) { ( VALUE "72S" ) }
    | ( three ten ) { ( VALUE "310" ) }
    | ( three tens ) { ( VALUE "310" ) }
    | ( three twenties ) { ( VALUE "320" ) }
    | ( three twenty ) { ( VALUE "320" ) }
    | ( three one oh ) { ( VALUE "310" ) }
    | ( three one ohs ) { ( VALUE "310" ) }
    | ( three one zero ) { ( VALUE "310" ) }
    | ( three one zeros ) { ( VALUE "310" ) }
    | ( three two oh ) { ( VALUE "320" ) }
    | ( three two ohs ) { ( VALUE "320" ) }
    | ( three two zero ) { ( VALUE "320" ) }
    | ( three two zeros ) { ( VALUE "320" ) }
  ) .

<start_symbol_aircraft-descr>
  ::= ( ( <aircraft> type <aircraft-manufacturer> :aircraft-manufacturer3 <aircraft-basic-type> :aircraft-basic-type4 ) { ( VALUE [a:aircraft] ( APPEND AND ( APPEND manufacturer  $aircraft-manufacturer3 ) ( APPEND aircraft_basic_type  $aircraft-basic-type4 ) ) ) ( WRITE context/aircraft ( [a:aircraft] ) ) }
    | ( <det> <aircraft-basic-type> :aircraft-basic-type2 ) { ( VALUE [a:aircraft] ( APPEND basic_type  $aircraft-basic-type2 ) ) ( WRITE context/aircraft ( [a:aircraft] ) ) }
    | ( <aircraft-basic-type> :aircraft-basic-type1 ) { ( VALUE [a:aircraft] ( APPEND basic_type  $aircraft-basic-type1 ) ) ( WRITE context/aircraft ( [a:aircraft] ) ) }
    | ( <det> <aircraft-basic-type> :aircraft-basic-type2 <aircraft-mod> :aircraft-mod3 ) { ( VALUE [a:aircraft] ( APPEND AND ( APPEND basic_type  $aircraft-basic-type2 ) $aircraft-mod3 ) ) ( WRITE context/aircraft ( [a:aircraft] ) ) }
    | ( <aircraft-basic-type> :aircraft-basic-type1 <aircraft-mod> :aircraft-mod2 ) { ( VALUE [a:aircraft] ( APPEND AND ( APPEND basic_type  $aircraft-basic-type1 ) $aircraft-mod2 ) ) ( WRITE context/aircraft ( [a:aircraft] ) ) }
    | ( <det> <aircraft-manufacturer> :aircraft-manufacturer2 <aircraft-basic-type> :aircraft-basic-type3 ) { ( VALUE [a:aircraft] ( APPEND AND ( APPEND manufacturer  $aircraft-manufacturer2 ) ( APPEND basic_type  $aircraft-basic-type3 ) ) ) ( WRITE context/aircraft ( [a:aircraft] ) ) }
    | ( <aircraft-manufacturer> :aircraft-manufacturer1 <aircraft-basic-type> :aircraft-basic-type2 ) { ( VALUE [a:aircraft] ( APPEND AND ( APPEND manufacturer  $aircraft-manufacturer1 ) ( APPEND basic_type  $aircraft-basic-type2 ) ) ) ( WRITE context/aircraft ( [a:aircraft] ) ) }
    | ( <det> <aircraft-manufacturer> :aircraft-manufacturer2 <aircraft-basic-type> :aircraft-basic-type3 <aircraft-mod> :aircraft-mod4 ) { ( VALUE [a:aircraft] ( APPEND AND ( APPEND manufacturer  $aircraft-manufacturer2 ) ( APPEND basic_type  $aircraft-basic-type3 ) $aircraft-mod4 ) ) ( WRITE context/aircraft ( [a:aircraft] ) ) }
    | ( <aircraft-manufacturer> :aircraft-manufacturer1 <aircraft-basic-type> :aircraft-basic-type2 <aircraft-mod> :aircraft-mod3 ) { ( VALUE [a:aircraft] ( APPEND AND ( APPEND manufacturer  $aircraft-manufacturer1 ) ( APPEND basic_type  $aircraft-basic-type2 ) $aircraft-mod3 ) ) ( WRITE context/aircraft ( [a:aircraft] ) ) }
    | ( <det> <aircraft-manufacturer> :aircraft-manufacturer2 <aircraft-basic-type> :aircraft-basic-type3 <aircraft> ) { ( VALUE [a:aircraft] ( APPEND AND ( APPEND manufacturer  $aircraft-manufacturer2 ) ( APPEND basic_type  $aircraft-basic-type3 ) ) ) ( WRITE context/aircraft ( [a:aircraft] ) ) }
    | ( <aircraft-manufacturer> :aircraft-manufacturer1 <aircraft-basic-type> :aircraft-basic-type2 <aircraft> ) { ( VALUE [a:aircraft] ( APPEND AND ( APPEND manufacturer  $aircraft-manufacturer1 ) ( APPEND basic_type  $aircraft-basic-type2 ) ) ) ( WRITE context/aircraft ( [a:aircraft] ) ) }
    | ( <det> <aircraft> <aircraft-mod> :aircraft-mod3 ) { ( VALUE [a:aircraft] $aircraft-mod3 ) ( WRITE context/aircraft ( [a:aircraft] ) ) }
    | ( <aircraft> <aircraft-mod> :aircraft-mod2 ) { ( VALUE [a:aircraft] $aircraft-mod2 ) ( WRITE context/aircraft ( [a:aircraft] ) ) }
    | ( <det> <type> of <aircraft> <aircraft-mod> :aircraft-mod5 ) { ( VALUE [a:aircraft] $aircraft-mod5 ) ( WRITE context/aircraft ( [a:aircraft] ) ) }
    | ( <type> of <aircraft> <aircraft-mod> :aircraft-mod4 ) { ( VALUE [a:aircraft] $aircraft-mod4 ) ( WRITE context/aircraft ( [a:aircraft] ) ) }
    | ( <det> aircraft type <aircraft-manufacturer> :aircraft-manufacturer4 <aircraft-basic-type> :aircraft-basic-type5 ) { ( VALUE [a:aircraft] ( APPEND AND ( APPEND manufacturer  $aircraft-manufacturer4 ) ( APPEND basic_type  $aircraft-basic-type5 ) ) ) ( WRITE context/aircraft ( [a:aircraft] ) ) }
    | ( aircraft type <aircraft-manufacturer> :aircraft-manufacturer3 <aircraft-basic-type> :aircraft-basic-type4 ) { ( VALUE [a:aircraft] ( APPEND AND ( APPEND manufacturer  $aircraft-manufacturer3 ) ( APPEND basic_type  $aircraft-basic-type4 ) ) ) ( WRITE context/aircraft ( [a:aircraft] ) ) }
    | ( <det> aircraft type <aircraft-mod> :aircraft-mod4 ) { ( VALUE [a:aircraft] $aircraft-mod4 ) ( WRITE context/aircraft ( [a:aircraft] ) ) }
    | ( aircraft type <aircraft-mod> :aircraft-mod3 ) { ( VALUE [a:aircraft] $aircraft-mod3 ) ( WRITE context/aircraft ( [a:aircraft] ) ) }
    | ( <det> other <aircraft> ) { ( READ context/aircraft ( [a:aircraft] ) ) ( VALUE [b:aircraft] ( NOT ( [a:aircraft] ) ) ) ( WRITE context/aircraft ( [b:aircraft] ) ) }
    | ( other <aircraft> ) { ( READ context/aircraft ( [a:aircraft] ) ) ( VALUE [b:aircraft] ( NOT ( [a:aircraft] ) ) ) ( WRITE context/aircraft ( [b:aircraft] ) ) }
    | ( <det> other <aircraft> <aircraft-mod> :aircraft-mod4 ) { ( READ context/aircraft ( [a:aircraft] ) ) ( VALUE [b:aircraft] ( APPEND AND ( NOT ( [a:aircraft] ) ) $aircraft-mod4 ) ) ( WRITE context/aircraft ( [b:aircraft] ) ) }
    | ( other <aircraft> <aircraft-mod> :aircraft-mod3 ) { ( READ context/aircraft ( [a:aircraft] ) ) ( VALUE [b:aircraft] ( APPEND AND ( NOT ( [a:aircraft] ) ) $aircraft-mod3 ) ) ( WRITE context/aircraft ( [b:aircraft] ) ) }
    | ( the largest <aircraft> ) 
      { ( READ context/flight ( [a:flight] ) )
        ( VALUE [b:aircraft] ( APPEND AND ( APPEND flight  ( UPDATE ( [a:flight] ) ( APPEND aircraft  ( VALUE ) ) ) ) ( APPEND super/max/capacity/aircraft  flight ) ) ) ( WRITE context/aircraft ( [b:aircraft] ) ) }
    | ( the smallest <aircraft> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:aircraft] ( APPEND AND ( APPEND flight  ( UPDATE ( [a:flight] ) ( APPEND aircraft  ( VALUE ) ) ) ) ( APPEND super/min/capacity/aircraft  flight ) ) ) ( WRITE context/aircraft ( [b:aircraft] ) ) }
    | ( the smallest <aircraft> <flight-mod-phrase> :flight-mod-phrase4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:aircraft] ( APPEND AND ( APPEND super/min/capacity/aircraft  flight ) ( APPEND flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase4 ) ) ( WRITE context/aircraft ( [c:aircraft] ) ) }
  ) .

<aircraft-manufacturer>
  ::= ( ( aerospatiale aeritalia ) { ( VALUE "AEROSPATIALE AERITALIA" ) }
    | ( airbus industrie ) { ( VALUE "AIRBUS INDUSTRIE" ) }
    | ( beechcraft ) { ( VALUE "BEECHCRAFT" ) }
    | ( boeing ) { ( VALUE "BOEING" ) }
    | ( boeing canada ) { ( VALUE "BOEING CANADA" ) }
    | ( british aerospace ) { ( VALUE "BRITISH AEROSPACE" ) }
    | ( dornier ) { ( VALUE "DORNIER" ) }
    | ( embraer ) { ( VALUE "EMBRAER" ) }
    | ( fairchild ) { ( VALUE "FAIRCHILD" ) }
    | ( fokker ) { ( VALUE "FOKKER" ) }
    | ( lockheed ) { ( VALUE "LOCKHEED" ) }
    | ( mcdonnell douglas ) { ( VALUE "MCDONNELL DOUGLAS" ) }
    | ( saab ) { ( VALUE "SAAB" ) }
    | ( shorts ) { ( VALUE "SHORTS" ) }
  ) .

<aircraft-mod>
  ::= ( ( <flight-mod-phrase> :flight-mod-phrase1 ) { ( VALUE [a:aircraft] ( APPEND flight  $flight-mod-phrase1 ) ) ( WRITE context/flight $flight-mod-phrase1 ) }
    | ( <pron-rel> <airline-descr> :airline-descr2 uses ) { ( VALUE [a:aircraft] ( APPEND flight/airline  $airline-descr2 ) ) ( WRITE context/flight ( APPEND airline  $airline-descr2 ) ) }
    | ( <with-flight> :with-flight1 ) { ( VALUE [a:aircraft] ( APPEND flight  $with-flight1 ) ) ( WRITE context/flight $with-flight1 ) }
    | ( used <with-flight> :with-flight2 ) { ( VALUE [a:aircraft] ( APPEND flight  $with-flight2 ) ) ( WRITE context/flight $with-flight2 ) }
    | ( used by <airline-descr> :airline-descr3 ) { ( VALUE [a:aircraft] ( APPEND flight/airline  $airline-descr3 ) ) ( WRITE context/flight ( APPEND airline  $airline-descr3 ) ) }
    | ( used by <flight-descr> :flight-descr3 ) { ( VALUE [a:aircraft] ( APPEND flight  $flight-descr3 ) ) ( WRITE context/flight $flight-descr3 ) }
  ) .

<aircraft-param>
  ::= ( ( <det> <aircraft> ) 
    | ( <aircraft> ) 
    | ( <det> <type> of <aircraft> ) 
    | ( <type> of <aircraft> ) 
    | ( <det> aircraft type ) 
    | ( aircraft type ) 
    | ( <det> aircraft types ) 
    | ( aircraft types ) 
  ) .

<aircraft-wh>
  ::= ( ( what <aircraft> ) { ( READ context/aircraft ( [a:aircraft] ) ) ( VALUE ( [a:aircraft] ) ) }
    | ( which <aircraft> ) { ( READ context/aircraft ( [a:aircraft] ) ) ( VALUE ( [a:aircraft] ) ) }
    | ( what <type> of <aircraft> ) { ( READ context/aircraft ( [a:aircraft] ) ) ( VALUE ( [a:aircraft] ) ) }
    | ( which <type> of <aircraft> ) { ( READ context/aircraft ( [a:aircraft] ) ) ( VALUE ( [a:aircraft] ) ) }
    | ( what type <aircraft> ) { ( READ context/aircraft ( [a:aircraft] ) ) ( VALUE ( [a:aircraft] ) ) }
    | ( which type <aircraft> ) { ( READ context/aircraft ( [a:aircraft] ) ) ( VALUE ( [a:aircraft] ) ) }
  ) .

<aircraft>
  ::= ( ( aircraft ) 
    | ( aircrafts ) 
    | ( airplane ) 
    | ( airplanes ) 
    | ( flight equipment ) 
    | ( plane ) 
    | ( planes ) 
  ) .

<airline-code-descr>
  ::= ( ( <det> airline <code> <airline-code> :airline-code4 ) { ( VALUE $airline-code4 ) }
    | ( airline <code> <airline-code> :airline-code3 ) { ( VALUE $airline-code3 ) }
    | ( <det> <code> <airline-code> :airline-code3 ) { ( VALUE $airline-code3 ) }
    | ( <code> <airline-code> :airline-code2 ) { ( VALUE $airline-code2 ) }
    | ( <det> airline <airline-code> :airline-code3 ) { ( VALUE $airline-code3 ) }
    | ( airline <airline-code> :airline-code2 ) { ( VALUE $airline-code2 ) }
    | ( <det> <airline-code> :airline-code2 ) { ( VALUE $airline-code2 ) }
    | ( <airline-code> :airline-code1 ) { ( VALUE $airline-code1 ) }
  ) .

<airline-code-param>
  ::= ( ( <det> airline <code> ) 
    | ( airline <code> ) 
  ) .

<airline-code>
  ::= ( ( a a ) { ( VALUE "AA" ) }
    | ( a c ) { ( VALUE "AC" ) }
    | ( a r ) { ( VALUE "AR" ) }
    | ( a s ) { ( VALUE "AS" ) }
    | ( a t ) { ( VALUE "AT" ) }
    | ( b a ) { ( VALUE "BA" ) }
    | ( b e ) { ( VALUE "BE" ) }
    | ( b h ) { ( VALUE "BH" ) }
    | ( b x ) { ( VALUE "BX" ) }
    | ( c o ) { ( VALUE "CO" ) }
    | ( c oh ) { ( VALUE "COH" ) }
    | ( c p ) { ( VALUE "CP" ) }
    | ( d h ) { ( VALUE "DH" ) }
    | ( d l ) { ( VALUE "DL" ) }
    | ( e v ) { ( VALUE "EV" ) }
    | ( f f ) { ( VALUE "FF" ) }
    | ( g x ) { ( VALUE "GX" ) }
    | ( h p ) { ( VALUE "HP" ) }
    | ( h q ) { ( VALUE "HQ" ) }
    | ( i d ) { ( VALUE "ID" ) }
    | ( k w ) { ( VALUE "KW" ) }
    | ( l h ) { ( VALUE "LH" ) }
    | ( m g ) { ( VALUE "MG" ) }
    | ( n w ) { ( VALUE "NW" ) }
    | ( n x ) { ( VALUE "NX" ) }
    | ( nine e ) { ( VALUE "9E" ) }
    | ( nine l ) { ( VALUE "9L" ) }
    | ( nine n ) { ( VALUE "9N" ) }
    | ( nine x ) { ( VALUE "9X" ) }
    | ( o e ) { ( VALUE "OE" ) }
    | ( o h ) { ( VALUE "OH" ) }
    | ( o k ) { ( VALUE "OK" ) }
    | ( o o ) { ( VALUE "OO" ) }
    | ( q d ) { ( VALUE "QD" ) }
    | ( r p ) { ( VALUE "RP" ) }
    | ( r z ) { ( VALUE "RZ" ) }
    | ( s n ) { ( VALUE "SN" ) }
    | ( s x ) { ( VALUE "SX" ) }
    | ( seven v ) { ( VALUE "7V" ) }
    | ( t g ) { ( VALUE "TG" ) }
    | ( t w ) { ( VALUE "TW" ) }
    | ( t z ) { ( VALUE "TZ" ) }
    | ( three j ) { ( VALUE "3J" ) }
    | ( two v ) { ( VALUE "2V" ) }
    | ( u a ) { ( VALUE "UA" ) }
    | ( u s ) { ( VALUE "US" ) }
    | ( w n ) { ( VALUE "WN" ) }
    | ( x j ) { ( VALUE "XJ" ) }
    | ( y x ) { ( VALUE "YX" ) }
    | ( z w ) { ( VALUE "ZW" ) }
  ) .

<start_symbol_airline-descr>
  ::= ( ( <airline-name> :airline-name1 and <airline-name> :airline-name3 ) { ( VALUE [a:airline] ( APPEND OR  ( APPEND airline_code  $airline-name1 ) ( APPEND airline_code  $airline-name3 ) ) ) ( WRITE context/airline ( [a:airline] ) ) }
    | ( <airline-name> :airline-name1 or <airline-name> :airline-name3 ) { ( VALUE [a:airline] ( APPEND OR  ( APPEND airline_code  $airline-name1 ) ( APPEND airline_code  $airline-name3 ) ) ) ( WRITE context/airline ( [a:airline] ) ) }
    | ( <det> <airline> <airline-mod-list> :airline-mod-list3 ) { ( VALUE [a:airline] $airline-mod-list3 ) ( WRITE context/airline ( [a:airline] ) ) }
    | ( <det> airline other than <airline-name> ) 
    | ( <det> other airlines ) { ( READ context/airline ( [a:airline] ) ) ( VALUE ( NOT ( [a:airline] ) ) ) ( WRITE context/airline ( NOT ( [a:airline] ) ) ) }
    | ( <det> <airline-name> :airline-name2 ) { ( VALUE [a:airline] ( APPEND airline_code  $airline-name2 ) ) ( WRITE context/airline ( [a:airline] ) ) }
    | ( <airline-name> :airline-name1 ) { ( VALUE [a:airline] ( APPEND airline_code  $airline-name1 ) ) ( WRITE context/airline ( [a:airline] ) ) }
    | ( airline <airline-code> :airline-code2 ) { ( VALUE [a:airline] ( APPEND airline_code  $airline-code2 ) ) ( WRITE context/airline ( [a:airline] ) ) }
    | ( <airline-code> :airline-code1 ) { ( VALUE [a:airline] ( APPEND airline_code  $airline-code1 ) ) ( WRITE context/airline ( [a:airline] ) ) }
    | ( airline <airline-name> :airline-name2 ) { ( VALUE [a:airline] ( APPEND airline_code  $airline-name2 ) ) ( WRITE context/airline ( [a:airline] ) ) }
    | ( all airlines ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:airline] ( APPEND flight  ( [a:flight] ) ) ) ( WRITE context/airline ( [b:airline] ) ) }
    | ( any airline ) { ( VALUE [a:airline] ( APPEND airline_code/any  airline_code ) ) ( WRITE context/airline ( [a:airline] ) ) }
    | ( either <airline-name> :airline-name2 <airline-name> :airline-name3 or <airline-name> :airline-name5 ) { ( VALUE [a:airline] ( APPEND OR  ( APPEND airline_code  $airline-name2 ) ( APPEND airline_code  $airline-name3 ) ( APPEND airline_code  $airline-name5 ) ) ) ( WRITE context/airline ( [a:airline] ) ) }
    | ( the airline <airline-name> :airline-name3 ) { ( VALUE [a:airline] ( APPEND airline_code  $airline-name3 ) ) ( WRITE context/airline ( [a:airline] ) ) }
    | ( those airlines ) { ( READ context/airline ( [a:airline] ) ) ( VALUE ( [a:airline] ) ) }
  ) .

<airline-mod-list>
  ::= ( ( <airline-mod> :airline-mod1 ) { ( VALUE [a:airline] $airline-mod1 ) }
    | ( <airline-mod> :airline-mod1 <airline-mod> :airline-mod2 ) { ( VALUE [a:airline] ( APPEND AND $airline-mod1 $airline-mod2 ) ) }
  ) .

<airline-mod>
  ::= ( ( <pron-rel> <airline-pred> :airline-pred2 ) { ( VALUE [a:airline] $airline-pred2 ) }
    | ( <pron-rel> <fly> <flight-mod-arrival-phrase> :flight-mod-arrival-phrase3 ) { ( VALUE [a:airline] ( APPEND flight  ( [b:flight] ) ) ) ( WRITE context/flight [b:flight] $flight-mod-arrival-phrase3 ) }
    | ( <pron-rel> <fly> <flight-mod-departure-phrase> :flight-mod-departure-phrase3 ) { ( VALUE [a:airline] ( APPEND flight  ( [b:flight] ) ) ) ( WRITE context/flight [b:flight] $flight-mod-departure-phrase3 ) }
    | ( <pron-rel> use <airport-name> :airport-name3 ) { ( VALUE [a:airline] ( APPEND OR  ( APPEND flight/from_airport/airport_code  $airport-name3 ) ( APPEND flight/to_airport/airport_code  $airport-name3 ) ) ) ( WRITE context/airport ( APPEND airport_code  $airport-name3 ) ) }
    | ( <with-flight> :with-flight1 ) { ( VALUE [a:airline] ( APPEND flight  $with-flight1 ) ) ( WRITE context/flight $with-flight1 ) }
    | ( serving <flight-mod-phrase> :flight-mod-phrase2 ) { ( VALUE [a:airline] ( APPEND flight  $flight-mod-phrase2 ) ) ( WRITE context/flight $flight-mod-phrase2 ) }
  ) .

<airline-name-poss>
  ::= ( ( air alliance's ) { ( VALUE "3J" ) }
    | ( air canada's ) { ( VALUE "AC" ) }
    | ( air ontario's ) { ( VALUE "GX" ) }
    | ( air wisconsin's ) { ( VALUE "ZW" ) }
    | ( alaska <airline-poss> ) { ( VALUE "AS" ) }
    | ( alaska's ) { ( VALUE "AS" ) }
    | ( alpha air's ) { ( VALUE "7V" ) }
    | ( america west <airline-poss> ) { ( VALUE "HP" ) }
    | ( america west's ) { ( VALUE "HP" ) }
    | ( america's ) { ( VALUE "AA" ) }
    | ( american <airline-poss> ) { ( VALUE "AA" ) }
    | ( american trans air's ) { ( VALUE "TZ" ) }
    | ( american west <airline-poss> ) { ( VALUE "HP" ) }
    | ( american west's ) { ( VALUE "HP" ) }
    | ( american's ) { ( VALUE "AA" ) }
    | ( atlantic coast <airline-poss> ) { ( VALUE "DH" ) }
    | ( atlantic coast's ) { ( VALUE "DH" ) }
    | ( atlantic southeast <airline-poss> ) { ( VALUE "EV" ) }
    | ( atlantic southeast's ) { ( VALUE "EV" ) }
    | ( braniff <airline-poss> ) { ( VALUE "BE" ) }
    | ( braniff international <airline-poss> ) { ( VALUE "BE" ) }
    | ( braniff international's ) { ( VALUE "BE" ) }
    | ( braniff's ) { ( VALUE "BE" ) }
    | ( british airways' ) { ( VALUE "BA" ) }
    | ( business express <airline-poss> ) { ( VALUE "HQ" ) }
    | ( business express's ) { ( VALUE "HQ" ) }
    | ( canadian <airline-poss> ) { ( VALUE "CP" ) }
    | ( canadian <airline> international's ) { ( VALUE "CP" ) }
    | ( canadian's ) { ( VALUE "CP" ) }
    | ( carnival <airline-poss> ) { ( VALUE "KW" ) }
    | ( christman air system's ) { ( VALUE "SX" ) }
    | ( colgan <airline-poss> ) { ( VALUE "9L" ) }
    | ( colgan air's ) { ( VALUE "9L" ) }
    | ( colgan's ) { ( VALUE "9L" ) }
    | ( comair's ) { ( VALUE "OH" ) }
    | ( continental <airline-poss> ) { ( VALUE "CO" ) }
    | ( continental's ) { ( VALUE "CO" ) }
    | ( czechoslovak <airline-poss> ) { ( VALUE "OK" ) }
    | ( czechoslovak's ) { ( VALUE "OK" ) }
    | ( delta <airline-poss> ) { ( VALUE "DL" ) }
    | ( delta's ) { ( VALUE "DL" ) }
    | ( express <airline-poss> ) { ( VALUE "9E" ) }
    | ( express's ) { ( VALUE "9E" ) }
    | ( grand airways' ) { ( VALUE "QD" ) }
    | ( lufthansa german <airline-poss> ) { ( VALUE "LH" ) }
    | ( lufthansa's ) { ( VALUE "LH" ) }
    | ( m g m grand air's ) { ( VALUE "MG" ) }
    | ( mesaba aviation's ) { ( VALUE "XJ" ) }
    | ( midwest express <airline-poss> ) { ( VALUE "YX" ) }
    | ( midwest express's ) { ( VALUE "YX" ) }
    | ( nationair's ) { ( VALUE "NX" ) }
    | ( northeast express <airline-poss> ) { ( VALUE "2V" ) }
    | ( northeast express regional <airline-poss> ) { ( VALUE "2V" ) }
    | ( northeast express's ) { ( VALUE "2V" ) }
    | ( northeast's ) { ( VALUE "2V" ) }
    | ( northwest <airline-poss> ) { ( VALUE "NW" ) }
    | ( northwest's ) { ( VALUE "NW" ) }
    | ( ontario <airline-poss> ) { ( VALUE "GX" ) }
    | ( ontario express <airline-poss> ) { ( VALUE "9X" ) }
    | ( ontario express's ) { ( VALUE "9X" ) }
    | ( ontario's ) { ( VALUE "GX" ) }
    | ( precision <airline-poss> ) { ( VALUE "RP" ) }
    | ( precision's ) { ( VALUE "RP" ) }
    | ( royal air maroc's ) { ( VALUE "AT" ) }
    | ( royal air's ) { ( VALUE "AT" ) }
    | ( sabena belgian world <airline-poss> ) { ( VALUE "SN" ) }
    | ( sky west <airline-poss> ) { ( VALUE "OO" ) }
    | ( sky west's ) { ( VALUE "OO" ) }
    | ( southwest <airline-poss> ) { ( VALUE "WN" ) }
    | ( southwest air's ) { ( VALUE "WN" ) }
    | ( southwest's ) { ( VALUE "WN" ) }
    | ( t w a's ) { ( VALUE "TW" ) }
    | ( thai airways international's ) { ( VALUE "TG" ) }
    | ( thai airways' ) { ( VALUE "TG" ) }
    | ( tower air's ) { ( VALUE "FF" ) }
    | ( trans states <airline-poss> ) { ( VALUE "9N" ) }
    | ( trans states' ) { ( VALUE "9N" ) }
    | ( trans world <airline-poss> ) { ( VALUE "TW" ) }
    | ( trans world express <airline-poss> ) { ( VALUE "RZ" ) }
    | ( trans world express's ) { ( VALUE "RZ" ) }
    | ( trans world's ) { ( VALUE "TW" ) }
    | ( u s <airline-poss> ) { ( VALUE "US" ) }
    | ( u s air <airline-poss> ) { ( VALUE "US" ) }
    | ( u s air's ) { ( VALUE "US" ) }
    | ( united <airline-poss> ) { ( VALUE "UA" ) }
    | ( united's ) { ( VALUE "UA" ) }
    | ( westair <airline-poss> ) { ( VALUE "OE" ) }
    | ( westair's ) { ( VALUE "OE" ) }
  ) .

<airline-name>
  ::= ( ( aerolineas argentinas ) { ( VALUE "AR" ) }
    | ( air alliance ) { ( VALUE "3J" ) }
    | ( air canada ) { ( VALUE "AC" ) }
    | ( air ontario ) { ( VALUE "GX" ) }
    | ( air wisconsin ) { ( VALUE "ZW" ) }
    | ( alaska <airline> ) { ( VALUE "AS" ) }
    | ( alaska ) { ( VALUE "AS" ) }
    | ( alpha air ) { ( VALUE "7V" ) }
    | ( america ) { ( VALUE "AA" ) }
    | ( america west <airline> ) { ( VALUE "HP" ) }
    | ( america west ) { ( VALUE "HP" ) }
    | ( american <airline> ) { ( VALUE "AA" ) }
    | ( american ) { ( VALUE "AA" ) }
    | ( american trans air ) { ( VALUE "TZ" ) }
    | ( american west <airline> ) { ( VALUE "HP" ) }
    | ( american west ) { ( VALUE "HP" ) }
    | ( atlantic coast <airline> ) { ( VALUE "DH" ) }
    | ( atlantic coast ) { ( VALUE "DH" ) }
    | ( atlantic southeast <airline> ) { ( VALUE "EV" ) }
    | ( atlantic southeast ) { ( VALUE "EV" ) }
    | ( braniff <airline> ) { ( VALUE "BE" ) }
    | ( braniff ) { ( VALUE "BE" ) }
    | ( braniff international <airline> ) { ( VALUE "BE" ) }
    | ( braniff international ) { ( VALUE "BE" ) }
    | ( british airways ) { ( VALUE "BA" ) }
    | ( business express <airline> ) { ( VALUE "HQ" ) }
    | ( business express ) { ( VALUE "HQ" ) }
    | ( canadian <airline> international ) { ( VALUE "CP" ) }
    | ( canadian <airline> ) { ( VALUE "CP" ) }
    | ( canadian ) { ( VALUE "CP" ) }
    | ( carnival <airline> ) { ( VALUE "KW" ) }
    | ( christman air system ) { ( VALUE "SX" ) }
    | ( colgan <airline> ) { ( VALUE "9L" ) }
    | ( colgan ) { ( VALUE "9L" ) }
    | ( colgan air ) { ( VALUE "9L" ) }
    | ( comair ) { ( VALUE "OH" ) }
    | ( continental <airline> ) { ( VALUE "CO" ) }
    | ( continental ) { ( VALUE "CO" ) }
    | ( czechoslovak <airline> ) { ( VALUE "OK" ) }
    | ( czechoslovak ) { ( VALUE "OK" ) }
    | ( delta <airline> ) { ( VALUE "DL" ) }
    | ( delta ) { ( VALUE "DL" ) }
    | ( express <airline> ) { ( VALUE "9E" ) }
    | ( express ) { ( VALUE "9E" ) }
    | ( grand airways ) { ( VALUE "QD" ) }
    | ( lufthansa ) { ( VALUE "LH" ) }
    | ( lufthansa german <airline> ) { ( VALUE "LH" ) }
    | ( m g m grand air ) { ( VALUE "MG" ) }
    | ( mesaba aviation ) { ( VALUE "XJ" ) }
    | ( midwest express <airline> ) { ( VALUE "YX" ) }
    | ( midwest express ) { ( VALUE "YX" ) }
    | ( nationair ) { ( VALUE "NX" ) }
    | ( northeast ) { ( VALUE "2V" ) }
    | ( northeast express <airline> ) { ( VALUE "2V" ) }
    | ( northeast express ) { ( VALUE "2V" ) }
    | ( northeast express regional <airline> ) { ( VALUE "2V" ) }
    | ( northwest <airline> ) { ( VALUE "NW" ) }
    | ( northwest ) { ( VALUE "NW" ) }
    | ( ontario <airline> ) { ( VALUE "GX" ) }
    | ( ontario express <airline> ) { ( VALUE "9X" ) }
    | ( ontario express ) { ( VALUE "9X" ) }
    | ( precision <airline> ) { ( VALUE "RP" ) }
    | ( precision ) { ( VALUE "RP" ) }
    | ( royal air ) { ( VALUE "AT" ) }
    | ( royal air maroc ) { ( VALUE "AT" ) }
    | ( sabena belgian world <airline> ) { ( VALUE "SN" ) }
    | ( sky west <airline> ) { ( VALUE "OO" ) }
    | ( sky west ) { ( VALUE "OO" ) }
    | ( southwest <airline> ) { ( VALUE "WN" ) }
    | ( southwest ) { ( VALUE "WN" ) }
    | ( southwest air ) { ( VALUE "WN" ) }
    | ( t w a ) { ( VALUE "TW" ) }
    | ( thai airways international ) { ( VALUE "TG" ) }
    | ( thai airways ) { ( VALUE "TG" ) }
    | ( tower air ) { ( VALUE "FF" ) }
    | ( trans states <airline> ) { ( VALUE "9N" ) }
    | ( trans states ) { ( VALUE "9N" ) }
    | ( trans world <airline> ) { ( VALUE "TW" ) }
    | ( trans world ) { ( VALUE "TW" ) }
    | ( trans world express <airline> ) { ( VALUE "RZ" ) }
    | ( trans world express ) { ( VALUE "RZ" ) }
    | ( u s <airline> ) { ( VALUE "US" ) }
    | ( u s air <airline> ) { ( VALUE "US" ) }
    | ( u s air ) { ( VALUE "US" ) }
    | ( united <airline> ) { ( VALUE "UA" ) }
    | ( united ) { ( VALUE "UA" ) }
    | ( westair <airline> ) { ( VALUE "OE" ) }
    | ( westair ) { ( VALUE "OE" ) }
  ) .

<airline-numq>
  ::= ( ( how many airlines ) { ( VALUE ) ( CLEAR context/airline ) }
  ) .

<airline-param>
  ::= ( ( the <airline> ) 
    | ( <airline> ) 
  ) .

<airline-poss>
  ::= ( ( airline's ) 
    | ( airlines' ) 
  ) .

<airline-pred-flight>
  ::= ( ( does <flight-descr> :flight-descr2 fly on ) { ( VALUE [a:airline] ( APPEND flight  $flight-descr2 ) ) }
    | ( flies <flight-descr> :flight-descr2 ) { ( VALUE [a:airline] ( APPEND flight  $flight-descr2 ) ) }
    | ( fly <flight-descr> :flight-descr2 ) { ( VALUE [a:airline] ( APPEND flight  $flight-descr2 ) ) }
    | ( has <flight-descr> :flight-descr2 ) { ( VALUE [a:airline] ( APPEND flight  $flight-descr2 ) ) }
    | ( have <flight-descr> :flight-descr2 ) { ( VALUE [a:airline] ( APPEND flight  $flight-descr2 ) ) }
    | ( is <flight-descr> :flight-descr2 ) { ( VALUE [a:airline] ( APPEND flight  $flight-descr2 ) ) }
    | ( is <flight-descr> :flight-descr2 with ) { ( VALUE [a:airline] ( APPEND flight  $flight-descr2 ) ) }
    | ( provide <flight-adj-list> :flight-adj-list2 travel service <flight-mod-phrase> :flight-mod-phrase5 ) { ( VALUE [a:airline] ( APPEND flight  ( APPEND AND $flight-adj-list2 $flight-mod-phrase5 ) ) ) }
    | ( serve <flight-descr> :flight-descr2 ) { ( VALUE [a:airline] ( APPEND flight  $flight-descr2 ) ) }
  ) .

<airline-pred>
  ::= ( ( <airline-pred-flight> :airline-pred-flight1 ) { ( VALUE [a:airline] $airline-pred-flight1 ) }
    | ( <flight-pred> :flight-pred1 ) { ( VALUE [a:airline] ( APPEND flight  $flight-pred1 ) ) ( WRITE context/flight $flight-pred1 ) }
  ) .

<airline-wh>
  ::= ( ( what <airline> ) { ( READ context/airline ( [a:airline] ) ) ( VALUE ( [a:airline] ) ) }
    | ( which <airline> ) { ( READ context/airline ( [a:airline] ) ) ( VALUE ( [a:airline] ) ) }
    | ( which of <det> airlines ) { ( READ context/airline ( [a:airline] ) ) ( VALUE ( [a:airline] ) ) }
  ) .

<airline>
  ::= ( ( airline ) 
    | ( airlines ) 
  ) .

<start_symbol_airport-adj>
  ::= ( ( <city-name> :city-name1 ) { ( VALUE [a:airport] ( APPEND city  ( [b:city] ) ) ) ( WRITE context/city [b:city] ( APPEND city_name  $city-name1 ) ) }
    | ( <city-name> :city-name1 <state-name> :state-name2 ) { ( VALUE [b:airport] ( APPEND city  ( [a:city] ) ) ) ( WRITE context/city [a:city] ( APPEND AND ( APPEND city_name  $city-name1 ) ( APPEND state_name  $state-name2 ) ) ) }
    | ( <city-poss> :city-poss1 ) { ( VALUE [a:airport] ( APPEND city  ( [b:city] ) ) ) ( WRITE context/city [b:city] ( APPEND city_name  $city-poss1 ) ) }
  ) .

<airport-code-descr>
  ::= ( ( <airport-code> :airport-code1 ) { ( VALUE $airport-code1 ) }
    | ( <det> <code> <airport-code> :airport-code3 ) { ( VALUE $airport-code3 ) }
    | ( airport <code> <airport-code> :airport-code3 ) { ( VALUE $airport-code3 ) }
  ) .

<airport-code-param>
  ::= ( ( <det> airport <code> ) 
    | ( airport <code> ) 
  ) .

<airport-code>
  ::= ( ( a t l ) { ( VALUE "ATL" ) }
    | ( b n a ) { ( VALUE "BNA" ) }
    | ( b o s ) { ( VALUE "BOS" ) }
    | ( b u r ) { ( VALUE "BUR" ) }
    | ( b w i ) { ( VALUE "BWI" ) }
    | ( c l e ) { ( VALUE "CLE" ) }
    | ( c l t ) { ( VALUE "CLT" ) }
    | ( c m h ) { ( VALUE "CMH" ) }
    | ( c v g ) { ( VALUE "CVG" ) }
    | ( d a l ) { ( VALUE "DAL" ) }
    | ( d c a ) { ( VALUE "DCA" ) }
    | ( d e n ) { ( VALUE "DEN" ) }
    | ( d e t ) { ( VALUE "DET" ) }
    | ( d f w ) { ( VALUE "DFW" ) }
    | ( d t w ) { ( VALUE "DTW" ) }
    | ( e w r ) { ( VALUE "EWR" ) }
    | ( h o u ) { ( VALUE "HOU" ) }
    | ( h p n ) { ( VALUE "HPN" ) }
    | ( i a d ) { ( VALUE "IAD" ) }
    | ( i a h ) { ( VALUE "IAH" ) }
    | ( i n d ) { ( VALUE "IND" ) }
    | ( j f k ) { ( VALUE "JFK" ) }
    | ( l a s ) { ( VALUE "LAS" ) }
    | ( l a x ) { ( VALUE "LAX" ) }
    | ( l g a ) { ( VALUE "LGA" ) }
    | ( l g b ) { ( VALUE "LGB" ) }
    | ( m c i ) { ( VALUE "MCI" ) }
    | ( m c o ) { ( VALUE "MCO" ) }
    | ( m d w ) { ( VALUE "MDW" ) }
    | ( m e m ) { ( VALUE "MEM" ) }
    | ( m i a ) { ( VALUE "MIA" ) }
    | ( m k e ) { ( VALUE "MKE" ) }
    | ( m s p ) { ( VALUE "MSP" ) }
    | ( o a k ) { ( VALUE "OAK" ) }
    | ( o n t ) { ( VALUE "ONT" ) }
    | ( o r d ) { ( VALUE "ORD" ) }
    | ( p h l ) { ( VALUE "PHL" ) }
    | ( p h x ) { ( VALUE "PHX" ) }
    | ( p i e ) { ( VALUE "PIE" ) }
    | ( p i t ) { ( VALUE "PIT" ) }
    | ( s a n ) { ( VALUE "SAN" ) }
    | ( s e a ) { ( VALUE "SEA" ) }
    | ( s f o ) { ( VALUE "SFO" ) }
    | ( s j c ) { ( VALUE "SJC" ) }
    | ( s t l ) { ( VALUE "STL" ) }
    | ( t p a ) { ( VALUE "TPA" ) }
    | ( y k z ) { ( VALUE "YKZ" ) }
    | ( y m x ) { ( VALUE "YMX" ) }
    | ( y t z ) { ( VALUE "YTZ" ) }
    | ( y u l ) { ( VALUE "YUL" ) }
    | ( y y z ) { ( VALUE "YYZ" ) }
  ) .

<airport-descr>
  ::= ( ( <airport-adj> :airport-adj1 <airport-name> :airport-name2 ) { ( VALUE [a:airport] ( APPEND AND $airport-adj1 ( APPEND airport_code  $airport-name2 ) ) ) ( WRITE context/airport ( [a:airport] ) ) }
    | ( <airport-code> :airport-code1 ) { ( VALUE [a:airport] ( APPEND airport_code  $airport-code1 ) ) ( WRITE context/airport ( [a:airport] ) ) }
    | ( <airport-code> :airport-code1 or <airport-code> :airport-code3 ) { ( VALUE [a:airport] ( APPEND OR  ( APPEND airport_code  $airport-code1 ) ( APPEND airport_code  $airport-code3 ) ) ) ( WRITE context/airport ( [a:airport] ) ) }
    | ( <airport-code> :airport-code1 or <airport-name> :airport-name3 ) { ( VALUE [a:airport] ( APPEND OR  ( APPEND airport_code  $airport-code1 ) ( APPEND airport_code  $airport-name3 ) ) ) ( WRITE context/airport ( [a:airport] ) ) }
    | ( <airport-name> :airport-name1 ) { ( VALUE [a:airport] ( APPEND airport_code  $airport-name1 ) ) ( WRITE context/airport ( [a:airport] ) ) }
    | ( <airport-name> :airport-name1 <airport-mod> :airport-mod2 ) { ( VALUE [a:airport] ( APPEND AND ( APPEND airport_code  $airport-name1 ) $airport-mod2 ) ) ( WRITE context/airport ( [a:airport] ) ) }
    | ( <airport-name> :airport-name1 or <airport-code> :airport-code3 ) { ( VALUE [a:airport] ( APPEND OR  ( APPEND airport_code  $airport-name1 ) ( APPEND airport_code  $airport-code3 ) ) ) ( WRITE context/airport ( [a:airport] ) ) }
    | ( <airport-name> :airport-name1 or <airport-name> :airport-name3 ) { ( VALUE [a:airport] ( APPEND OR  ( APPEND airport_code  $airport-name1 ) ( APPEND airport_code  $airport-name3 ) ) ) ( WRITE context/airport ( [a:airport] ) ) }
    | ( <det> <airport> ) { ( READ context/airport ( [a:airport] ) ) ( VALUE ( [a:airport] ) ) }
    | ( <airport> ) { ( READ context/airport ( [a:airport] ) ) ( VALUE ( [a:airport] ) ) }
    | ( the <airport-adj> :airport-adj2 <airport> ) { ( VALUE [a:airport] $airport-adj2 ) ( WRITE context/airport ( [a:airport] ) ) }
    | ( <airport-adj> :airport-adj1 <airport> ) { ( VALUE [a:airport] $airport-adj1 ) ( WRITE context/airport ( [a:airport] ) ) }
    | ( the <airport-name> :airport-name2 airport ) { ( VALUE [a:airport] ( APPEND airport_code  $airport-name2 ) ) ( WRITE context/airport ( [a:airport] ) ) }
    | ( <airport-name> :airport-name1 airport ) { ( VALUE [a:airport] ( APPEND airport_code  $airport-name1 ) ) ( WRITE context/airport ( [a:airport] ) ) }
    | ( the <airport> <airport-mod> :airport-mod3 ) { ( VALUE [a:airport] $airport-mod3 ) ( WRITE context/airport ( [a:airport] ) ) }
    | ( <airport> <airport-mod> :airport-mod2 ) { ( VALUE [a:airport] $airport-mod2 ) ( WRITE context/airport ( [a:airport] ) ) }
    | ( the airport <airport-code> :airport-code3 ) { ( VALUE [a:airport] ( APPEND airport_code  $airport-code3 ) ) ( WRITE context/airport ( [a:airport] ) ) }
    | ( airport <airport-code> :airport-code2 ) { ( VALUE [a:airport] ( APPEND airport_code  $airport-code2 ) ) ( WRITE context/airport ( [a:airport] ) ) }
    | ( all airports ) { ( VALUE [a:airport] ( APPEND airport_code/any  airport_code ) ) ( WRITE context/airport ( [a:airport] ) ) }
    | ( all other airports ) { ( VALUE [a:airport] ( APPEND airport_code/any  airport_code ) ) ( WRITE context/airport ( [a:airport] ) ) }
    | ( any other airport ) { ( VALUE [a:airport] ( APPEND airport_code/any  airport_code ) ) ( WRITE context/airport ( [a:airport] ) ) }
    | ( other airports ) { ( VALUE [a:airport] ( APPEND airport_code/any  airport_code ) ) ( WRITE context/airport ( [a:airport] ) ) }
  ) .

<airport-mod>
  ::= ( ( <with-city> :with-city1 ) { ( VALUE [a:airport] ( APPEND city  $with-city1 ) ) }
    | ( in the <city-name> :city-name3 area ) { ( VALUE [a:airport] ( APPEND city  ( [b:city] ) ) ) ( WRITE context/city [b:city] ( APPEND city_name  $city-name3 ) ) }
    | ( located in <city-descr> :city-descr3 ) { ( VALUE [a:airport] ( APPEND city  $city-descr3 ) ) }
  ) .

<airport-name>
  ::= ( ( atlanta international ) { ( VALUE "ATL" ) }
    | ( baltimore international ) { ( VALUE "BWI" ) }
    | ( baltimore washington international ) { ( VALUE "BWI" ) }
    | ( baltimore washington ) { ( VALUE "BWI" ) }
    | ( boston international ) { ( VALUE "BOS" ) }
    | ( buttonville ) { ( VALUE "YKZ" ) }
    | ( charlotte douglas international ) { ( VALUE "CLT" ) }
    | ( charlotte douglas ) { ( VALUE "CLT" ) }
    | ( charlotte international ) { ( VALUE "CLT" ) }
    | ( cincinnati international ) { ( VALUE "CVG" ) }
    | ( cincinnati northern kentucky international ) { ( VALUE "CVG" ) }
    | ( cincinnati northern kentucky ) { ( VALUE "CVG" ) }
    | ( clearwater international ) { ( VALUE "PIE" ) }
    | ( clearwater ) { ( VALUE "PIE" ) }
    | ( columbus international ) { ( VALUE "CMH" ) }
    | ( dallas fort worth international ) { ( VALUE "DFW" ) }
    | ( dallas fort worth ) { ( VALUE "DFW" ) }
    | ( dallas international ) { ( VALUE "DFW" ) }
    | ( detroit city ) { ( VALUE "DET" ) }
    | ( dorval international ) { ( VALUE "YUL" ) }
    | ( dorval ) { ( VALUE "YUL" ) }
    | ( douglas international ) { ( VALUE "CLT" ) }
    | ( douglas ) { ( VALUE "CLT" ) }
    | ( dulles international ) { ( VALUE "IAD" ) }
    | ( dulles ) { ( VALUE "IAD" ) }
    | ( fort worth international ) { ( VALUE "DFW" ) }
    | ( general mitchell international ) { ( VALUE "MKE" ) }
    | ( general mitchell ) { ( VALUE "MKE" ) }
    | ( greater pittsburgh international ) { ( VALUE "PIT" ) }
    | ( greater pittsburgh ) { ( VALUE "PIT" ) }
    | ( hartsfield atlanta international ) { ( VALUE "ATL" ) }
    | ( hartsfield international ) { ( VALUE "ATL" ) }
    | ( hartsfield atlanta ) { ( VALUE "ATL" ) }
    | ( hartsfield ) { ( VALUE "ATL" ) }
    | ( hobby ) { ( VALUE "HOU" ) }
    | ( hopkins international ) { ( VALUE "CLE" ) }
    | ( hopkins ) { ( VALUE "CLE" ) }
    | ( houston intercontinental ) { ( VALUE "IAH" ) }
    | ( houston international ) { ( VALUE "IAH" ) }
    | ( indianapolis international ) { ( VALUE "IND" ) }
    | ( j f k airport ) { ( VALUE "JFK" ) }
    | ( john f kennedy international ) { ( VALUE "JFK" ) }
    | ( john f kennedy ) { ( VALUE "JFK" ) }
    | ( john kennedy international ) { ( VALUE "JFK" ) }
    | ( john kennedy ) { ( VALUE "JFK" ) }
    | ( kansas city international ) { ( VALUE "MCI" ) }
    | ( kennedy international ) { ( VALUE "JFK" ) }
    | ( kennedy ) { ( VALUE "JFK" ) }
    | ( l a international ) { ( VALUE "LAX" ) }
    | ( la guardia ) { ( VALUE "LGA" ) }
    | ( lambert international ) { ( VALUE "STL" ) }
    | ( lambert saint louis international ) { ( VALUE "STL" ) }
    | ( lester b pearson international ) { ( VALUE "YYZ" ) }
    | ( lester pearson international ) { ( VALUE "YYZ" ) }
    | ( lester b pearson ) { ( VALUE "YYZ" ) }
    | ( lester pearson ) { ( VALUE "YYZ" ) }
    | ( lindbergh field san diego international ) { ( VALUE "SAN" ) }
    | ( lindbergh field international ) { ( VALUE "SAN" ) }
    | ( lindbergh field san diego ) { ( VALUE "SAN" ) }
    | ( lindbergh field ) { ( VALUE "SAN" ) }
    | ( logan international ) { ( VALUE "BOS" ) }
    | ( logan ) { ( VALUE "BOS" ) }
    | ( long beach municipal ) { ( VALUE "LGB" ) }
    | ( los angeles international ) { ( VALUE "LAX" ) }
    | ( love field ) { ( VALUE "DAL" ) }
    | ( mccarran international ) { ( VALUE "LAS" ) }
    | ( mccarran ) { ( VALUE "LAS" ) }
    | ( memphis international ) { ( VALUE "MEM" ) }
    | ( metro ) { ( VALUE "DTW" ) }
    | ( metropolitan ) { ( VALUE "DTW" ) }
    | ( metropolitan oakland international ) { ( VALUE "OAK" ) }
    | ( metropolitan oakland ) { ( VALUE "OAK" ) }
    | ( metropolitan wayne county ) { ( VALUE "DTW" ) }
    | ( miami international ) { ( VALUE "MIA" ) }
    | ( midway ) { ( VALUE "MDW" ) }
    | ( minneapolis international ) { ( VALUE "MSP" ) }
    | ( minneapolis saint paul international ) { ( VALUE "MSP" ) }
    | ( minneapolis saint paul ) { ( VALUE "MSP" ) }
    | ( mirabel ) { ( VALUE "YMX" ) }
    | ( nashville international ) { ( VALUE "BNA" ) }
    | ( newark international ) { ( VALUE "EWR" ) }
    | ( northern kentucky international ) { ( VALUE "CVG" ) }
    | ( northern kentucky ) { ( VALUE "CVG" ) }
    | ( o'hare international ) { ( VALUE "ORD" ) }
    | ( o'hare ) { ( VALUE "ORD" ) }
    | ( ontario international ) { ( VALUE "ONT" ) }
    | ( orlando international ) { ( VALUE "MCO" ) }
    | ( philadelphia international ) { ( VALUE "PHL" ) }
    | ( port columbus international ) { ( VALUE "CMH" ) }
    | ( port columbus ) { ( VALUE "CMH" ) }
    | ( saint louis international ) { ( VALUE "STL" ) }
    | ( saint paul international ) { ( VALUE "MSP" ) }
    | ( saint petersburg clearwater international ) { ( VALUE "PIE" ) }
    | ( saint petersburg clearwater ) { ( VALUE "PIE" ) }
    | ( saint petersburg international ) { ( VALUE "PIE" ) }
    | ( salt lake city international ) { ( VALUE "SLC" ) }
    | ( san diego international ) { ( VALUE "SAN" ) }
    | ( san francisco international ) { ( VALUE "SFO" ) }
    | ( san jose international ) { ( VALUE "SFO" ) }
    | ( seatac international ) { ( VALUE "SEA" ) }
    | ( seatac ) { ( VALUE "SEA" ) }
    | ( seattle international ) { ( VALUE "SEA" ) }
    | ( seattle tacoma international ) { ( VALUE "SEA" ) }
    | ( sky harbor international ) { ( VALUE "PHX" ) }
    | ( sky harbor ) { ( VALUE "PHX" ) }
    | ( stapleton international ) { ( VALUE "DEN" ) }
    | ( stapleton ) { ( VALUE "DEN" ) }
    | ( tacoma international ) { ( VALUE "SEA" ) }
    | ( tampa international ) { ( VALUE "TPA" ) }
    | ( toronto international ) { ( VALUE "YYZ" ) }
    | ( toronto island ) { ( VALUE "YTZ" ) }
    | ( washington international ) { ( VALUE "DCA" ) }
    | ( washington national ) { ( VALUE "DCA" ) }
    | ( washington's national ) { ( VALUE "DCA" ) }
    | ( wayne county ) { ( VALUE "DTW" ) }
    | ( william b hartsfield atlanta international ) { ( VALUE "ATL" ) }
    | ( william hartsfield atlanta international ) { ( VALUE "ATL" ) }
    | ( william b hartsfield international ) { ( VALUE "ATL" ) }
    | ( william hartsfield international ) { ( VALUE "ATL" ) }
    | ( william b hartsfield atlanta ) { ( VALUE "ATL" ) }
    | ( william hartsfield atlanta ) { ( VALUE "ATL" ) }
    | ( william b hartsfield ) { ( VALUE "ATL" ) }
    | ( william hartsfield ) { ( VALUE "ATL" ) }
  ) .

<airport-wh>
  ::= ( ( what <airport> ) { ( VALUE ) ( CLEAR context/airport ) }
    | ( which <airport> ) { ( VALUE ) ( CLEAR context/airport ) }
  ) .

<airport>
  ::= ( ( airport ) 
    | ( airports ) 
  ) .

<amount>
  ::= ( ( <non-zero-digit> :non-zero-digit1 <digit> :digit2 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 1 $non-zero-digit1 ) ( VALUE 0 $digit2 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 <digit> :digit2 <digit> :digit3 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $non-zero-digit1 ) ( VALUE 1 $digit2 ) ( VALUE 0 $digit3 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 <digit> :digit2 <digit> :digit3 <digit> :digit4 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 3 $non-zero-digit1 ) ( VALUE 2 $digit2 ) ( VALUE 1 $digit3 ) ( VALUE 0 $digit4 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 <double-digit> :double-digit2 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $non-zero-digit1 ) ( VALUE 0 $double-digit2 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 hundred ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $non-zero-digit1 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 hundred and <double-digit> :double-digit4 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $non-zero-digit1 ) ( VALUE 0 $double-digit4 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 hundred <double-digit> :double-digit3 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $non-zero-digit1 ) ( VALUE 0 $double-digit3 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 hundred and <non-zero-digit> :non-zero-digit4 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $non-zero-digit1 ) ( VALUE 0 $non-zero-digit4 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 hundred <non-zero-digit> :non-zero-digit3 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $non-zero-digit1 ) ( VALUE 0 $non-zero-digit3 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 thousand ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 3 $non-zero-digit1 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 thousand <non-zero-digit> :non-zero-digit3 hundred ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 3 $non-zero-digit1 ) ( VALUE 2 $non-zero-digit3 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 thousand <non-zero-digit> :non-zero-digit3 hundred and <double-digit> :double-digit6 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 3 $non-zero-digit1 ) ( VALUE 2 $non-zero-digit3 ) ( VALUE 0 $double-digit6 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 thousand <non-zero-digit> :non-zero-digit3 hundred <double-digit> :double-digit5 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 3 $non-zero-digit1 ) ( VALUE 2 $non-zero-digit3 ) ( VALUE 0 $double-digit5 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 thousand <non-zero-digit> :non-zero-digit3 hundred and <non-zero-digit> :non-zero-digit6 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 3 $non-zero-digit1 ) ( VALUE 2 $non-zero-digit3 ) ( VALUE 0 $non-zero-digit6 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 thousand <non-zero-digit> :non-zero-digit3 hundred <non-zero-digit> :non-zero-digit5 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 3 $non-zero-digit1 ) ( VALUE 2 $non-zero-digit3 ) ( VALUE 0 $non-zero-digit5 ) ) ) }
    | ( a hundred ) { ( VALUE [a:integer] 100 ) }
    | ( a hundred and <double-digit> :double-digit4 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 1 ) ( VALUE 0 $double-digit4 ) ) ) }
    | ( a hundred <double-digit> :double-digit3 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 1 ) ( VALUE 0 $double-digit3 ) ) ) }
    | ( a hundred and <non-zero-digit> :non-zero-digit4 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 1 ) ( VALUE 0 $non-zero-digit4 ) ) ) }
    | ( a hundred <non-zero-digit> :non-zero-digit3 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 1 ) ( VALUE 0 $non-zero-digit3 ) ) ) }
    | ( a thousand ) { ( VALUE [a:integer] 1000 ) }
    | ( a thousand <non-zero-digit> :non-zero-digit3 hundred ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 3 10 ) ( VALUE 2 $non-zero-digit3 ) ) ) }
    | ( a thousand <non-zero-digit> :non-zero-digit3 hundred and <double-digit> :double-digit6 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 3 10 ) ( VALUE 2 $non-zero-digit3 ) ( VALUE 0 $double-digit6 ) ) ) }
    | ( a thousand <non-zero-digit> :non-zero-digit3 hundred <double-digit> :double-digit5 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 3 10 ) ( VALUE 2 $non-zero-digit3 ) ( VALUE 0 $double-digit5 ) ) ) }
    | ( a thousand <non-zero-digit> :non-zero-digit3 hundred and <non-zero-digit> :non-zero-digit6 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 3 10 ) ( VALUE 2 $non-zero-digit3 ) ( VALUE 0 $non-zero-digit6 ) ) ) }
    | ( a thousand <non-zero-digit> :non-zero-digit3 hundred <non-zero-digit> :non-zero-digit5 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 3 10 ) ( VALUE 2 $non-zero-digit3 ) ( VALUE 0 $non-zero-digit5 ) ) ) }
  ) .

<arrival>
  ::= ( ( <i-want> to <arrive> ) 
    | ( arrival ) 
    | ( arrival time ) 
    | ( arrival times ) 
    | ( arriving ) 
    | ( getting in ) 
    | ( going ) 
    | ( it arrives ) 
    | ( reaching ) 
    | ( terminating ) 
  ) .

<arrive>
  ::= ( ( arrive ) 
    | ( arrives ) 
    | ( be there ) 
    | ( get ) 
    | ( land ) 
    | ( must arrive ) 
    | ( reaches ) 
    | ( should arrive ) 
    | ( will get me ) 
    | ( would arrive ) 
  ) .

<can>
  ::= ( ( can ) 
    | ( could ) 
    | ( would ) 
  ) .

<cardinal>
  ::= ( ( eight ) { ( VALUE [a:integer] 8 ) }
    | ( eighteen ) { ( VALUE [a:integer] 18 ) }
    | ( eleven ) { ( VALUE [a:integer] 11 ) }
    | ( fifteen ) { ( VALUE [a:integer] 15 ) }
    | ( five ) { ( VALUE [a:integer] 5 ) }
    | ( four ) { ( VALUE [a:integer] 4 ) }
    | ( fourteen ) { ( VALUE [a:integer] 14 ) }
    | ( nine ) { ( VALUE [a:integer] 9 ) }
    | ( nineteen ) { ( VALUE [a:integer] 19 ) }
    | ( one ) { ( VALUE [a:integer] 1 ) }
    | ( seven ) { ( VALUE [a:integer] 7 ) }
    | ( seventeen ) { ( VALUE [a:integer] 17 ) }
    | ( six ) { ( VALUE [a:integer] 6 ) }
    | ( sixteen ) { ( VALUE [a:integer] 16 ) }
    | ( ten ) { ( VALUE [a:integer] 10 ) }
    | ( thirteen ) { ( VALUE [a:integer] 13 ) }
    | ( thirty ) { ( VALUE [a:integer] 30 ) }
    | ( thirty one ) { ( VALUE [a:integer] 31 ) }
    | ( three ) { ( VALUE [a:integer] 3 ) }
    | ( twelve ) { ( VALUE [a:integer] 12 ) }
    | ( twenty ) { ( VALUE [a:integer] 20 ) }
    | ( twenty eight ) { ( VALUE [a:integer] 28 ) }
    | ( twenty five ) { ( VALUE [a:integer] 25 ) }
    | ( twenty four ) { ( VALUE [a:integer] 24 ) }
    | ( twenty nine ) { ( VALUE [a:integer] 29 ) }
    | ( twenty one ) { ( VALUE [a:integer] 21 ) }
    | ( twenty seven ) { ( VALUE [a:integer] 27 ) }
    | ( twenty six ) { ( VALUE [a:integer] 26 ) }
    | ( twenty three ) { ( VALUE [a:integer] 23 ) }
    | ( twenty two ) { ( VALUE [a:integer] 22 ) }
    | ( two ) { ( VALUE [a:integer] 2 ) }
  ) .

<cheapest>
  ::= ( ( cheapest ) 
    | ( least expensive ) 
    | ( lowest ) 
    | ( minimum ) 
  ) .

<city-area>
  ::= ( ( <city-poss> :city-poss1 downtown ) { ( VALUE [a:city] ( APPEND city_name  $city-poss1 ) ) }
    | ( downtown ) { ( READ context/city ( [a:city] ) ) ( VALUE ( [a:city] ) ) }
    | ( downtown <city-name> :city-name2 ) { ( VALUE [a:city] ( APPEND city_name  $city-name2 ) ) }
    | ( the downtown area ) { ( READ context/city ( [a:city] ) ) ( VALUE ( [a:city] ) ) }
  ) .

<city-descr>
  ::= ( ( <city-name> :city-name1 ) { ( VALUE [a:city] ( APPEND city_name  $city-name1 ) ) ( WRITE context/city ( [a:city] ) ) }
    | ( <city-name> :city-name1 <city-name> :city-name2 and <city-name> :city-name4 ) { ( VALUE [a:city] ( APPEND OR  ( APPEND city_name  $city-name1 ) ( APPEND city_name  $city-name2 ) ( APPEND city_name  $city-name4 ) ) ) ( WRITE context/city ( [a:city] ) ) }
    | ( <city-name> :city-name1 <city-name> :city-name2 or <city-name> :city-name4 ) { ( VALUE [a:city] ( APPEND OR  ( APPEND city_name  $city-name1 ) ( APPEND city_name  $city-name2 ) ( APPEND city_name  $city-name4 ) ) ) ( WRITE context/city ( [a:city] ) ) }
    | ( <city-name> :city-name1 <country-name> :country-name2 ) { ( VALUE [a:city] ( APPEND AND ( APPEND city_name  $city-name1 ) ( APPEND country_name  $country-name2 ) ) ) ( WRITE context/city ( [a:city] ) ) }
    | ( <city-name> :city-name1 <state-name> :state-name2 ) { ( VALUE [a:city] ( APPEND AND ( APPEND city_name  $city-name1 ) ( APPEND state_name  $state-name2 ) ) ) ( WRITE context/city ( [a:city] ) ) }
    | ( <city-name> :city-name1 and <city-name> :city-name3 ) { ( VALUE [a:city] ( APPEND OR  ( APPEND city_name  $city-name1 ) ( APPEND city_name  $city-name3 ) ) ) ( WRITE context/city ( [a:city] ) ) }
    | ( <city-name> :city-name1 or <city-name> :city-name3 ) { ( VALUE [a:city] ( APPEND OR  ( APPEND city_name  $city-name1 ) ( APPEND city_name  $city-name3 ) ) ) ( WRITE context/city ( [a:city] ) ) }
    | ( all cities ) { ( VALUE [a:city] ( APPEND city_name/any  city_name ) ) ( WRITE context/city ( [a:city] ) ) }
    | ( any city ) { ( VALUE [a:city] ( APPEND city_name/any  city_name ) ) ( WRITE context/city ( [a:city] ) ) }
    | ( anywhere ) { ( VALUE [a:city] ( APPEND city_name/any  city_name ) ) ( WRITE context/city ( [a:city] ) ) }
    | ( city <city-name> :city-name2 ) { ( VALUE [a:city] ( APPEND city_name  $city-name2 ) ) ( WRITE context/city ( [a:city] ) ) }
    | ( dallas fort worth ) { ( VALUE [a:city] ( APPEND OR  ( APPEND city_name  "DALLAS" ) ( APPEND city_name/"FORT  WORTH" ) ) ) }
    | ( either <city-name> :city-name2 <city-name> :city-name3 or <city-name> :city-name5 ) { ( VALUE [a:city] ( APPEND OR  ( APPEND city_name  $city-name2 ) ( APPEND city_name  $city-name3 ) ( APPEND city_name  $city-name5 ) ) ) ( WRITE context/city ( [a:city] ) ) }
    | ( either <city-name> :city-name2 or <city-name> :city-name4 ) { ( VALUE [a:city] ( APPEND OR  ( APPEND city_name  $city-name2 ) ( APPEND city_name  $city-name4 ) ) ) ( WRITE context/city ( [a:city] ) ) }
    | ( fort worth dallas ) { ( VALUE [a:city] ( APPEND OR  ( APPEND city_name  "DALLAS" ) ( APPEND city_name/"FORT  WORTH" ) ) ) }
    | ( other cities ) { ( VALUE [a:city] ( APPEND city_name/any  city_name ) ) ( WRITE context/city ( [a:city] ) ) }
    | ( some other city ) { ( VALUE [a:city] ( APPEND city_name/any  city_name ) ) ( WRITE context/city ( [a:city] ) ) }
    | ( somewhere ) { ( VALUE [a:city] ( APPEND city_name/any  city_name ) ) ( WRITE context/city ( [a:city] ) ) }
    | ( the bay area ) { ( VALUE [a:city] ( APPEND OR  ( APPEND city_name/"SAN  FRANCSICO" ) ( APPEND city_name  "OAKLAND" ) ( APPEND city_name/"SAN  JOSE" ) ) ) ( WRITE context/city ( [a:city] ) ) }
    | ( the city ) { ( VALUE ) ( CLEAR context/city ) }
    | ( the city of <city-name> :city-name4 ) { ( VALUE [a:city] ( APPEND city_name  $city-name4 ) ) ( WRITE context/city ( [a:city] ) ) }
    | ( various cities ) { ( VALUE [a:city] ( APPEND city_name/any  city_name ) ) ( WRITE context/city ( [a:city] ) ) }
  ) .

<city-name>
  ::= ( ( atlanta ) { ( VALUE "ATLANTA" ) }
    | ( baltimore ) { ( VALUE "BALTIMORE" ) }
    | ( boston ) { ( VALUE "BOSTON" ) }
    | ( burbank ) { ( VALUE "BURBANK" ) }
    | ( charlotte ) { ( VALUE "CHARLOTTE" ) }
    | ( chicago ) { ( VALUE "CHICAGO" ) }
    | ( cincinnati ) { ( VALUE "CINCINNATI" ) }
    | ( cleveland ) { ( VALUE "CLEVELAND" ) }
    | ( columbus ) { ( VALUE "COLUMBUS" ) }
    | ( d c ) { ( VALUE "WASHINGTON" ) }
    | ( dallas ) { ( VALUE "DALLAS" ) }
    | ( denver ) { ( VALUE "DENVER" ) }
    | ( detroit ) { ( VALUE "DETROIT" ) }
    | ( fort worth ) { ( VALUE "FORT WORTH" ) }
    | ( houston ) { ( VALUE "HOUSTON" ) }
    | ( indianapolis ) { ( VALUE "INDIANAPOLIS" ) }
    | ( kansas city ) { ( VALUE "KANSAS CITY" ) }
    | ( l a ) { ( VALUE "LOS ANGELES" ) }
    | ( las vegas ) { ( VALUE "LAS VEGAS" ) }
    | ( long beach ) { ( VALUE "LONG BEACH" ) }
    | ( los angeles ) { ( VALUE "LOS ANGELES" ) }
    | ( memphis ) { ( VALUE "MEMPHIS" ) }
    | ( miami ) { ( VALUE "MIAMI" ) }
    | ( milwaukee ) { ( VALUE "MILWAUKEE" ) }
    | ( minneapolis ) { ( VALUE "MINNEAPOLIS" ) }
    | ( montreal ) { ( VALUE "MONTREAL" ) }
    | ( nashville ) { ( VALUE "NASHVILLE" ) }
    | ( new york ) { ( VALUE "NEW YORK" ) }
    | ( new york city ) { ( VALUE "NEW YORK" ) }
    | ( newark ) { ( VALUE "NEWARK" ) }
    | ( oakland ) { ( VALUE "OAKLAND" ) }
    | ( ontario ) { ( VALUE "ONTARIO" ) }
    | ( orlando ) { ( VALUE "ORLANDO" ) }
    | ( philadelphia ) { ( VALUE "PHILADELPHIA" ) }
    | ( philly ) { ( VALUE "PHILADELPHIA" ) }
    | ( phoenix ) { ( VALUE "PHOENIX" ) }
    | ( pittsburgh ) { ( VALUE "PITTSBURGH" ) }
    | ( saint louis ) { ( VALUE "ST. LOUIS" ) }
    | ( saint paul ) { ( VALUE "ST. PAUL" ) }
    | ( saint petersburg ) { ( VALUE "ST. PETERSBURG" ) }
    | ( salt lake ) { ( VALUE "SALT LAKE CITY" ) }
    | ( salt lake city ) { ( VALUE "SALT LAKE CITY" ) }
    | ( san diego ) { ( VALUE "SAN DIEGO" ) }
    | ( san francisco ) { ( VALUE "SAN FRANCISCO" ) }
    | ( san jose ) { ( VALUE "SAN JOSE" ) }
    | ( seattle ) { ( VALUE "SEATTLE" ) }
    | ( tacoma ) { ( VALUE "TACOMA" ) }
    | ( tampa ) { ( VALUE "TAMPA" ) }
    | ( toronto ) { ( VALUE "TORONTO" ) }
    | ( vegas ) { ( VALUE "LAS VEGAS" ) }
    | ( washington ) { ( VALUE "WASHINGTON" ) }
    | ( washington d c ) { ( VALUE "WASHINGTON" ) }
    | ( westchester ) { ( VALUE "WESTCHESTER COUNTY" ) }
    | ( westchester county ) { ( VALUE "WESTCHESTER COUNTY" ) }
  ) .

<city-poss>
  ::= ( ( atlanta's ) { ( VALUE "ATLANTA" ) }
    | ( baltimore's ) { ( VALUE "BALTIMORE" ) }
    | ( boston's ) { ( VALUE "BOSTON" ) }
    | ( burbank's ) { ( VALUE "BURBANK" ) }
    | ( charlotte's ) { ( VALUE "CHARLOTTE" ) }
    | ( chicago's ) { ( VALUE "CHICAGO" ) }
    | ( cincinnati's ) { ( VALUE "CINCINNATI" ) }
    | ( cleveland's ) { ( VALUE "CLEVELAND" ) }
    | ( columbus's ) { ( VALUE "COLUMBUS" ) }
    | ( d c's ) { ( VALUE "WASHINGTON" ) }
    | ( dallas's ) { ( VALUE "DALLAS" ) }
    | ( denver's ) { ( VALUE "DENVER" ) }
    | ( detroit's ) { ( VALUE "DETROIT" ) }
    | ( fort worth's ) { ( VALUE "FORT WORTH" ) }
    | ( houston's ) { ( VALUE "HOUSTON" ) }
    | ( indianapolis's ) { ( VALUE "INDIANAPOLIS" ) }
    | ( kansas city's ) { ( VALUE "KANSAS CITY" ) }
    | ( l a's ) { ( VALUE "LOS ANGELES" ) }
    | ( las vegas's ) { ( VALUE "LAS VEGAS" ) }
    | ( long beach's ) { ( VALUE "LONG BEACH" ) }
    | ( los angeles's ) { ( VALUE "LOS ANGELES" ) }
    | ( memphis' ) { ( VALUE "MEMPHIS" ) }
    | ( memphis's ) { ( VALUE "MEMPHIS" ) }
    | ( miami's ) { ( VALUE "MIAMI" ) }
    | ( milwaukee's ) { ( VALUE "MILWAUKEE" ) }
    | ( minneapolis's ) { ( VALUE "MINNEAPOLIS" ) }
    | ( montreal's ) { ( VALUE "MONTREAL" ) }
    | ( nashville's ) { ( VALUE "NASHVILLE" ) }
    | ( new york city's ) { ( VALUE "NEW YORK" ) }
    | ( new york's ) { ( VALUE "NEW YORK" ) }
    | ( newark's ) { ( VALUE "NEWARK" ) }
    | ( oakland's ) { ( VALUE "OAKLAND" ) }
    | ( ontario's ) { ( VALUE "ONTARIO" ) }
    | ( orlando's ) { ( VALUE "ORLANDO" ) }
    | ( philadelphia's ) { ( VALUE "PHILADELPHIA" ) }
    | ( philly's ) { ( VALUE "PHILADELPHIA" ) }
    | ( phoenix's ) { ( VALUE "PHOENIX" ) }
    | ( pittsburgh's ) { ( VALUE "PITTSBURGH" ) }
    | ( saint louis's ) { ( VALUE "ST. LOUIS" ) }
    | ( saint paul's ) { ( VALUE "ST. PAUL" ) }
    | ( saint petersburg's ) { ( VALUE "ST. PETERSBURG" ) }
    | ( salt lake city's ) { ( VALUE "SALT LAKE CITY" ) }
    | ( salt lake's ) { ( VALUE "SALT LAKE CITY" ) }
    | ( san diego's ) { ( VALUE "SAN DIEGO" ) }
    | ( san francisco's ) { ( VALUE "SAN FRANCISCO" ) }
    | ( san jose's ) { ( VALUE "SAN JOSE" ) }
    | ( seattle's ) { ( VALUE "SEATTLE" ) }
    | ( tacoma's ) { ( VALUE "TACOMA" ) }
    | ( tampa's ) { ( VALUE "TAMPA" ) }
    | ( toronto's ) { ( VALUE "TORONTO" ) }
    | ( vegas's ) { ( VALUE "LAS VEGAS" ) }
    | ( washington d c's ) { ( VALUE "WASHINGTON" ) }
    | ( washington's ) { ( VALUE "WASHINGTON" ) }
    | ( westchester county's ) { ( VALUE "WESTCHESTER COUNTY" ) }
    | ( westchester's ) { ( VALUE "WESTCHESTER COUNTY" ) }
  ) .

<city-pred-airline>
  ::= ( ( are served by <airline-descr> :airline-descr4 ) { ( VALUE [a:city] ( APPEND OR  ( APPEND incoming_flight/airline  $airline-descr4 ) ( APPEND outgoing_flight/airline  $airline-descr4 ) ) ) }
  ) .

<city-wh>
  ::= ( ( what <city> ) 
    | ( which <city> ) 
  ) .

<city>
  ::= ( ( cities ) 
    | ( city ) 
  ) .

<class-type>
  ::= ( ( business class ) { ( VALUE "BUSINESS" ) }
    | ( coach ) { ( VALUE "COACH" ) }
    | ( coach class ) { ( VALUE "COACH" ) }
    | ( coach economy ) { ( VALUE "COACH" ) }
    | ( first class ) { ( VALUE "FIRST" ) }
    | ( the coach discount class ) { ( VALUE "COACH" ) }
  ) .

<clear-memory>
  ::= ( ( new itinerary ) { ( READ context/memory_READ ( [a:string] ) ) ( READ context/current_date [b:date_day] ) ( READ context/current_time ( [c:integer] ) ) ( VALUE "clear memory" ) ( CLEAR context ) ( WRITE context ( APPEND AND ( APPEND memory_READ  ( [a:string] ) ) ( APPEND current_date  [b:date_day] ) ( APPEND current_time  ( [c:integer] ) ) ( APPEND date_day  [b:date_day] ) ) ) }
    | ( next listing ) { ( READ context/memory_READ ( [a:string] ) ) ( READ context/current_date [b:date_day] ) ( READ context/current_time ( [c:integer] ) ) ( VALUE "clear memory" ) ( CLEAR context ) ( WRITE context ( APPEND AND ( APPEND memory_READ  ( [a:string] ) ) ( APPEND current_date  [b:date_day] ) ( APPEND current_time  ( [c:integer] ) ) ( APPEND date_day  [b:date_day] ) ) ) }
    | ( stop ) { ( READ context/memory_READ ( [a:string] ) ) ( READ context/current_date [b:date_day] ) ( READ context/current_time ( [c:integer] ) ) ( VALUE "clear memory" ) ( CLEAR context ) ( WRITE context ( APPEND AND ( APPEND memory_READ  ( [a:string] ) ) ( APPEND current_date  [b:date_day] ) ( APPEND current_time  ( [c:integer] ) ) ( APPEND date_day  [b:date_day] ) ) ) }
  ) .

<start_symbol_code>
  ::= ( ( abbreviation ) 
    | ( abbreviations ) 
    | ( code ) 
    | ( codes ) 
    | ( initials ) 
    | ( prefix ) 
    | ( symbol ) 
  ) .

<cost-upper-bound>
  ::= ( ( <cost> :cost1 or less ) { ( VALUE [a:bounded_integer] ( APPEND range/upper/<=  $cost1 ) ) }
    | ( at most <cost> :cost3 ) { ( VALUE [a:bounded_integer] ( APPEND range/upper/<=  $cost3 ) ) }
    | ( below <cost> :cost2 ) { ( VALUE [a:bounded_integer] ( APPEND range/upper/<  $cost2 ) ) }
    | ( equal to or less than <cost> :cost6 ) { ( VALUE [a:bounded_integer] ( APPEND range/upper/<=  $cost6 ) ) }
    | ( less than <cost> :cost3 ) { ( VALUE [a:bounded_integer] ( APPEND range/upper/<  $cost3 ) ) }
    | ( less than or equal to <cost> :cost6 ) { ( VALUE [a:bounded_integer] ( APPEND range/upper/<=  $cost6 ) ) }
    | ( no more than <cost> :cost4 ) { ( VALUE [a:bounded_integer] ( APPEND range/upper/<=  $cost4 ) ) }
    | ( under <cost> :cost2 ) { ( VALUE [a:bounded_integer] ( APPEND range/upper/<  $cost2 ) ) }
  ) .

<cost>
  ::= ( ( <amount> :amount1 ) { ( VALUE [a:integer] $amount1 ) }
    | ( <amount> :amount1 bucks ) { ( VALUE [a:integer] $amount1 ) }
    | ( <amount> :amount1 dollars ) { ( VALUE [a:integer] $amount1 ) }
  ) .

<count-airlines-query>
  ::= ( ( <airline-numq> :airline-numq1 <flight-pred> :flight-pred2 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info  count(*) ) ( APPEND object  airline ) ( APPEND specs  airline ) ( [a:airline] ) ) ) ( WRITE context/airline [a:airline] ( APPEND AND $airline-numq1 ( APPEND flight  $flight-pred2 ) ) ) }
  ) .

<count-fares-query>
  ::= ( ( how many <fare> are there <return-type> :return-type6 <flight-mod-phrase> :flight-mod-phrase7 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info  count(*) ) ( APPEND object  fare ) ( APPEND specs/fare  ( [b:fare] ) ) ) ) ( WRITE context/flight [a:flight] $flight-mod-phrase7 ) ( WRITE context/fare [b:fare] ( APPEND AND $return-type6 ( APPEND flight  ( [a:flight] ) ) ) ) }
  ) .

<count-flights-query>
  ::= ( ( <flight-numq> :flight-numq1 are there ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info  count(*) ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-numq1 ) ) }
    | ( <flight-numq> continue on to other cities ) { ( READ context/flight ( [a:flight] ) ) ( READ context/city ( [b:city] ) ) ( VALUE [d:query] ( APPEND AND ( APPEND info  count(*) ) ( APPEND object  flight ) ( APPEND specs/flight  ( [e:flight] ) ) ) ) ( WRITE context/flight [e:flight] ( UPDATE ( [a:flight] ) ( APPEND to_city  ( [c:city] ) ) ) ) }
    | ( <find> <flight-numq> :flight-numq2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info  count(*) ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-numq2 ) ) }
    | ( <flight-numq> :flight-numq1 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info  count(*) ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-numq1 ) ) }
    | ( <find> <flight-numq> :flight-numq2 <flight-mod-phrase> :flight-mod-phrase3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info  count(*) ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( UPDATE $flight-numq2 $flight-mod-phrase3 ) ) ) }
    | ( <flight-numq> :flight-numq1 <flight-mod-phrase> :flight-mod-phrase2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info  count(*) ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( UPDATE $flight-numq1 $flight-mod-phrase2 ) ) ) }
    | ( <find> <flight-numq> :flight-numq2 <flight-pred> :flight-pred3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info  count(*) ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( UPDATE $flight-numq2 $flight-pred3 ) ) ) }
    | ( <flight-numq> :flight-numq1 <flight-pred> :flight-pred2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info  count(*) ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( UPDATE $flight-numq1 $flight-pred2 ) ) ) }
    | ( <find> the total number <with-flight> :with-flight5 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info  count(*) ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $with-flight5 ) ) }
    | ( the total number <with-flight> :with-flight4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info  count(*) ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $with-flight4 ) ) }
    | ( how many <flight-pred> :flight-pred3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info  count(*) ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-pred3 ) ) }
    | ( how many are there ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info  count(*) ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) }
  ) .

<count-objects-query>
  ::= ( ( <count-airlines-query> :count-airlines-query1 ) { ( VALUE [a:query] $count-airlines-query1 ) }
    | ( <count-fares-query> :count-fares-query1 ) { ( VALUE [a:query] $count-fares-query1 ) }
    | ( <count-flights-query> :count-flights-query1 ) { ( VALUE [a:query] $count-flights-query1 ) }
  ) .

<country-name>
  ::= ( ( canada ) { ( VALUE "CANADA" ) }
  ) .

<start_symbol_date-day-descr>
  ::= ( ( <cardinal> :cardinal1 <month> :month2 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND day_number  $cardinal1 ) ( APPEND month_number  $month2 ) ( APPEND year  ( CURRENT_YEAR ) ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( <cardinal> :cardinal1 days from today ) { ( VALUE [a:date_day] ( CURRENT_DATE $cardinal1 ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( <cardinal> :cardinal1 of <month> :month3 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND month_number  $month3 ) ( APPEND day_number  $cardinal1 ) ( APPEND year  ( CURRENT_YEAR ) ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( <day-name> :day-name1 ) { ( VALUE [a:date_day] ( NEXT_DATE $day-name1 ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( <day-name> :day-name1 <month> :month2 <cardinal> :cardinal3 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND day_name  $day-name1 ) ( APPEND month_number  $month2 ) ( APPEND day_number  $cardinal3 ) ( APPEND year  ( CURRENT_YEAR ) ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( <day-name> :day-name1 <month> :month2 <ordinal> :ordinal3 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND day_name  $day-name1 ) ( APPEND month_number  $month2 ) ( APPEND day_number  $ordinal3 ) ( APPEND year  ( CURRENT_YEAR ) ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( <day-name> :day-name1 <month> :month2 <ordinal> :ordinal3 <year> :year4 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND day_name  $day-name1 ) ( APPEND month_number  $month2 ) ( APPEND year  $year4 ) ( APPEND day_number  $ordinal3 ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( <day-name> :day-name1 <month> :month2 the <ordinal> :ordinal4 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND day_name  $day-name1 ) ( APPEND month_number  $month2 ) ( APPEND day_number  $ordinal4 ) ( APPEND year  ( CURRENT_YEAR ) ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( <day-name> :day-name1 and <day-name> :day-name3 ) { ( VALUE [a:date_day] ( APPEND OR  ( NEXT_DATE $day-name1 ) ( NEXT_DATE $day-name3 ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( <day-name> :day-name1 or <day-name> :day-name3 ) { ( VALUE [a:date_day] ( APPEND OR  ( NEXT_DATE $day-name1 ) ( NEXT_DATE $day-name3 ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( <day-name> :day-name1 the <ordinal> :ordinal3 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND day_name  $day-name1 ) ( APPEND day_number  $ordinal3 ) ( APPEND month_number  ( CURRENT_MONTH ) ) ( APPEND year  ( CURRENT_YEAR ) ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( <day-name> :day-name1 the <ordinal> :ordinal3 of <month> :month5 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND day_name  $day-name1 ) ( APPEND month_number  $month5 ) ( APPEND day_number  $ordinal3 ) ( APPEND year  ( CURRENT_YEAR ) ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( <month> :month1 <cardinal> :cardinal2 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND month_number  $month1 ) ( APPEND day_number  $cardinal2 ) ( APPEND year  [a:integer] ( CURRENT_YEAR ) ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( <month> :month1 <ordinal> :ordinal2 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND month_number  $month1 ) ( APPEND day_number  $ordinal2 ) ( APPEND year  ( CURRENT_YEAR ) ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( <month> :month1 <ordinal> :ordinal2 <year> :year3 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND month_number  $month1 ) ( APPEND day_number  $ordinal2 ) ( APPEND year  $year3 ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( <month> :month1 <ordinal> :ordinal2 and <ordinal> :ordinal4 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND month_number  $month1 ) ( APPEND OR  ( APPEND day_number  $ordinal2 ) ( APPEND day_number  $ordinal4 ) ) ( APPEND year  ( CURRENT_YEAR ) ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( <month> :month1 <ordinal> :ordinal2 or <ordinal> :ordinal4 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND month_number  $month1 ) ( APPEND OR  ( APPEND day_number  $ordinal2 ) ( APPEND day_number  $ordinal4 ) ) ( APPEND year  ( CURRENT_YEAR ) ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( <month> :month1 the <ordinal> :ordinal3 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND month_number  $month1 ) ( APPEND day_number  $ordinal3 ) ( APPEND year  ( CURRENT_YEAR ) ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( <month> :month1 the <ordinal> :ordinal3 <year> :year4 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND month_number  $month1 ) ( APPEND day_number  $ordinal3 ) ( APPEND year  $year4 ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( <ordinal> :ordinal1 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND month_number  ( CURRENT_MONTH ) ) ( APPEND day_number  $ordinal1 ) ( APPEND year  ( CURRENT_YEAR ) ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( a <day-name> :day-name2 ) { ( VALUE [a:date_day] ( NEXT_DATE $day-name2 ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( a weekday ) { ( VALUE [a:date_day] ) ( WRITE context/date_day [a:date_day] ( APPEND OR  ( APPEND day_name  "MONDAY" ) ( APPEND day_name  "TUESDAY" ) ( APPEND day_name  "WEDNESDAY" ) ( APPEND day_name  "THURSDAY" ) ( APPEND day_name  "FRIDAY" ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( any day ) { ( VALUE ) ( CLEAR context/date_day ) }
    | ( next <day-name> :day-name2 ) { ( VALUE [a:date_day] ( NEXT_DATE $day-name2 ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( next day ) { ( READ context/date_day [b:date_day] ) ( VALUE [a:date_day] ( FIND_DATE [b:date_day] 1 ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( one week from today ) { ( VALUE [a:date_day] ( CURRENT_DATE 7 ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( that next <day-name> :day-name3 ) { ( VALUE [a:date_day] ( NEXT_DATE $day-name3 ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( the <ordinal> :ordinal2 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND month_number  ( CURRENT_MONTH ) ) ( APPEND day_number  $ordinal2 ) ( APPEND year  ( CURRENT_YEAR ) ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( the <ordinal> :ordinal2 and the <ordinal> :ordinal5 of <month> :month7 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND month_number  $month7 ) ( APPEND OR  ( APPEND day_number  $ordinal2 ) ( APPEND day_number  $ordinal5 ) ) ( APPEND year  ( CURRENT_YEAR ) ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( the <ordinal> :ordinal2 of <month> :month4 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND month_number  $month4 ) ( APPEND day_number  $ordinal2 ) ( APPEND year  ( CURRENT_YEAR ) ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( the <ordinal> :ordinal2 of <month> :month4 <year> :year5 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND month_number  $month4 ) ( APPEND day_number  $ordinal2 ) ( APPEND year  $year5 ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( the <ordinal> :ordinal2 or the <ordinal> :ordinal5 of <month> :month7 ) { ( VALUE [a:date_day] ( APPEND AND ( APPEND month_number  $month7 ) ( APPEND OR  ( APPEND day_number  $ordinal2 ) ( APPEND day_number  $ordinal5 ) ) ( APPEND year  ( CURRENT_YEAR ) ) ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( the day following next <day-name> :day-name5 ) { ( VALUE [a:date_day] ( NEXT_DATE $day-name5 1 ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( the following <day-name> :day-name3 ) { ( READ context/date_day [b:date_day] ) ( VALUE [a:date_day] ( NEXT_DATE_REL [b:date_day] $day-name3 ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( the following day ) { ( READ context/date_day [b:date_day] ) ( VALUE [a:date_day] ( FIND_DATE [b:date_day] 1 ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( the next <day-name> :day-name3 ) { ( READ context/date_day [b:date_day] ) ( VALUE [a:date_day] ( NEXT_DATE_REL [b:date_day] $day-name3 ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( the next day ) { ( READ context/date_day [b:date_day] ) ( VALUE [a:date_day] ( FIND_DATE [b:date_day] 1 ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( the same day ) { ( READ context/date_day [a:date_day] ) ( VALUE [a:date_day] ) }
    | ( this <day-name> :day-name2 ) { ( VALUE [a:date_day] ( NEXT_DATE $day-name2 ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( today ) { ( VALUE [a:date_day] ( CURRENT_DATE ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( tomorrow ) { ( VALUE [a:date_day] ( CURRENT_DATE 1 ) ) ( WRITE context/date_day [a:date_day] ) }
    | ( tomorrow <month> :month2 <ordinal> :ordinal3 ) { ( VALUE [a:date_day] ( APPEND AND ( CURRENT_DATE 1 ) ( APPEND month_number  $month2 ) ( APPEND day_number  $ordinal3 ) ) ) ( WRITE context/date_day [a:date_day] ) }
  ) .

<day-code>
  ::= ( ( f r ) { ( VALUE "FR" ) }
    | ( m o ) { ( VALUE "MO" ) }
    | ( s a ) { ( VALUE "SA" ) }
    | ( s u ) { ( VALUE "SU" ) }
    | ( t h ) { ( VALUE "TH" ) }
    | ( t u ) { ( VALUE "TU" ) }
    | ( w e ) { ( VALUE "WE" ) }
  ) .

<day-name>
  ::= ( ( friday ) { ( VALUE "FRIDAY" ) }
    | ( fridays ) { ( VALUE "FRIDAY" ) }
    | ( monday ) { ( VALUE "MONDAY" ) }
    | ( mondays ) { ( VALUE "MONDAY" ) }
    | ( saturday ) { ( VALUE "SATURDAY" ) }
    | ( saturdays ) { ( VALUE "SATURDAY" ) }
    | ( sunday ) { ( VALUE "SUNDAY" ) }
    | ( sundays ) { ( VALUE "SUNDAY" ) }
    | ( thursday ) { ( VALUE "THURSDAY" ) }
    | ( thursdays ) { ( VALUE "THURSDAY" ) }
    | ( tuesday ) { ( VALUE "TUESDAY" ) }
    | ( tuesdays ) { ( VALUE "TUESDAY" ) }
    | ( wednesday ) { ( VALUE "WEDNESDAY" ) }
    | ( wednesdays ) { ( VALUE "WEDNESDAY" ) }
  ) .

<day-poss>
  ::= ( ( friday's ) { ( VALUE "FRIDAY" ) }
    | ( monday's ) { ( VALUE "MONDAY" ) }
    | ( saturday's ) { ( VALUE "SATURDAY" ) }
    | ( sunday's ) { ( VALUE "SUNDAY" ) }
    | ( thursday's ) { ( VALUE "THURSDAY" ) }
    | ( tuesday's ) { ( VALUE "TUESDAY" ) }
    | ( wednesday's ) { ( VALUE "WEDNESDAY" ) }
  ) .

<depart>
  ::= ( ( are ) 
    | ( depart ) 
    | ( departs ) 
    | ( leave ) 
    | ( leaves ) 
    | ( must leave ) 
    | ( should be ) 
    | ( should leave ) 
    | ( start ) 
    | ( takeoff ) 
    | ( would leave ) 
  ) .

<departure-arrival-time>
  ::= ( ( <det> flight schedule ) 
    | ( flight schedule ) 
    | ( <det> schedule ) 
    | ( schedule ) 
    | ( <det> flight schedules ) 
    | ( flight schedules ) 
    | ( <det> schedules ) 
    | ( schedules ) 
    | ( <det> flight times ) 
    | ( flight times ) 
  ) .

<departure>
  ::= ( ( <i-want> to leave ) 
    | ( departing ) 
    | ( departure ) 
    | ( flying ) 
    | ( i leave ) 
    | ( i plan to leave ) 
    | ( i'll be leaving ) 
    | ( i'm leaving ) 
    | ( leaving ) 
    | ( starting ) 
    | ( traveling ) 
  ) .

<det>
  ::= ( ( a ) 
    | ( all ) 
    | ( all of the ) 
    | ( all the ) 
    | ( all of your ) 
    | ( all your ) 
    | ( all those ) 
    | ( an ) 
    | ( another ) 
    | ( any ) 
    | ( each ) 
    | ( each and every ) 
    | ( every ) 
    | ( my ) 
    | ( one ) 
    | ( that ) 
    | ( the ) 
    | ( these ) 
    | ( this ) 
    | ( those ) 
    | ( your ) 
  ) .

<digit>
  ::= ( ( <non-zero-digit> :non-zero-digit1 ) { ( VALUE [a:integer] $non-zero-digit1 ) }
    | ( oh ) { ( VALUE [a:integer] 0 ) }
    | ( zero ) { ( VALUE [a:integer] 0 ) }
  ) .

<start_symbol_double-digit>
  ::= ( ( <non-zero-digit> :non-zero-digit1 <digit> :digit2 ) { ( VALUE [a:flight_number] ( DEC_STRING ( VALUE 1 $non-zero-digit1 ) ( VALUE 0 $digit2 ) ) ) }
    | ( <tens> :tens1 ) { ( VALUE [a:integer] $tens1 ) }
    | ( <tens> :tens1 <non-zero-digit> :non-zero-digit2 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 0 $tens1 ) ( VALUE 0 $non-zero-digit2 ) ) ) }
    | ( eighteen ) { ( VALUE [a:integer] 18 ) }
    | ( eleven ) { ( VALUE [a:integer] 11 ) }
    | ( fifteen ) { ( VALUE [a:integer] 15 ) }
    | ( fourteen ) { ( VALUE [a:integer] 14 ) }
    | ( nineteen ) { ( VALUE [a:integer] 19 ) }
    | ( seventeen ) { ( VALUE [a:integer] 17 ) }
    | ( sixteen ) { ( VALUE [a:integer] 16 ) }
    | ( ten ) { ( VALUE [a:integer] 10 ) }
    | ( thirteen ) { ( VALUE [a:integer] 13 ) }
    | ( twelve ) { ( VALUE [a:integer] 12 ) }
  ) .

<earliest>
  ::= ( ( earliest ) 
    | ( first ) 
  ) .

<economy>
  ::= ( ( economy ) { ( VALUE [a:fare] ( APPEND economy  "YES" ) ) ( WRITE context/fare ( [a:fare] ) ) }
    | ( economy class ) { ( VALUE [a:fare] ( APPEND economy  "YES" ) ) ( WRITE context/fare ( [a:fare] ) ) }
  ) .

<expand-aircraft-query>
  ::= ( ( <aircraft-wh> is <det> <aircraft-code> :aircraft-code4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/aircraft.aircraft_code,/aircraft.aircraft_description,/aircraft.manufacturer,/aircraft.basic_type,/aircraft.engines,/aircraft.propulsion,/aircraft.wide_body,/aircraft.wing_span,/aircraft.length,/aircraft.weight,/aircraft.capacity,/aircraft.pay_load,/aircraft.cruising_speed,/aircraft.range_miles,  aircraft.pressurized ) ( APPEND object  aircraft ) ( APPEND specs/aircraft/aircraft_code  $aircraft-code4 ) ) ) }
  ) .

<start_symbol_expand-fare-basis-query>
  ::= ( ( <fare-basis-code-descr> :fare-basis-code-descr1 what does that <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/fare_basis.fare_basis_code,/fare_basis.booking_class,/fare_basis.class_type,/fare_basis.premium,/fare_basis.economy,/fare_basis.discounted,/fare_basis.night,/fare_basis.season,  fare_basis.basis_days ) ( APPEND object  fare_basis ) ( APPEND specs/fare_basis  ( APPEND fare_basis_code  $fare-basis-code-descr1 ) ) ) ) }
    | ( <find> <det> meanings of <fare-basis-code-param> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/fare_basis.fare_basis_code,/fare_basis.booking_class,/fare_basis.class_type,/fare_basis.premium,/fare_basis.economy,/fare_basis.discounted,/fare_basis.night,/fare_basis.season,  fare_basis.basis_days ) ( APPEND object  fare_basis ) ( APPEND specs/fare_basis//1/=  1 ) ) ) }
    | ( <find> the difference between <fare-basis-code-descr> :fare-basis-code-descr5 and <fare-basis-code-descr> :fare-basis-code-descr7 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/fare_basis.fare_basis_code,/fare_basis.booking_class,/fare_basis.class_type,/fare_basis.premium,/fare_basis.economy,/fare_basis.discounted,/fare_basis.night,/fare_basis.season,  fare_basis.basis_days ) ( APPEND object  fare_basis ) ( APPEND specs/fare_basis  [a:fare_basis] ) ) ) ( WRITE fare_basis [a:fare_basis] ( APPEND OR  ( APPEND fare_basis_code  $fare-basis-code-descr5 ) ( APPEND fare_basis_code  $fare-basis-code-descr7 ) ) ) }
    | ( <find> what <fare-basis-code-descr> :fare-basis-code-descr3 <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/fare_basis.fare_basis_code,/fare_basis.booking_class,/fare_basis.class_type,/fare_basis.premium,/fare_basis.economy,/fare_basis.discounted,/fare_basis.night,/fare_basis.season,  fare_basis.basis_days ) ( APPEND object  fare_basis ) ( APPEND specs/fare_basis  ( APPEND fare_basis_code  $fare-basis-code-descr3 ) ) ) ) }
    | ( <find> what <fare-basis-code-param> <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/fare_basis.fare_basis_code,/fare_basis.booking_class,/fare_basis.class_type,/fare_basis.premium,/fare_basis.economy,/fare_basis.discounted,/fare_basis.night,/fare_basis.season,  fare_basis.basis_days ) ( APPEND object  fare_basis ) ( APPEND specs/fare_basis/1/=  1 ) ) ) }
    | ( <find> <fare-basis-code-descr> :fare-basis-code-descr2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/fare_basis.fare_basis_code,/fare_basis.booking_class,/fare_basis.class_type,/fare_basis.premium,/fare_basis.economy,/fare_basis.discounted,/fare_basis.night,/fare_basis.season,  fare_basis.basis_days ) ( APPEND object  fare_basis ) ( APPEND specs/fare_basis  ( APPEND fare_basis_code  $fare-basis-code-descr2 ) ) ) ) }
    | ( <fare-basis-code-descr> :fare-basis-code-descr1 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/fare_basis.fare_basis_code,/fare_basis.booking_class,/fare_basis.class_type,/fare_basis.premium,/fare_basis.economy,/fare_basis.discounted,/fare_basis.night,/fare_basis.season,  fare_basis.basis_days ) ( APPEND object  fare_basis ) ( APPEND specs/fare_basis  ( APPEND fare_basis_code  $fare-basis-code-descr1 ) ) ) ) }
    | ( explain <fare-basis-code-descr> :fare-basis-code-descr2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/fare_basis.fare_basis_code,/fare_basis.booking_class,/fare_basis.class_type,/fare_basis.premium,/fare_basis.economy,/fare_basis.discounted,/fare_basis.night,/fare_basis.season,  fare_basis.basis_days ) ( APPEND object  fare_basis ) ( APPEND specs/fare_basis  ( APPEND fare_basis_code  $fare-basis-code-descr2 ) ) ) ) }
    | ( explain <fare-basis-code-descr> :fare-basis-code-descr2 and <fare-basis-code-descr> :fare-basis-code-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/fare_basis.fare_basis_code,/fare_basis.booking_class,/fare_basis.class_type,/fare_basis.premium,/fare_basis.economy,/fare_basis.discounted,/fare_basis.night,/fare_basis.season,  fare_basis.basis_days ) ( APPEND object  fare_basis ) ( APPEND specs/fare_basis  [a:fare_basis] ) ) ) ( WRITE fare_basis [a:fare_basis] ( APPEND OR  ( APPEND fare_basis_code  $fare-basis-code-descr2 ) ( APPEND fare_basis_code  $fare-basis-code-descr4 ) ) ) }
    | ( explain <fare-basis-code-param> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/fare_basis.fare_basis_code,/fare_basis.booking_class,/fare_basis.class_type,/fare_basis.premium,/fare_basis.economy,/fare_basis.discounted,/fare_basis.night,/fare_basis.season,  fare_basis.basis_days ) ( APPEND object  fare_basis ) ( APPEND specs/fare_basis/1/=  1 ) ) ) }
    | ( i would like for you to <show-trans> the meaning of <fare-basis-code-descr> :fare-basis-code-descr11 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/fare_basis.fare_basis_code,/fare_basis.booking_class,/fare_basis.class_type,/fare_basis.premium,/fare_basis.economy,/fare_basis.discounted,/fare_basis.night,/fare_basis.season,  fare_basis.basis_days ) ( APPEND object  fare_basis ) ( APPEND specs/fare_basis  ( APPEND fare_basis_code  $fare-basis-code-descr11 ) ) ) ) }
    | ( what do <fare-basis-code-descr> :fare-basis-code-descr3 <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/fare_basis.fare_basis_code,/fare_basis.booking_class,/fare_basis.class_type,/fare_basis.premium,/fare_basis.economy,/fare_basis.discounted,/fare_basis.night,/fare_basis.season,  fare_basis.basis_days ) ( APPEND object  fare_basis ) ( APPEND specs/fare_basis  ( APPEND fare_basis_code  $fare-basis-code-descr3 ) ) ) ) }
    | ( what do <fare-basis-code-param> <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/fare_basis.fare_basis_code,/fare_basis.booking_class,/fare_basis.class_type,/fare_basis.premium,/fare_basis.economy,/fare_basis.discounted,/fare_basis.night,/fare_basis.season,  fare_basis.basis_days ) ( APPEND object  fare_basis ) ( APPEND specs/fare_basis/1/=  1 ) ) ) }
    | ( what does <fare-basis-code-descr> :fare-basis-code-descr3 <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/fare_basis.fare_basis_code,/fare_basis.booking_class,/fare_basis.class_type,/fare_basis.premium,/fare_basis.economy,/fare_basis.discounted,/fare_basis.night,/fare_basis.season,  fare_basis.basis_days ) ( APPEND object  fare_basis ) ( APPEND specs/fare_basis  ( APPEND fare_basis_code  $fare-basis-code-descr3 ) ) ) ) }
    | ( what is <fare-basis-code-descr> :fare-basis-code-descr3 <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/fare_basis.fare_basis_code,/fare_basis.booking_class,/fare_basis.class_type,/fare_basis.premium,/fare_basis.economy,/fare_basis.discounted,/fare_basis.night,/fare_basis.season,  fare_basis.basis_days ) ( APPEND object  fare_basis ) ( APPEND specs/fare_basis  ( APPEND fare_basis_code  $fare-basis-code-descr3 ) ) ) ) }
    | ( what is <fare-basis-code-descr> :fare-basis-code-descr3 and what is <fare-basis-code-descr> :fare-basis-code-descr7 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/fare_basis.fare_basis_code,/fare_basis.booking_class,/fare_basis.class_type,/fare_basis.premium,/fare_basis.economy,/fare_basis.discounted,/fare_basis.night,/fare_basis.season,  fare_basis.basis_days ) ( APPEND object  fare_basis ) ( APPEND specs/fare_basis  [a:fare_basis] ) ) ) ( WRITE fare_basis [a:fare_basis] ( APPEND OR  ( APPEND fare_basis_code  $fare-basis-code-descr3 ) ( APPEND fare_basis_code  $fare-basis-code-descr7 ) ) ) }
  ) .

<expand-flight-query>
  ::= ( ( <can> you <show-ditrans> me more about <flight-descr> :flight-descr7 and <flight-descr> :flight-descr9 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,/flight.flight_days,/flight.from_airport,/flight.to_airport,/flight.departure_time,/flight.arrival_time,/flight.airline_flight,/flight.airline_code,/flight.flight_number,/flight.aircraft_code_sequence,/flight.meal_code,/flight.stops,/flight.connections,/flight.dual_carrier,  flight.time_elapsed ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND OR  $flight-descr7 $flight-descr9 ) ) }
    | ( <find> all details <with-flight> :with-flight4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,/flight.flight_days,/flight.from_airport,/flight.to_airport,/flight.departure_time,/flight.arrival_time,/flight.airline_flight,/flight.airline_code,/flight.flight_number,/flight.aircraft_code_sequence,/flight.meal_code,/flight.stops,/flight.connections,/flight.dual_carrier,  flight.time_elapsed ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $with-flight4 ) ) }
    | ( <find> information <with-flight> :with-flight3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,/flight.flight_days,/flight.from_airport,/flight.to_airport,/flight.departure_time,/flight.arrival_time,/flight.airline_flight,/flight.airline_code,/flight.flight_number,/flight.aircraft_code_sequence,/flight.meal_code,/flight.stops,/flight.connections,/flight.dual_carrier,  flight.time_elapsed ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $with-flight3 ) ) }
    | ( <find> information about <flight-descr> :flight-descr4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,/flight.flight_days,/flight.from_airport,/flight.to_airport,/flight.departure_time,/flight.arrival_time,/flight.airline_flight,/flight.airline_code,/flight.flight_number,/flight.aircraft_code_sequence,/flight.meal_code,/flight.stops,/flight.connections,/flight.dual_carrier,  flight.time_elapsed ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-descr4 ) ) }
    | ( <find> the flight information ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,/flight.flight_days,/flight.from_airport,/flight.to_airport,/flight.departure_time,/flight.arrival_time,/flight.airline_flight,/flight.airline_code,/flight.flight_number,/flight.aircraft_code_sequence,/flight.meal_code,/flight.stops,/flight.connections,/flight.dual_carrier,  flight.time_elapsed ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) }
  ) .

<expand-ground-service-query>
  ::= ( ( <find> <ground-service-descr> :ground-service-descr2 details ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,/ground_service.transport_type,  ground_service.ground_fare ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] $ground-service-descr2 ) }
    | ( <ground-service-descr> :ground-service-descr1 details ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,/ground_service.transport_type,  ground_service.ground_fare ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] $ground-service-descr1 ) }
  ) .

<expand-restriction-query>
  ::= ( ( <restriction-code-descr> :restriction-code-descr1 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/restriction.restriction_code,/restriction.advance_purchase,/restriction.stopovers,/restriction.saturday_stay_required,/restriction.minimum_stay,/restriction.maximum_stay,/restriction.application,  restriction.no_discounts ) ( APPEND object  restriction ) ( APPEND specs/restriction  ( APPEND restriction_code  $restriction-code-descr1 ) ) ) ) }
    | ( <find> <restriction-code-descr> :restriction-code-descr2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/restriction.restriction_code,/restriction.advance_purchase,/restriction.stopovers,/restriction.saturday_stay_required,/restriction.minimum_stay,/restriction.maximum_stay,/restriction.application,  restriction.no_discounts ) ( APPEND object  restriction ) ( APPEND specs/restriction  ( APPEND restriction_code  $restriction-code-descr2 ) ) ) ) }
    | ( <restriction-code-descr> :restriction-code-descr1 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/restriction.restriction_code,/restriction.advance_purchase,/restriction.stopovers,/restriction.saturday_stay_required,/restriction.minimum_stay,/restriction.maximum_stay,/restriction.application,  restriction.no_discounts ) ( APPEND object  restriction ) ( APPEND specs/restriction  ( APPEND restriction_code  $restriction-code-descr1 ) ) ) ) }
    | ( explain <restriction-code-descr> :restriction-code-descr2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/restriction.restriction_code,/restriction.advance_purchase,/restriction.stopovers,/restriction.saturday_stay_required,/restriction.minimum_stay,/restriction.maximum_stay,/restriction.application,  restriction.no_discounts ) ( APPEND object  restriction ) ( APPEND specs/restriction  ( APPEND restriction_code  $restriction-code-descr2 ) ) ) ) }
    | ( what do <restriction-code-descr> :restriction-code-descr3 <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/restriction.restriction_code,/restriction.advance_purchase,/restriction.stopovers,/restriction.saturday_stay_required,/restriction.minimum_stay,/restriction.maximum_stay,/restriction.application,  restriction.no_discounts ) ( APPEND object  restriction ) ( APPEND specs/restriction  ( APPEND restriction_code  $restriction-code-descr3 ) ) ) ) }
    | ( what does <restriction-code-descr> :restriction-code-descr3 <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/restriction.restriction_code,/restriction.advance_purchase,/restriction.stopovers,/restriction.saturday_stay_required,/restriction.minimum_stay,/restriction.maximum_stay,/restriction.application,  restriction.no_discounts ) ( APPEND object  restriction ) ( APPEND specs/restriction  ( APPEND restriction_code  $restriction-code-descr3 ) ) ) ) }
  ) .

<fare-adj-airline>
  ::= ( ( <airline-code> :airline-code1 ) { ( VALUE [a:fare] ( APPEND flight/airline  ( [b:airline] ) ) ) ( WRITE context/airline [b:airline] ( APPEND airline_code  $airline-code1 ) ) }
    | ( <airline-name-poss> :airline-name-poss1 ) { ( VALUE [a:fare] ( APPEND flight/airline  ( [b:airline] ) ) ) ( WRITE context/airline [b:airline] ( APPEND airline_code  $airline-name-poss1 ) ) }
    | ( <airline-name> :airline-name1 ) { ( VALUE [a:fare] ( APPEND flight/airline  ( [b:airline] ) ) ) ( WRITE context/airline [b:airline] ( APPEND airline_code  $airline-name1 ) ) }
  ) .

<fare-adj-list>
  ::= ( ( <fare-adj> :fare-adj1 ) { ( VALUE [a:fare] $fare-adj1 ) }
    | ( <fare-adj> :fare-adj1 <fare-adj> :fare-adj2 ) { ( VALUE [a:fare] ( APPEND AND $fare-adj1 $fare-adj2 ) ) }
    | ( <fare-adj> :fare-adj1 <fare-adj> :fare-adj2 <fare-adj> :fare-adj3 ) { ( VALUE [a:fare] ( APPEND AND $fare-adj1 $fare-adj2 $fare-adj3 ) ) }
  ) .

<fare-adj>
  ::= ( ( <cheapest> ) { ( VALUE [a:fare] ( APPEND super/min/one_direction_cost/fare  flight ) ) }
    | ( <class-type> :class-type1 ) { ( VALUE [a:fare] ( APPEND class_type  $class-type1 ) ) }
    | ( <economy> :economy1 ) { ( VALUE [a:fare] $economy1 ) }
    | ( <fare-adj-airline> :fare-adj-airline1 ) { ( VALUE [a:fare] $fare-adj-airline1 ) }
    | ( <highest> ) { ( VALUE [a:fare] ( APPEND super/max/one_direction_cost/fare  flight ) ) }
    | ( available ) 
    | ( one way ) { ( VALUE [a:fare] ( APPEND round_trip_required  "NO" ) ) }
    | ( round trip ) { ( VALUE [a:fare] ( APPEND round_trip_cost/IS/NOT  NULL ) ) }
  ) .

<fare-basis-code-descr>
  ::= ( ( <code> <fare-basis-code> :fare-basis-code2 ) { ( VALUE [a:string] $fare-basis-code2 ) ( WRITE context/fare ( APPEND fare_basis_code  ( [a:string] ) ) ) }
    | ( <fare-basis-code> :fare-basis-code1 ) { ( VALUE [a:string] $fare-basis-code1 ) ( WRITE context/fare ( APPEND fare_basis_code  ( [a:string] ) ) ) }
    | ( <det> fare <code> <fare-basis-code> :fare-basis-code4 ) { ( VALUE [a:string] $fare-basis-code4 ) ( WRITE context/fare ( APPEND fare_basis_code  ( [a:string] ) ) ) }
    | ( fare <code> <fare-basis-code> :fare-basis-code3 ) { ( VALUE [a:string] $fare-basis-code3 ) ( WRITE context/fare ( APPEND fare_basis_code  ( [a:string] ) ) ) }
    | ( class <fare-basis-code> :fare-basis-code2 ) { ( VALUE [a:string] $fare-basis-code2 ) ( WRITE context/fare ( APPEND fare_basis_code  ( [a:string] ) ) ) }
    | ( class <fare-basis-code> :fare-basis-code2 fare ) { ( VALUE [a:string] $fare-basis-code2 ) ( WRITE context/fare ( APPEND fare_basis_code  ( [a:string] ) ) ) }
    | ( fare class <fare-basis-code> :fare-basis-code3 ) { ( VALUE [a:string] $fare-basis-code3 ) ( WRITE context/fare ( APPEND fare_basis_code  ( [a:string] ) ) ) }
  ) .

<fare-basis-code-param>
  ::= ( ( <det> fare <code> ) 
    | ( fare <code> ) 
    | ( fare codes symbols ) 
  ) .

<fare-basis-code>
  ::= ( ( b ) { ( VALUE "B" ) }
    | ( b h ) { ( VALUE "BH" ) }
    | ( b h w ) { ( VALUE "BHW" ) }
    | ( b h x ) { ( VALUE "BHX" ) }
    | ( b l ) { ( VALUE "BL" ) }
    | ( b l w ) { ( VALUE "BLW" ) }
    | ( b l x ) { ( VALUE "BLX" ) }
    | ( b n ) { ( VALUE "BN" ) }
    | ( b o w ) { ( VALUE "BOW" ) }
    | ( b o x ) { ( VALUE "BOX" ) }
    | ( b w ) { ( VALUE "BW" ) }
    | ( b x ) { ( VALUE "BX" ) }
    | ( c ) { ( VALUE "C" ) }
    | ( c n ) { ( VALUE "CN" ) }
    | ( f ) { ( VALUE "F" ) }
    | ( h ) { ( VALUE "H" ) }
    | ( h h ) { ( VALUE "HH" ) }
    | ( h h w ) { ( VALUE "HHW" ) }
    | ( h h x ) { ( VALUE "HHX" ) }
    | ( h l ) { ( VALUE "HL" ) }
    | ( h l w ) { ( VALUE "HLW" ) }
    | ( h l x ) { ( VALUE "HLX" ) }
    | ( h o w ) { ( VALUE "HOW" ) }
    | ( h o x ) { ( VALUE "HOX" ) }
    | ( j ) { ( VALUE "J" ) }
    | ( k ) { ( VALUE "K" ) }
    | ( k h ) { ( VALUE "KH" ) }
    | ( k l ) { ( VALUE "KL" ) }
    | ( k n ) { ( VALUE "KN" ) }
    | ( l x ) { ( VALUE "LX" ) }
    | ( m ) { ( VALUE "M" ) }
    | ( m h ) { ( VALUE "MH" ) }
    | ( m l ) { ( VALUE "ML" ) }
    | ( m o w ) { ( VALUE "MOW" ) }
    | ( p ) { ( VALUE "P" ) }
    | ( q ) { ( VALUE "Q" ) }
    | ( q h ) { ( VALUE "QH" ) }
    | ( q h w ) { ( VALUE "QHW" ) }
    | ( q h x ) { ( VALUE "QHX" ) }
    | ( q l w ) { ( VALUE "QLW" ) }
    | ( q l x ) { ( VALUE "QLX" ) }
    | ( q o ) { ( VALUE "QO" ) }
    | ( q o w ) { ( VALUE "QOW" ) }
    | ( q o x ) { ( VALUE "QOX" ) }
    | ( q oh ) { ( VALUE "QO" ) }
    | ( q w ) { ( VALUE "QW" ) }
    | ( q x ) { ( VALUE "QX" ) }
    | ( s ) { ( VALUE "S" ) }
    | ( u ) { ( VALUE "U" ) }
    | ( v ) { ( VALUE "V" ) }
    | ( v h w ) { ( VALUE "VHW" ) }
    | ( v h x ) { ( VALUE "VHX" ) }
    | ( v w ) { ( VALUE "VW" ) }
    | ( v x ) { ( VALUE "VX" ) }
    | ( y ) { ( VALUE "Y" ) }
    | ( y h ) { ( VALUE "YH" ) }
    | ( y l ) { ( VALUE "YL" ) }
    | ( y n ) { ( VALUE "YN" ) }
    | ( y w ) { ( VALUE "YW" ) }
    | ( y x ) { ( VALUE "YX" ) }
  ) .

<fare-descr>
  ::= ( ( <cheapest> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:fare] ( APPEND AND ( APPEND super/min/one_direction_cost/fare  flight ) ( APPEND flight  ( [a:flight] ) ) ) ) ( WRITE context/fare ( [b:fare] ) ) ( WRITE context/flight ( UPDATE ( [a:flight] ) ( APPEND fare  ( [b:fare] ) ) ) ) }
    | ( <det> <cheapest> of <det> <fare> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:fare] ( APPEND AND ( APPEND super/min/one_direction_cost/fare  flight ) ( APPEND flight  ( [a:flight] ) ) ) ) ( WRITE context/fare ( [b:fare] ) ) ( WRITE context/flight ( UPDATE ( [a:flight] ) ( APPEND fare  ( [b:fare] ) ) ) ) }
    | ( <det> <fare-adj> :fare-adj2 and <fare-adj> :fare-adj4 <fare> <fare-mod-list> :fare-mod-list6 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:fare] ( UPDATE ( APPEND flight  ( [a:flight] ) ) ( APPEND AND ( APPEND OR  $fare-adj2 $fare-adj4 ) $fare-mod-list6 ) ) ) ( WRITE context/fare ( [b:fare] ) ) ( WRITE context/flight ( UPDATE ( [a:flight] ) ( APPEND fare  ( [b:fare] ) ) ) ) }
    | ( <det> <highest> of <det> <fare> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:fare] ( APPEND AND ( APPEND super/max/one_direction_cost/fare  flight ) ( APPEND flight  ( [a:flight] ) ) ) ) ( WRITE context/fare ( [b:fare] ) ) ( WRITE context/flight ( UPDATE ( [a:flight] ) ( APPEND fare  ( [b:fare] ) ) ) ) }
    | ( <fare-param> ) { ( READ context/flight ( [a:flight] ) ) ( READ context/fare ( [c:fare] ) ) ( READ context/date_day [d:date_day] ) ( VALUE [b:fare] ( UPDATE ( UPDATE ( [c:fare] ) ( APPEND fare_days  [d:date_day] ) ) ( APPEND flight  ( [a:flight] ) ) ) ) ( WRITE context/fare ( [b:fare] ) ) }
    | ( <highest> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:fare] ( APPEND AND ( APPEND super/max/one_direction_cost/fare  flight ) ( APPEND flight  ( [a:flight] ) ) ) ) ( WRITE context/fare ( [b:fare] ) ) ( WRITE context/flight ( UPDATE ( [a:flight] ) ( APPEND fare  ( [b:fare] ) ) ) ) }
    | ( <det> <fare-adj-list> :fare-adj-list2 <fare> ) { ( READ context/flight ( [a:flight] ) ) ( READ context/fare ( [b:fare] ) ) ( VALUE [c:fare] ( UPDATE ( [b:fare] ) ( UPDATE ( APPEND flight  ( [a:flight] ) ) $fare-adj-list2 ) ) ) ( WRITE context/fare ( [c:fare] ) ) }
    | ( <fare-adj-list> :fare-adj-list1 <fare> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:fare] ( UPDATE ( APPEND flight  ( UPDATE ( [a:flight] ) ( APPEND fare  ( VALUE ) ) ) ) $fare-adj-list1 ) ) ( WRITE context/fare ( [b:fare] ) ) ( WRITE context/flight ( UPDATE ( [a:flight] ) ( APPEND fare  ( [b:fare] ) ) ) ) }
    | ( <det> <fare-adj-list> :fare-adj-list2 <fare> <fare-mod-list> :fare-mod-list4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:fare] ( UPDATE ( APPEND flight  ( [a:flight] ) ) ( APPEND AND $fare-adj-list2 $fare-mod-list4 ) ) ) ( WRITE context/fare ( [b:fare] ) ) }
    | ( <fare-adj-list> :fare-adj-list1 <fare> <fare-mod-list> :fare-mod-list3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:fare] ( UPDATE ( APPEND flight  ( [a:flight] ) ) ( APPEND AND $fare-adj-list1 $fare-mod-list3 ) ) ) ( WRITE context/fare ( [b:fare] ) ) }
    | ( <det> <fare> <fare-mod-list> :fare-mod-list3 ) { ( READ context/flight ( [a:flight] ) ) ( READ context/date_day [c:date_day] ) ( VALUE [b:fare] ( UPDATE ( APPEND AND ( APPEND flight  ( [a:flight] ) ) ( APPEND fare_days  [c:date_day] ) ) $fare-mod-list3 ) ) ( WRITE context/fare ( [b:fare] ) ) }
    | ( <fare> <fare-mod-list> :fare-mod-list2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:fare] ( UPDATE ( APPEND flight  ( UPDATE ( [a:flight] ) ( APPEND fare  ( VALUE ) ) ) ) $fare-mod-list2 ) ) ( WRITE context/fare ( [b:fare] ) ) }
  ) .

<fare-mod-class>
  ::= ( ( for a <class-type> :class-type3 ticket ) { ( VALUE [a:fare] ( APPEND class_type  $class-type3 ) ) }
    | ( of <class-type> :class-type2 tickets ) { ( VALUE [a:fare] ( APPEND class_type  $class-type2 ) ) }
    | ( of a <class-type> :class-type3 ticket ) { ( VALUE [a:fare] ( APPEND class_type  $class-type3 ) ) }
  ) .

<fare-mod-cost-upper-bound>
  ::= ( ( <cost-upper-bound> :cost-upper-bound1 ) { ( VALUE [a:fare] ( APPEND one_direction_cost  $cost-upper-bound1 ) ) }
    | ( <pron-rel> are <cost-upper-bound> :cost-upper-bound3 ) { ( VALUE [a:fare] ( APPEND one_direction_cost  $cost-upper-bound3 ) ) }
    | ( <pron-rel> are priced <cost-upper-bound> :cost-upper-bound4 ) { ( VALUE [a:fare] ( APPEND one_direction_cost  $cost-upper-bound4 ) ) }
    | ( <pron-rel> are priced at <cost-upper-bound> :cost-upper-bound5 ) { ( VALUE [a:fare] ( APPEND one_direction_cost  $cost-upper-bound5 ) ) }
    | ( <pron-rel> cost <cost-upper-bound> :cost-upper-bound3 ) { ( VALUE [a:fare] ( APPEND one_direction_cost  $cost-upper-bound3 ) ) }
    | ( costing <cost-upper-bound> :cost-upper-bound2 ) { ( VALUE [a:fare] ( APPEND one_direction_cost  $cost-upper-bound2 ) ) }
    | ( costing <cost> :cost2 ) { ( VALUE [a:fare] ( APPEND one_direction_cost/range/upper/<=  $cost2 ) ) }
    | ( for <cost> :cost2 ) { ( VALUE [a:fare] ( APPEND one_direction_cost/range/upper/<=  $cost2 ) ) }
    | ( of <cost-upper-bound> :cost-upper-bound2 ) { ( VALUE [a:fare] ( APPEND one_direction_cost  $cost-upper-bound2 ) ) }
    | ( whose <fare> is <cost-upper-bound> :cost-upper-bound4 ) { ( VALUE [a:fare] ( APPEND one_direction_cost  $cost-upper-bound4 ) ) }
    | ( with <fare-param> of <cost> :cost4 ) { ( VALUE [a:fare] ( APPEND one_direction_cost/range/=  $cost4 ) ) }
    | ( with <fare> <cost-upper-bound> :cost-upper-bound3 ) { ( VALUE [a:fare] ( APPEND one_direction_cost  $cost-upper-bound3 ) ) }
    | ( with a <fare> of <cost-upper-bound> :cost-upper-bound5 ) { ( VALUE [a:fare] ( APPEND one_direction_cost  $cost-upper-bound5 ) ) }
  ) .

<fare-mod-flight>
  ::= ( ( <flight-fare-mod-list> :flight-fare-mod-list1 ) { ( VALUE [a:fare] ( APPEND flight  $flight-fare-mod-list1 ) ) ( WRITE context/flight $flight-fare-mod-list1 ) }
    | ( <with-flight> :with-flight1 ) { ( VALUE [a:fare] ( APPEND flight  ( [b:flight] ) ) ) ( WRITE context/flight [b:flight] ( UPDATE $with-flight1 ( APPEND fare/flight  ( VALUE ) ) ) ) }
  ) .

<fare-mod-intro>
  ::= ( ( <flight-mod-airline> :flight-mod-airline1 ) { ( VALUE [a:fare] ( APPEND flight  $flight-mod-airline1 ) ) ( WRITE context/flight $flight-mod-airline1 ) }
  ) .

<fare-mod-list>
  ::= ( ( <fare-mod-flight> :fare-mod-flight1 ) { ( VALUE [a:fare] $fare-mod-flight1 ) }
    | ( <fare-mod-flight> :fare-mod-flight1 <fare-mod> :fare-mod2 ) { ( VALUE [a:fare] ( APPEND AND $fare-mod-flight1 $fare-mod2 ) ) }
    | ( <fare-mod> :fare-mod1 ) { ( VALUE [a:fare] $fare-mod1 ) }
    | ( <fare-mod> :fare-mod1 <fare-mod-flight> :fare-mod-flight2 ) { ( VALUE [a:fare] ( APPEND AND $fare-mod1 $fare-mod-flight2 ) ) }
    | ( <fare-mod> :fare-mod1 <fare-mod-flight> :fare-mod-flight2 <fare-mod> :fare-mod3 ) { ( VALUE [a:fare] ( APPEND AND $fare-mod1 $fare-mod-flight2 $fare-mod3 ) ) }
    | ( <fare-mod> :fare-mod1 <fare-mod> :fare-mod2 ) { ( VALUE [a:fare] ( APPEND AND $fare-mod1 $fare-mod2 ) ) }
  ) .

<fare-mod-restriction>
  ::= ( ( with no restrictions ) { ( VALUE [a:fare] ( APPEND restriction_code/IS  NULL ) ) }
    | ( without <restriction-code-descr> ) { ( VALUE [a:fare] ( APPEND restriction_code/IS  NULL ) ) }
    | ( without <restriction-param> ) { ( VALUE [a:fare] ( APPEND restriction_code/IS  NULL ) ) }
  ) .

<fare-mod-return-type>
  ::= ( ( <pron-rel> are <return-type> :return-type3 <flight> ) { ( VALUE [a:fare] $return-type3 ) }
    | ( <return-type> :return-type1 ) { ( VALUE [a:fare] $return-type1 ) }
    | ( flying <return-type> :return-type2 ) { ( VALUE [a:fare] $return-type2 ) }
    | ( for <return-type> :return-type2 ) { ( VALUE [a:fare] $return-type2 ) }
    | ( for a <return-type> :return-type3 ) { ( VALUE [a:fare] $return-type3 ) }
    | ( where a round trip is not required ) { ( VALUE [a:fare] ( APPEND round_trip_required  "NO" ) ) }
    | ( where round trip is not required ) { ( VALUE [a:fare] ( APPEND round_trip_required  "NO" ) ) }
  ) .

<fare-mod>
  ::= ( ( <fare-mod-class> :fare-mod-class1 ) { ( VALUE [a:fare] $fare-mod-class1 ) }
    | ( <fare-mod-cost-upper-bound> :fare-mod-cost-upper-bound1 ) { ( VALUE [a:fare] $fare-mod-cost-upper-bound1 ) }
    | ( <fare-mod-restriction> :fare-mod-restriction1 ) { ( VALUE [a:fare] $fare-mod-restriction1 ) ( WRITE context/flight $fare-mod-restriction1 ) }
    | ( <fare-mod-return-type> :fare-mod-return-type1 ) { ( VALUE [a:fare] $fare-mod-return-type1 ) }
    | ( for <cardinal> ) 
    | ( offered ) 
  ) .

<start_symbol_fare-param>
  ::= ( ( <det> <fare> ) 
    | ( <fare> ) 
    | ( their <fare> ) 
  ) .

<fare>
  ::= ( ( air fares ) 
    | ( airfare ) 
    | ( airfares ) 
    | ( cost ) 
    | ( costs ) 
    | ( fare ) 
    | ( fare information ) 
    | ( fares ) 
    | ( flight charges ) 
    | ( flight price ) 
    | ( price ) 
    | ( prices ) 
    | ( rate ) 
    | ( rate information ) 
    | ( rates ) 
    | ( ticket fare ) 
    | ( ticket price ) 
  ) .

<find-aircraft-aircraft-description-query>
  ::= ( ( what does <aircraft-code-descr> :aircraft-code-descr3 <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_description ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [a:aircraft] ) ) ) ) ( WRITE context/aircraft [a:aircraft] ( APPEND aircraft_code  $aircraft-code-descr3 ) ) }
    | ( what is <aircraft-code-descr> :aircraft-code-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_description ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [a:aircraft] ) ) ) ) ( WRITE context/aircraft [a:aircraft] ( APPEND aircraft_code  $aircraft-code-descr3 ) ) }
  ) .

<start_symbol_find-aircraft-capacity-query>
  ::= ( ( <aircraft-descr> :aircraft-descr1 <aircraft-capacity-param> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.capacity ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  [a:aircraft] $aircraft-descr1 ) ) ) }
    | ( <find> <aircraft-capacity-param> ) { ( READ context/aircraft ( [a:aircraft] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.capacity ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [a:aircraft] ) ) ) ) }
    | ( <find> <aircraft-capacity-param> <with-aircraft> :with-aircraft3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.capacity ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  [a:aircraft] $with-aircraft3 ) ) ) }
    | ( <find> <aircraft-capacity-param> <with-flight> :with-flight3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.capacity ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  [a:aircraft] ( APPEND flight  $with-flight3 ) ) ) ) }
    | ( what size <aircraft> do <flight-descr> :flight-descr5 use ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.capacity ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  [a:aircraft] ( APPEND flight  $flight-descr5 ) ) ) ) }
  ) .

<find-aircraft-query>
  ::= ( ( <aircraft-wh> :aircraft-wh1 are these ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [b:aircraft] ) ) ) ) ( WRITE context/aircraft [b:aircraft] ( APPEND AND $aircraft-wh1 ( APPEND flight  ( [a:flight] ) ) ) ) ( WRITE context/flight ( UPDATE ( [a:flight] ) ( APPEND aircraft  $aircraft-wh1 ) ) ) }
    | ( <aircraft-wh> :aircraft-wh1 are used <with-flight> :with-flight4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [a:aircraft] ) ) ) ) ( WRITE context/aircraft [a:aircraft] ( APPEND AND $aircraft-wh1 ( APPEND flight  $with-flight4 ) ) ) ( WRITE context/flight ( APPEND AND $with-flight4 ( APPEND aircraft  $aircraft-wh1 ) ) ) }
    | ( <aircraft-wh> :aircraft-wh1 do they use ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [b:aircraft] ) ) ) ) ( WRITE context/aircraft [b:aircraft] ( APPEND AND $aircraft-wh1 ( APPEND flight  ( [a:flight] ) ) ) ) ( WRITE context/flight ( UPDATE ( [a:flight] ) ( APPEND aircraft  $aircraft-wh1 ) ) ) }
    | ( <aircraft-wh> :aircraft-wh1 does <airline-descr> :airline-descr3 use <with-flight> :with-flight5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [a:aircraft] ) ) ) ) ( WRITE context/aircraft [a:aircraft] ( APPEND AND $aircraft-wh1 ( APPEND flight  ( APPEND AND ( APPEND airline  $airline-descr3 ) $with-flight5 ) ) ) ) ( WRITE context/airline $airline-descr3 ) ( WRITE context/flight ( APPEND AND $with-flight5 ( APPEND aircraft  $aircraft-wh1 ) ( APPEND airline  $airline-descr3 ) ) ) }
    | ( <aircraft-wh> :aircraft-wh1 does <flight-descr> :flight-descr3 have ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [a:aircraft] ) ) ) ) ( WRITE context/aircraft [a:aircraft] ( APPEND AND $aircraft-wh1 ( APPEND flight  $flight-descr3 ) ) ) ( WRITE context/flight ( APPEND AND $flight-descr3 ( APPEND aircraft  $aircraft-wh1 ) ) ) }
    | ( <aircraft-wh> :aircraft-wh1 does <flight-descr> :flight-descr3 use ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [a:aircraft] ) ) ) ) ( WRITE context/aircraft [a:aircraft] ( APPEND AND $aircraft-wh1 ( APPEND flight  $flight-descr3 ) ) ) ( WRITE context/flight ( APPEND AND $flight-descr3 ( APPEND aircraft  $aircraft-wh1 ) ) ) }
    | ( <aircraft-wh> :aircraft-wh1 is <flight-descr> :flight-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [a:aircraft] ) ) ) ) ( WRITE context/aircraft [a:aircraft] ( APPEND AND $aircraft-wh1 ( APPEND flight  $flight-descr3 ) ) ) ( WRITE context/flight ( APPEND AND $flight-descr3 ( APPEND aircraft  $aircraft-wh1 ) ) ) }
    | ( <aircraft-wh> :aircraft-wh1 is being used <with-flight> :with-flight5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [a:aircraft] ) ) ) ) ( WRITE context/aircraft [a:aircraft] ( APPEND AND $aircraft-wh1 ( APPEND flight  $with-flight5 ) ) ) ( WRITE context/flight ( APPEND AND $with-flight5 ( APPEND aircraft  $aircraft-wh1 ) ) ) }
    | ( <aircraft-wh> :aircraft-wh1 is flown <with-flight> :with-flight4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [a:aircraft] ) ) ) ) ( WRITE context/aircraft [a:aircraft] ( APPEND AND $aircraft-wh1 ( APPEND flight  $with-flight4 ) ) ) ( WRITE context/flight ( APPEND AND $with-flight4 ( APPEND aircraft  $aircraft-wh1 ) ) ) }
    | ( <aircraft-wh> :aircraft-wh1 is flying <flight-descr> :flight-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [a:aircraft] ) ) ) ) ( WRITE context/aircraft [a:aircraft] ( APPEND AND $aircraft-wh1 ( APPEND flight  $flight-descr4 ) ) ) ( WRITE context/flight ( APPEND AND $flight-descr4 ( APPEND aircraft  $aircraft-wh1 ) ) ) }
    | ( <aircraft-wh> :aircraft-wh1 is it ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [b:aircraft] ) ) ) ) ( WRITE context/aircraft [b:aircraft] ( APPEND AND $aircraft-wh1 ( APPEND flight  ( [a:flight] ) ) ) ) ( WRITE context/flight ( UPDATE ( [a:flight] ) ( APPEND aircraft  $aircraft-wh1 ) ) ) }
    | ( <aircraft-wh> :aircraft-wh1 is that ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [b:aircraft] ) ) ) ) ( WRITE context/aircraft [b:aircraft] ( APPEND AND $aircraft-wh1 ( APPEND flight  ( [a:flight] ) ) ) ) ( WRITE context/flight ( UPDATE ( [a:flight] ) ( APPEND aircraft  $aircraft-wh1 ) ) ) }
    | ( <aircraft-wh> :aircraft-wh1 is this ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [b:aircraft] ) ) ) ) ( WRITE context/aircraft [b:aircraft] ( APPEND AND $aircraft-wh1 ( APPEND flight  ( [a:flight] ) ) ) ) ( WRITE context/flight ( UPDATE ( [a:flight] ) ( APPEND aircraft  $aircraft-wh1 ) ) ) }
    | ( <aircraft-wh> :aircraft-wh1 is used ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [b:aircraft] ) ) ) ) ( WRITE context/aircraft [b:aircraft] ( APPEND AND $aircraft-wh1 ( APPEND flight  ( [a:flight] ) ) ) ) ( WRITE context/flight ( UPDATE ( [a:flight] ) ( APPEND aircraft  $aircraft-wh1 ) ) ) }
    | ( <aircraft-wh> :aircraft-wh1 is used <flight-mod-phrase> :flight-mod-phrase4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [a:aircraft] ) ) ) ) ( WRITE context/aircraft [a:aircraft] ( APPEND AND $aircraft-wh1 ( APPEND flight  $flight-mod-phrase4 ) ) ) ( WRITE context/flight ( APPEND AND $flight-mod-phrase4 ( APPEND aircraft  $aircraft-wh1 ) ) ) }
    | ( <aircraft-wh> :aircraft-wh1 is used <with-flight> :with-flight4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [a:aircraft] ) ) ) ) ( WRITE context/aircraft [a:aircraft] ( APPEND AND $aircraft-wh1 ( APPEND flight  $with-flight4 ) ) ) ( WRITE context/flight ( APPEND AND $with-flight4 ( APPEND aircraft  $aircraft-wh1 ) ) ) }
    | ( <aircraft-wh> :aircraft-wh1 would i be flying ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [b:aircraft] ) ) ) ) ( WRITE context/aircraft [b:aircraft] ( APPEND AND $aircraft-wh1 ( APPEND flight  ( [a:flight] ) ) ) ) ( WRITE context/flight ( UPDATE ( [a:flight] ) ( APPEND aircraft  $aircraft-wh1 ) ) ) }
    | ( <flight-descr> :flight-descr1 is <aircraft-wh> :aircraft-wh3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [a:aircraft] ) ) ) ) ( WRITE context/aircraft [a:aircraft] ( APPEND AND $aircraft-wh3 ( APPEND flight  $flight-descr1 ) ) ) ( WRITE context/flight ( APPEND AND $flight-descr1 ( APPEND aircraft  $aircraft-wh3 ) ) ) }
    | ( <with-flight> :with-flight1 <aircraft-wh> :aircraft-wh2 is used ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [a:aircraft] ) ) ) ) ( WRITE context/aircraft [a:aircraft] ( APPEND AND $aircraft-wh2 ( APPEND flight  $with-flight1 ) ) ) ( WRITE context/flight ( APPEND AND $with-flight1 ( APPEND aircraft  $aircraft-wh2 ) ) ) }
    | ( <with-flight> :with-flight1 <find> <aircraft-descr> :aircraft-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [a:aircraft] ) ) ) ) ( WRITE context/aircraft [a:aircraft] ( APPEND AND $aircraft-descr3 ( APPEND flight  $with-flight1 ) ) ) ( WRITE context/flight ( APPEND AND $with-flight1 ( APPEND aircraft  $aircraft-descr3 ) ) ) }
    | ( <with-flight> :with-flight1 <find> <aircraft-param> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [a:aircraft] ) ) ) ) ( WRITE context/aircraft [a:aircraft] ( APPEND flight  $with-flight1 ) ) }
    | ( <find> <aircraft-descr> :aircraft-descr2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [b:aircraft] ) ) ) ) ( WRITE context/aircraft [b:aircraft] ( APPEND AND ( APPEND flight  ( [a:flight] ) ) $aircraft-descr2 ) ) ( WRITE context/flight ( UPDATE ( [a:flight] ) ( APPEND aircraft  $aircraft-descr2 ) ) ) }
    | ( <aircraft-descr> :aircraft-descr1 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [b:aircraft] ) ) ) ) ( WRITE context/aircraft [b:aircraft] ( APPEND AND ( APPEND flight  ( [a:flight] ) ) $aircraft-descr1 ) ) ( WRITE context/flight ( UPDATE ( [a:flight] ) ( APPEND aircraft  $aircraft-descr1 ) ) ) }
    | ( <find> <aircraft-param> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [b:aircraft] ) ) ) ) ( WRITE context/aircraft [b:aircraft] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( <aircraft-param> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [b:aircraft] ) ) ) ) ( WRITE context/aircraft [b:aircraft] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( <find> <aircraft-wh> :aircraft-wh2 is used <with-flight> :with-flight5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [a:aircraft] ) ) ) ) ( WRITE context/aircraft [a:aircraft] ( APPEND AND $aircraft-wh2 ( APPEND flight  $with-flight5 ) ) ) ( WRITE context/flight ( APPEND AND $with-flight5 ( APPEND aircraft  $aircraft-wh2 ) ) ) }
    | ( <aircraft-wh> :aircraft-wh1 is used <with-flight> :with-flight4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [a:aircraft] ) ) ) ) ( WRITE context/aircraft [a:aircraft] ( APPEND AND $aircraft-wh1 ( APPEND flight  $with-flight4 ) ) ) ( WRITE context/flight ( APPEND AND $with-flight4 ( APPEND aircraft  $aircraft-wh1 ) ) ) }
    | ( which is <aircraft-descr> :aircraft-descr3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  aircraft.aircraft_code ) ( APPEND object  aircraft ) ( APPEND specs/aircraft  ( [b:aircraft] ) ) ) ) ( WRITE context/aircraft [b:aircraft] $aircraft-descr3 ) ( WRITE context/flight ( UPDATE ( [a:flight] ) ( APPEND aircraft  $aircraft-descr3 ) ) ) }
  ) .

<find-airline-and-flight-number-query>
  ::= ( ( <find> <airline-param> and <flight-number-param> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.airline_code,  flight.flight_number ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) }
    | ( <airline-param> and <flight-number-param> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.airline_code,  flight.flight_number ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) }
    | ( <find> <airline-param> and <flight-number-param> <flight-mod-phrase> :flight-mod-phrase5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.airline_code,  flight.flight_number ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] $flight-mod-phrase5 ) }
    | ( <airline-param> and <flight-number-param> <flight-mod-phrase> :flight-mod-phrase4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.airline_code,  flight.flight_number ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] $flight-mod-phrase4 ) }
    | ( <find> <airline-param> and <flight-number-param> <flight-mod-phrase> :flight-mod-phrase5 on the same date <date-day-descr> :date-day-descr10 also <flight-mod-phrase> :flight-mod-phrase12 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.airline_code,  flight.flight_number ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND AND $flight-mod-phrase5 ( APPEND flight_days  $date-day-descr10 ) $flight-mod-phrase12 ) ) }
    | ( <airline-param> and <flight-number-param> <flight-mod-phrase> :flight-mod-phrase4 on the same date <date-day-descr> :date-day-descr9 also <flight-mod-phrase> :flight-mod-phrase11 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.airline_code,  flight.flight_number ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND AND $flight-mod-phrase4 ( APPEND flight_days  $date-day-descr9 ) $flight-mod-phrase11 ) ) }
    | ( <find> <airline-param> and <flight-number-param> <with-flight> :with-flight5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.airline_code,  flight.flight_number ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] $with-flight5 ) }
    | ( <airline-param> and <flight-number-param> <with-flight> :with-flight4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.airline_code,  flight.flight_number ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] $with-flight4 ) }
    | ( <find> <flight-number-param> and <airline-param> <flight-mod-phrase> :flight-mod-phrase5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.airline_code,  flight.flight_number ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] $flight-mod-phrase5 ) }
    | ( <flight-number-param> and <airline-param> <flight-mod-phrase> :flight-mod-phrase4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.airline_code,  flight.flight_number ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] $flight-mod-phrase4 ) }
    | ( <find> <flight-number-param> and <airline-param> <with-flight> :with-flight5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.airline_code,  flight.flight_number ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] $with-flight5 ) }
    | ( <flight-number-param> and <airline-param> <with-flight> :with-flight4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.airline_code,  flight.flight_number ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] $with-flight4 ) }
  ) .

<find-airline-code-query>
  ::= ( ( <airline-code-param> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline/1/=  1 ) ) ) }
    | ( <find> <airline-code-param> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline/1/=  1 ) ) ) }
    | ( <airline-code-param> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline/1/=  1 ) ) ) }
    | ( what is <airline-name> :airline-name3 <code> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND airline_code  $airline-name3 ) ) }
    | ( what is <det> <code> for <airline-name> :airline-name6 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND airline_code  $airline-name6 ) ) }
  ) .

<start_symbol_find-airline-name-query>
  ::= ( ( <airline-code-descr> :airline-code-descr1 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_name ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND airline_code  $airline-code-descr1 ) ) }
    | ( <airline-code-descr> :airline-code-descr1 is the <code> for <airline-wh> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_name ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND airline_code  $airline-code-descr1 ) ) }
    | ( <airline-param> <pron-rel> stands for <airline-code-descr> :airline-code-descr5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_name ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND airline_code  $airline-code-descr5 ) ) }
    | ( <airline-param> for flight <airline-code> :airline-code4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_name ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND airline_code  $airline-code4 ) ) }
    | ( <airline-param> with <airline-code-descr> :airline-code-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_name ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND airline_code  $airline-code-descr3 ) ) }
    | ( <airline-wh> are <airline-code-descr> :airline-code-descr3 and <airline-code-descr> :airline-code-descr5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_name ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND OR  ( APPEND airline_code  $airline-code-descr3 ) ( APPEND airline_code  $airline-code-descr5 ) ) ) }
    | ( <airline-wh> does <airline-code-descr> :airline-code-descr3 <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_name ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND airline_code  $airline-code-descr3 ) ) }
    | ( <airline-wh> has <airline-code-descr> :airline-code-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_name ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND airline_code  $airline-code-descr3 ) ) }
    | ( <airline-wh> is <airline-code-descr> :airline-code-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_name ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND airline_code  $airline-code-descr3 ) ) }
    | ( <airline-wh> is abbreviated <airline-code> :airline-code4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_name ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND airline_code  $airline-code4 ) ) }
    | ( <airline-wh> stands for <airline-code-descr> :airline-code-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_name ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND airline_code  $airline-code-descr4 ) ) }
    | ( <airline-wh> uses <airline-code-descr> :airline-code-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_name ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND airline_code  $airline-code-descr3 ) ) }
    | ( <find> what <airline-code-descr> :airline-code-descr3 <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_name ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND airline_code  $airline-code-descr3 ) ) }
    | ( <with-flight> :with-flight1 what does :does3 <airline-code-descr> <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_name ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND airline_code  $does3 ) ) ( WRITE context/flight $with-flight1 ) }
    | ( airline's name ) { ( READ context/airline ( [a:airline] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_name ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) }
    | ( define <airline-code-descr> :airline-code-descr2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_name ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND airline_code  $airline-code-descr2 ) ) }
    | ( what carrier is <airline-code-descr> :airline-code-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_name ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND airline_code  $airline-code-descr4 ) ) }
    | ( what does <airline-code-descr> :airline-code-descr3 <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_name ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND airline_code  $airline-code-descr3 ) ) }
    | ( what is <airline-code-descr> :airline-code-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_name ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND airline_code  $airline-code-descr3 ) ) }
  ) .

<find-airline-query>
  ::= ( ( <airline-wh> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [b:airline] ) ) ) ) ( WRITE context/airline [b:airline] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( <airline-wh> <airline-pred> :airline-pred2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] $airline-pred2 ) }
    | ( <airline-wh> <airline-pred> :airline-pred2 and <airline-pred> :airline-pred4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND AND $airline-pred2 $airline-pred4 ) ) }
    | ( <airline-wh> <flight-mod-phrase> :flight-mod-phrase2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND flight  ( [b:flight] ) ) ) ( WRITE context/flight [b:flight] $flight-mod-phrase2 ) }
    | ( <airline-wh> fly <flight-mod-phrase> :flight-mod-phrase3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/flight $flight-mod-phrase3 ) ( WRITE context/airline [a:airline] ( APPEND flight  $flight-mod-phrase3 ) ) }
    | ( <airline-wh> has <fare-descr> :fare-descr3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [d:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [b:airline] ) ) ) ) ( WRITE context/airline [b:airline] ( APPEND flight  ( [c:flight] ) ) ) ( WRITE context/flight [c:flight] ( UPDATE ( [a:flight] ) ( APPEND fare  $fare-descr3 ) ) ) ( WRITE context/fare $fare-descr3 ) }
    | ( <airline-wh> is this ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [b:airline] ) ) ) ) ( WRITE context/airline [b:airline] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( <find-flight> <flight-mod-phrase> :flight-mod-phrase2 and returning <flight-mod-phrase> :flight-mod-phrase5 <airline-wh> fly that route ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [b:airline] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND OR  $flight-mod-phrase2 ( UPDATE ( RETURN_FLIGHT $flight-mod-phrase2 ) $flight-mod-phrase5 ) ) ) ( WRITE context/airline [b:airline] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( <find> <airline-descr> :airline-descr2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] $airline-descr2 ) }
    | ( <find> <airline-param> <flight-mod-phrase> :flight-mod-phrase3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/flight $flight-mod-phrase3 ) ( WRITE context/airline [a:airline] ( APPEND flight  $flight-mod-phrase3 ) ) }
    | ( <find> <flight-descr> :flight-descr2 and <find> <airline-descr> :airline-descr5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND AND $airline-descr5 ( APPEND flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( APPEND AND $flight-descr2 ( APPEND airline  $airline-descr5 ) ) ) }
    | ( <find> airlines <airline-mod-list> :airline-mod-list3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] $airline-mod-list3 ) }
    | ( <find> any other airlines <airline-mod-list> :airline-mod-list5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] $airline-mod-list5 ) }
    | ( <find> <airline-param> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [b:airline] ) ) ) ) ( WRITE context/airline [b:airline] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( <airline-param> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline/1/=  1 ) ) ) }
    | ( airlines <airline-mod-list> :airline-mod-list2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] $airline-mod-list2 ) }
    | ( can i take a single airline <from-airport-layover-to-airport> :from-airport-layover-to-airport7 back <to-airport> :to-airport9 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/flight $from-airport-layover-to-airport7 ) ( WRITE context/airline [a:airline] ( APPEND AND ( APPEND flight  $from-airport-layover-to-airport7 ) ( APPEND flight  $to-airport9 ) ) ) }
    | ( do <airline-descr> :airline-descr2 <airline-pred> :airline-pred3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( APPEND AND $airline-descr2 $airline-pred3 ) ) }
    | ( of <airline-descr> :airline-descr2 <airline-wh> <airline-pred> :airline-pred4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airline.airline_code ) ( APPEND object  airline ) ( APPEND specs/airline  ( [a:airline] ) ) ) ) ( WRITE context/airline [a:airline] ( UPDATE $airline-descr2 $airline-pred4 ) ) }
  ) .

<start_symbol_find-airport-airport-location-query>
  ::= ( ( where is <airport-descr> :airport-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_location ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] $airport-descr3 ) }
    | ( where is <airport-descr> :airport-descr3 located ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_location ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] $airport-descr3 ) }
    | ( where is <airport-descr> :airport-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_location ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] $airport-descr3 ) }
  ) .

<find-airport-code-query>
  ::= ( ( <find> <airport-code-param> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_code ) ( APPEND object  airport ) ( APPEND specs/airport/1/=  1 ) ) ) }
    | ( <airport-code-param> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_code ) ( APPEND object  airport ) ( APPEND specs/airport/1/=  1 ) ) ) }
  ) .

<find-airport-min-connect-time-query>
  ::= ( ( <find> <min-connect-time> ) { ( READ context/airport ( [a:airport] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.minimum_connect_time ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) }
    | ( <min-connect-time> ) { ( READ context/airport ( [a:airport] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.minimum_connect_time ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) }
    | ( <find> <min-connect-time> <with-airport> :with-airport3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.minimum_connect_time ) ( APPEND object  airport ) ( APPEND specs/airport  $with-airport3 ) ) ) }
    | ( <min-connect-time> <with-airport> :with-airport2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.minimum_connect_time ) ( APPEND object  airport ) ( APPEND specs/airport  $with-airport2 ) ) ) }
  ) .

<start_symbol_find-airport-name-query>
  ::= ( ( <airport-code-descr> :airport-code-descr1 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_name ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] ( APPEND airport_code  $airport-code-descr1 ) ) }
    | ( <airport-wh> is <airport-code-descr> :airport-code-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_name ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] ( APPEND airport_code  $airport-code-descr3 ) ) }
    | ( <find> the name of <airport-descr> :airport-descr5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_name ) ( APPEND object  airport ) ( APPEND specs/airport  $airport-descr5 ) ) ) }
    | ( <find> the name of the airport <flight-descr> :flight-descr7 will <arrive> in ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_name ) ( APPEND object  airport ) ( APPEND specs/airport  ( [b:airport] ) ) ) ) ( WRITE context/airport [b:airport] ( APPEND incoming_flight  $flight-descr7 ) ) }
    | ( <find> the name of the airport that this flies into ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_name ) ( APPEND object  airport ) ( APPEND specs/airport  ( [b:airport] ) ) ) ) ( WRITE context/airport [b:airport] ( APPEND incoming_flight  ( [a:flight] ) ) ) }
    | ( <find> the names of <airport-descr> :airport-descr5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_name ) ( APPEND object  airport ) ( APPEND specs/airport  $airport-descr5 ) ) ) }
    | ( airport name ) { ( READ context/airport ( [a:airport] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_name ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) }
    | ( explain <airport-code-descr> :airport-code-descr2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_name ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] ( APPEND airport_code  $airport-code-descr2 ) ) }
    | ( in <city-descr> :city-descr2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_name ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] ( APPEND city  $city-descr2 ) ) }
    | ( name of <airport-descr> :airport-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_name ) ( APPEND object  airport ) ( APPEND specs/airport  $airport-descr3 ) ) ) }
    | ( names of airports ) { ( READ context/airport ( [a:airport] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_name ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) }
    | ( what do <airport-code-descr> :airport-code-descr3 <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_name ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] ( APPEND airport_code  $airport-code-descr3 ) ) }
    | ( what does <airport-code-descr> :airport-code-descr3 <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_name ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] ( APPEND airport_code  $airport-code-descr3 ) ) }
    | ( what does ord <airport-code> :airport-code4 <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_name ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] ( APPEND airport_code  $airport-code4 ) ) }
    | ( what is <airport-code-descr> :airport-code-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_name ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] ( APPEND airport_code  $airport-code-descr3 ) ) }
    | ( what is the meaning of <airport-code-descr> :airport-code-descr6 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_name ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] ( APPEND airport_code  $airport-code-descr6 ) ) }
  ) .

<find-airport-query>
  ::= ( ( <airport-descr> :airport-descr1 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_code ) ( APPEND object  airport ) ( APPEND specs/airport  $airport-descr1 ) ) ) }
    | ( <airport-wh> <with-city> :with-city2 <have-miles-distant-min> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_code ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] ( APPEND AND ( APPEND airport_service  ( APPEND AND ( APPEND super/min/miles_distant  airport_service ) ( APPEND city  $with-city2 ) ) ) ( APPEND city  $with-city2 ) ) ) }
    | ( <airport-wh> is <with-city> :with-city3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_code ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] ( APPEND city  $with-city3 ) ) }
    | ( <airport-wh> serves <city-descr> :city-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_code ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] ( APPEND city  $city-descr3 ) ) }
    | ( <find> <airport-descr> :airport-descr2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_code ) ( APPEND object  airport ) ( APPEND specs/airport  $airport-descr2 ) ) ) }
    | ( what <airport-adj> :airport-adj2 airports do <flight-descr> :flight-descr5 use ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_name ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] ( APPEND AND $airport-adj2 ( APPEND incoming_flight  $flight-descr5 ) ) ) }
    | ( where does <airline-descr> :airline-descr3 fly ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_code ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] ( APPEND incoming_flight  ( [b:flight] ) ) ) ( WRITE context/flight [b:flight] ( APPEND airline  $airline-descr3 ) ) }
    | ( where does <airline-descr> :airline-descr3 fly to ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_code ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] ( APPEND incoming_flight  ( [b:flight] ) ) ) ( WRITE context/flight [b:flight] ( APPEND airline  $airline-descr3 ) ) }
    | ( where does <airline-descr> :airline-descr3 fly to <from-airport> :from-airport6 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_code ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] ( APPEND incoming_flight  ( [b:flight] ) ) ) ( WRITE context/flight [b:flight] ( APPEND AND ( APPEND airline  $airline-descr3 ) $from-airport6 ) ) }
    | ( where does <airline-descr> :airline-descr3 go ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_code ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] ( APPEND incoming_flight  ( [b:flight] ) ) ) ( WRITE context/flight [b:flight] ( APPEND airline  $airline-descr3 ) ) }
    | ( where does <flight-descr> :flight-descr3 arrive at ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  airport.airport_code ) ( APPEND object  airport ) ( APPEND specs/airport  ( [a:airport] ) ) ) ) ( WRITE context/airport [a:airport] ( APPEND incoming_flight  $flight-descr3 ) ) }
  ) .

<find-airport-service-miles-distant-query>
  ::= ( ( <find> the distance between <airport-descr> :airport-descr5 and <city-descr> :city-descr7 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  airport_service.miles_distant ) ( APPEND object  airport_service ) ( APPEND specs/airport_service  [a:airport_service] ) ) ) ( WRITE context/airport_service [a:airport_service] ( APPEND AND ( APPEND airport  $airport-descr5 ) ( APPEND city  $city-descr7 ) ) ) }
    | ( <find> distance between <airport-descr> :airport-descr4 and <city-descr> :city-descr6 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  airport_service.miles_distant ) ( APPEND object  airport_service ) ( APPEND specs/airport_service  [a:airport_service] ) ) ) ( WRITE context/airport_service [a:airport_service] ( APPEND AND ( APPEND airport  $airport-descr4 ) ( APPEND city  $city-descr6 ) ) ) }
    | ( <find> the distance between <airport-descr> :airport-descr5 and <city-area> :city-area7 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  airport_service.miles_distant ) ( APPEND object  airport_service ) ( APPEND specs/airport_service  [a:airport_service] ) ) ) ( WRITE context/airport_service [a:airport_service] ( APPEND AND ( APPEND airport  $airport-descr5 ) ( APPEND city  $city-area7 ) ) ) }
    | ( <find> distance between <airport-descr> :airport-descr4 and <city-area> :city-area6 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  airport_service.miles_distant ) ( APPEND object  airport_service ) ( APPEND specs/airport_service  [a:airport_service] ) ) ) ( WRITE context/airport_service [a:airport_service] ( APPEND AND ( APPEND airport  $airport-descr4 ) ( APPEND city  $city-area6 ) ) ) }
    | ( <find> the distance from <airport-descr> :airport-descr5 to <city-area> :city-area7 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  airport_service.miles_distant ) ( APPEND object  airport_service ) ( APPEND specs/airport_service  [a:airport_service] ) ) ) ( WRITE context/airport_service [a:airport_service] ( APPEND AND ( APPEND airport  $airport-descr5 ) ( APPEND city  $city-area7 ) ) ) }
    | ( <find> distance from <airport-descr> :airport-descr4 to <city-area> :city-area6 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  airport_service.miles_distant ) ( APPEND object  airport_service ) ( APPEND specs/airport_service  [a:airport_service] ) ) ) ( WRITE context/airport_service [a:airport_service] ( APPEND AND ( APPEND airport  $airport-descr4 ) ( APPEND city  $city-area6 ) ) ) }
    | ( <find> the distance from <airport-descr> :airport-descr5 to <city-descr> :city-descr7 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  airport_service.miles_distant ) ( APPEND object  airport_service ) ( APPEND specs/airport_service  [a:airport_service] ) ) ) ( WRITE context/airport_service [a:airport_service] ( APPEND AND ( APPEND airport  $airport-descr5 ) ( APPEND city  $city-descr7 ) ) ) }
    | ( <find> distance from <airport-descr> :airport-descr4 to <city-descr> :city-descr6 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  airport_service.miles_distant ) ( APPEND object  airport_service ) ( APPEND specs/airport_service  [a:airport_service] ) ) ) ( WRITE context/airport_service [a:airport_service] ( APPEND AND ( APPEND airport  $airport-descr4 ) ( APPEND city  $city-descr6 ) ) ) }
    | ( <find> the distance from <airport-descr> :airport-descr5 to <city-name> :city-name7 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  airport_service.miles_distant ) ( APPEND object  airport_service ) ( APPEND specs/airport_service  [a:airport_service] ) ) ) ( WRITE context/airport_service [a:airport_service] ( APPEND AND ( APPEND airport  $airport-descr5 ) ( APPEND city  ( [c:city] ) ) ) ) ( WRITE context/city [c:city] ( APPEND city_name  $city-name7 ) ) }
    | ( <find> distance from <airport-descr> :airport-descr4 to <city-name> :city-name6 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  airport_service.miles_distant ) ( APPEND object  airport_service ) ( APPEND specs/airport_service  [a:airport_service] ) ) ) ( WRITE context/airport_service [a:airport_service] ( APPEND AND ( APPEND airport  $airport-descr4 ) ( APPEND city  ( [c:city] ) ) ) ) ( WRITE context/city [c:city] ( APPEND city_name  $city-name6 ) ) }
    | ( how far is <airport-descr> :airport-descr4 from <city-area> :city-area6 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  airport_service.miles_distant ) ( APPEND object  airport_service ) ( APPEND specs/airport_service  [a:airport_service] ) ) ) ( WRITE context/airport_service [a:airport_service] ( APPEND AND ( APPEND airport  $airport-descr4 ) ( APPEND city  $city-area6 ) ) ) }
    | ( how far is it from <airport-descr> :airport-descr6 to <city-name> :city-name8 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  airport_service.miles_distant ) ( APPEND object  airport_service ) ( APPEND specs/airport_service  [a:airport_service] ) ) ) ( WRITE context/airport_service [a:airport_service] ( APPEND AND ( APPEND airport  $airport-descr6 ) ( APPEND city  ( [c:city] ) ) ) ) ( WRITE context/city [c:city] ( APPEND city_name  $city-name8 ) ) }
  ) .

<find-airport-service-minutes-distant-query>
  ::= ( ( how long does <ground-service-param> take from <airport-descr> :airport-descr7 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  airport_service.minutes_distant ) ( APPEND object  airport_service ) ( APPEND specs/airport_service  [a:airport_service] ) ) ) ( WRITE context/airport_service [a:airport_service] ( APPEND airport  $airport-descr7 ) ) }
    | ( how much time does it take to get <city-area> :city-area9 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  airport_service.minutes_distant ) ( APPEND object  airport_service ) ( APPEND specs/airport_service  [a:airport_service] ) ) ) ( WRITE context/airport_service [a:airport_service] ( APPEND city  $city-area9 ) ) }
    | ( what time does it take to get <city-area> :city-area8 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  airport_service.minutes_distant ) ( APPEND object  airport_service ) ( APPEND specs/airport_service  [a:airport_service] ) ) ) ( WRITE context/airport_service [a:airport_service] ( APPEND city  $city-area8 ) ) }
  ) .

<find-all-attributes-query>
  ::= ( ( <expand-aircraft-query> :expand-aircraft-query1 ) { ( VALUE [a:query] $expand-aircraft-query1 ) }
    | ( <expand-fare-basis-query> :expand-fare-basis-query1 ) { ( VALUE [a:query] $expand-fare-basis-query1 ) }
    | ( <expand-flight-query> :expand-flight-query1 ) { ( VALUE [a:query] $expand-flight-query1 ) }
    | ( <expand-ground-service-query> :expand-ground-service-query1 ) { ( VALUE [a:query] $expand-ground-service-query1 ) }
    | ( <expand-restriction-query> :expand-restriction-query1 ) { ( VALUE [a:query] $expand-restriction-query1 ) }
  ) .

<find-attribute-query>
  ::= ( ( <find-aircraft-aircraft-description-query> :find-aircraft-aircraft-description-query1 ) { ( VALUE [a:query] $find-aircraft-aircraft-description-query1 ) }
    | ( <find-aircraft-capacity-query> :find-aircraft-capacity-query1 ) { ( VALUE [a:query] $find-aircraft-capacity-query1 ) }
    | ( <find-airline-code-query> :find-airline-code-query1 ) { ( VALUE [a:query] $find-airline-code-query1 ) }
    | ( <find-airline-name-query> :find-airline-name-query1 ) { ( VALUE [a:query] $find-airline-name-query1 ) }
    | ( <find-airport-airport-location-query> :find-airport-airport-location-query1 ) { ( VALUE [a:query] $find-airport-airport-location-query1 ) }
    | ( <find-airport-code-query> :find-airport-code-query1 ) { ( VALUE [a:query] $find-airport-code-query1 ) }
    | ( <find-airport-min-connect-time-query> :find-airport-min-connect-time-query1 ) { ( VALUE [a:query] $find-airport-min-connect-time-query1 ) }
    | ( <find-airport-name-query> :find-airport-name-query1 ) { ( VALUE [a:query] $find-airport-name-query1 ) }
    | ( <find-airport-service-miles-distant-query> :find-airport-service-miles-distant-query1 ) { ( VALUE [a:query] $find-airport-service-miles-distant-query1 ) }
    | ( <find-airport-service-minutes-distant-query> :find-airport-service-minutes-distant-query1 ) { ( VALUE [a:query] $find-airport-service-minutes-distant-query1 ) }
    | ( <find-city-code-query> :find-city-code-query1 ) { ( VALUE [a:query] $find-city-code-query1 ) }
    | ( <find-city-name-query> :find-city-name-query1 ) { ( VALUE [a:query] $find-city-name-query1 ) }
    | ( <find-days-day-name-query> :find-days-day-name-query1 ) { ( VALUE [a:query] $find-days-day-name-query1 ) }
    | ( <find-fare-basis-fare-basis-code-query> :find-fare-basis-fare-basis-code-query1 ) { ( VALUE [a:query] $find-fare-basis-fare-basis-code-query1 ) }
    | ( <find-flight-arrival-time-query> :find-flight-arrival-time-query1 ) { ( VALUE [a:query] $find-flight-arrival-time-query1 ) }
    | ( <find-flight-departure-time-query> :find-flight-departure-time-query1 ) { ( VALUE [a:query] $find-flight-departure-time-query1 ) }
    | ( <find-flight-number-query> :find-flight-number-query1 ) { ( VALUE [a:query] $find-flight-number-query1 ) }
    | ( <find-flight-stop-arrival-time-query> :find-flight-stop-arrival-time-query1 ) { ( VALUE [a:query] $find-flight-stop-arrival-time-query1 ) }
    | ( <find-flight-stops-query> :find-flight-stops-query1 ) { ( VALUE [a:query] $find-flight-stops-query1 ) }
    | ( <find-flight-time-elapsed-query> :find-flight-time-elapsed-query1 ) { ( VALUE [a:query] $find-flight-time-elapsed-query1 ) }
    | ( <find-flight-to-airport-query> :find-flight-to-airport-query1 ) { ( VALUE [a:query] $find-flight-to-airport-query1 ) }
    | ( <find-food-service-meal-description-query> :find-food-service-meal-description-query1 ) { ( VALUE [a:query] $find-food-service-meal-description-query1 ) }
    | ( <find-ground-service-ground-fare-query> :find-ground-service-ground-fare-query1 ) { ( VALUE [a:query] $find-ground-service-ground-fare-query1 ) }
    | ( <find-ground-service-transport-type-query> :find-ground-service-transport-type-query1 ) { ( VALUE [a:query] $find-ground-service-transport-type-query1 ) }
  ) .

<find-city-code-query>
  ::= ( ( what is the <code> for <city-name> :city-name6 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) ( WRITE context/city [a:city] ( APPEND city_name  $city-name6 ) ) }
  ) .

<find-city-name-query>
  ::= ( ( <find> city names ) { ( READ context/city ( [a:city] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_name ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) }
  ) .

<find-city-query>
  ::= ( ( <city-wh> ) { ( READ context/city ( [a:city] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) }
    | ( <city-wh> <city-pred-airline> :city-pred-airline2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) ( WRITE context/city [a:city] $city-pred-airline2 ) }
    | ( <city-wh> are <det> <flight-stop> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [b:city] ) ) ) ) ( WRITE context/city [b:city] ( APPEND stopping_flight  ( [a:flight] ) ) ) }
    | ( <city-wh> do <flight-descr> :flight-descr3 stopover in ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) ( WRITE context/city [a:city] ( APPEND stopping_flight  $flight-descr3 ) ) }
    | ( <city-wh> does <airline-descr> :airline-descr3 stopover during the flight ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [b:city] ) ) ) ) ( WRITE context/city [b:city] ( APPEND stopping_flight  ( UPDATE ( [a:flight] ) ( APPEND airline  $airline-descr3 ) ) ) ) }
    | ( <city-wh> does <flight-descr> :flight-descr3 stop in ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) ( WRITE context/city [a:city] ( APPEND stopping_flight  $flight-descr3 ) ) }
    | ( <city-wh> does <flight-descr> :flight-descr3 stop on ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) ( WRITE context/city [a:city] ( APPEND stopping_flight  $flight-descr3 ) ) }
    | ( <city-wh> does <flight-descr> :flight-descr3 stop over in ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) ( WRITE context/city [a:city] ( APPEND stopping_flight  $flight-descr3 ) ) }
    | ( <city-wh> does this arrive in ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [b:city] ) ) ) ) ( WRITE context/city [b:city] ( APPEND incoming_flight  ( [a:flight] ) ) ) }
    | ( <city-wh> is <airport-code-descr> :airport-code-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [b:city] ) ) ) ) ( WRITE context/airport [a:airport] ( APPEND airport_code  $airport-code-descr3 ) ) ( WRITE context/city [b:city] ( APPEND airport  ( [a:airport] ) ) ) }
    | ( <city-wh> is <airport-descr> :airport-descr3 in ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [b:city] ) ) ) ) ( WRITE context/airport [a:airport] $airport-descr3 ) ( WRITE context/city [b:city] ( APPEND airport  ( [a:airport] ) ) ) }
    | ( <city-wh> is <det> <flight-stop> <with-flight> :with-flight5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) ( WRITE context/city [a:city] ( APPEND stopping_flight  $with-flight5 ) ) }
    | ( <city-wh> is it in ) { ( READ context/airport ( [a:airport] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [b:city] ) ) ) ) ( WRITE context/city [b:city] ( APPEND airport  ( [a:airport] ) ) ) }
    | ( <find> <city-wh> <flight-descr> :flight-descr3 stop in ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) ( WRITE context/city [a:city] ( APPEND stopping_flight  $flight-descr3 ) ) }
    | ( <find> <city-wh> <flight-descr> :flight-descr3 stops in ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) ( WRITE context/city [a:city] ( APPEND stopping_flight  $flight-descr3 ) ) }
    | ( <find> <city> served both by <airline-descr> :airline-descr6 and <airline-descr> :airline-descr8 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) ( WRITE context/city [a:city] ( APPEND AND ( APPEND OR  ( APPEND incoming_flight/airline  $airline-descr6 ) ( APPEND outgoing_flight/airline  $airline-descr6 ) ) ( APPEND OR  ( APPEND incoming_flight/airline  $airline-descr8 ) ( APPEND outgoing_flight/airline  $airline-descr8 ) ) ) ) }
    | ( <find> <det> <city> <pron-rel> <airline-descr> :airline-descr5 serves ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) ( WRITE context/city [a:city] ( APPEND OR  ( APPEND incoming_flight/airline  $airline-descr5 ) ( APPEND outgoing_flight/airline  $airline-descr5 ) ) ) }
    | ( <find> <det> <city> in which <flight-descr> :flight-descr6 make <flight-stop> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) ( WRITE context/city [a:city] ( APPEND stopping_flight  $flight-descr6 ) ) }
    | ( <find> <det> <city> in which these <flight-stop> are made ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [b:city] ) ) ) ) ( WRITE context/city [b:city] ( APPEND stopping_flight  ( [a:flight] ) ) ) }
    | ( <find> <det> <city> of <det> <flight-stop> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [b:city] ) ) ) ) ( WRITE context/city [b:city] ( APPEND stopping_flight  ( [a:flight] ) ) ) }
    | ( <find> <det> <city> served by <airline-descr> :airline-descr6 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) ( WRITE context/city [a:city] ( APPEND OR  ( APPEND incoming_flight/airline  $airline-descr6 ) ( APPEND outgoing_flight/airline  $airline-descr6 ) ) ) }
    | ( <find> <det> connecting <city> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [b:city] ) ) ) ) ( WRITE context/city [b:city] ( APPEND stopping_flight  ( [a:flight] ) ) ) }
    | ( <find> <det> stopover <city> <with-flight> :with-flight5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) ( WRITE context/city [a:city] ( APPEND stopping_flight  $with-flight5 ) ) }
    | ( <find> connecting <city> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [b:city] ) ) ) ) ( WRITE context/city [b:city] ( APPEND stopping_flight  ( [a:flight] ) ) ) }
    | ( <find> in <city-wh> <flight-descr> :flight-descr4 stop ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) ( WRITE context/city [a:city] ( APPEND stopping_flight  $flight-descr4 ) ) }
    | ( <find> stopover <city> <with-flight> :with-flight4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) ( WRITE context/city [a:city] ( APPEND stopping_flight  $with-flight4 ) ) }
    | ( <flight-descr> :flight-descr1 <city-wh> does it stopover in ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) ( WRITE context/city [a:city] ( APPEND stopping_flight  $flight-descr1 ) ) }
    | ( are these cities served by <airline-descr> :airline-descr6 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  city.city_code ) ( APPEND object  city ) ( APPEND specs/city  ( [a:city] ) ) ) ) ( WRITE context/city [a:city] ( APPEND OR  ( APPEND incoming_flight/airline  $airline-descr6 ) ( APPEND outgoing_flight/airline  $airline-descr6 ) ) ) }
  ) .

<start_symbol_find-class-query>
  ::= ( ( the fare classes <with-flight> :with-flight4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  class_of_service.booking_class ) ( APPEND object  class_of_service ) ( APPEND specs/class_of_service  ( APPEND fare_basis/fare  ( [a:fare] ) ) ) ) ) ( WRITE context/fare [a:fare] ( APPEND flight  $with-flight4 ) ) }
    | ( what are the classes ) { ( READ context/fare/fare_basis [a:fare_basis] ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  class_of_service.booking_class ) ( APPEND object  class_of_service ) ( APPEND specs/class_of_service  ( APPEND fare_basis  [a:fare_basis] ) ) ) ) }
    | ( what class are <flight-descr> :flight-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  class_of_service.booking_class ) ( APPEND object  class_of_service ) ( APPEND specs/class_of_service  ( APPEND fare_basis/fare  ( [a:fare] ) ) ) ) ) ( WRITE context/fare [a:fare] ( APPEND flight  $flight-descr4 ) ) }
    | ( what classes of service are available <with-flight> :with-flight7 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  class_of_service.booking_class ) ( APPEND object  class_of_service ) ( APPEND specs/class_of_service  ( APPEND fare_basis/fare  ( [a:fare] ) ) ) ) ) ( WRITE context/fare [a:fare] ( APPEND flight  $with-flight7 ) ) }
    | ( what classes of service does <airline-descr> :airline-descr6 have ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  class_of_service.booking_class ) ( APPEND object  class_of_service ) ( APPEND specs/class_of_service  ( APPEND fare_basis/fare  ( [a:fare] ) ) ) ) ) ( WRITE context/fare [a:fare] ( APPEND flight  ( [b:flight] ) ) ) ( WRITE context/flight [b:flight] ( APPEND airline  $airline-descr6 ) ) }
    | ( what classes of service does <airline-descr> :airline-descr6 provide ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  class_of_service.booking_class ) ( APPEND object  class_of_service ) ( APPEND specs/class_of_service  ( APPEND fare_basis/fare  ( [a:fare] ) ) ) ) ) ( WRITE context/fare [a:fare] ( APPEND flight  ( [b:flight] ) ) ) ( WRITE context/flight [b:flight] ( APPEND airline  $airline-descr6 ) ) }
    | ( what classes of services are available <with-flight> :with-flight7 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  class_of_service.booking_class ) ( APPEND object  class_of_service ) ( APPEND specs/class_of_service  ( APPEND fare_basis/fare  ( [a:fare] ) ) ) ) ) ( WRITE context/fare [a:fare] ( APPEND flight  $with-flight7 ) ) }
    | ( which booking class is <class-type> :class-type5 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  class_of_service.booking_class ) ( APPEND object  class_of_service ) ( APPEND specs/class_of_service  ( APPEND fare_basis/fare  ( APPEND AND ( APPEND class_type  $class-type5 ) ( APPEND flight  ( [a:flight] ) ) ) ) ) ) ) }
  ) .

<start_symbol_find-day-query>
  ::= ( ( <find> the day <with-flight> :with-flight4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  days.day_name ) ( APPEND object  days ) ( APPEND specs/days  ( APPEND flight  $with-flight4 ) ) ) ) }
  ) .

<find-days-day-name-query>
  ::= ( ( what is <day-code> :day-code3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  days.day_name ) ( APPEND object  days ) ( APPEND specs/days  ( APPEND days_code  $day-code3 ) ) ) ) ( WRITE context/days ( APPEND days_code  $day-code3 ) ) }
  ) .

<start_symbol_find-fare-basis-fare-basis-code-query>
  ::= ( ( <find> <fare-basis-code-param> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare_basis.fare_basis_code ) ( APPEND object  fare_basis ) ( APPEND specs/fare_basis/1/=  1 ) ) ) }
    | ( what is <det> fare <code> for <class-type> :class-type7 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare_basis.fare_basis_code ) ( APPEND object  fare_basis ) ( APPEND specs/fare_basis  [b:fare_basis] ) ) ) ( WRITE context/fare_basis [b:fare_basis] ( APPEND fare/class_type  $class-type7 ) ) }
  ) .

<find-fare-query>
  ::= ( ( <find> <fare-descr> :fare-descr2 and <fare-descr> :fare-descr4 <fare-mod-list> :fare-mod-list5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [a:fare] ) ) ) ) ( WRITE context/fare [a:fare] ( APPEND AND ( APPEND OR  $fare-descr2 $fare-descr4 ) $fare-mod-list5 ) ) }
    | ( <find> <fare-descr> :fare-descr2 and <fare-descr> :fare-descr4 <with-flight> :with-flight5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [a:fare] ) ) ) ) ( WRITE context/fare [a:fare] ( APPEND AND ( APPEND OR  $fare-descr2 $fare-descr4 ) ( APPEND flight  $with-flight5 ) ) ) }
    | ( <find> <fare-descr> :fare-descr2 for that ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [b:fare] ) ) ) ) ( WRITE context/fare [b:fare] ( APPEND AND $fare-descr2 ( APPEND flight  ( [a:flight] ) ) ) ) }
    | ( <find> <fare-param> of <fare-basis-code-descr> :fare-basis-code-descr4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [a:fare] ) ) ) ) ( WRITE context/fare [a:fare] ( APPEND AND ( APPEND fare_basis_code  $fare-basis-code-descr4 ) ( APPEND flight  ( [a:flight] ) ) ) ) }
    | ( <find> <fare-param> of <fare-descr> :fare-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [a:fare] ) ) ) ) ( WRITE context/fare [a:fare] $fare-descr4 ) }
    | ( <find> <fare> of <flight-descr> :flight-descr4 and <flight-descr> :flight-descr6 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [a:fare] ) ) ) ) ( WRITE context/flight [b:flight] ( APPEND OR  $flight-descr4 $flight-descr6 ) ) ( WRITE context/fare [a:fare] ( APPEND flight  ( [b:flight] ) ) ) }
    | ( <find> any other <fare> <flight-mod-phrase> :flight-mod-phrase5 ) { ( READ context/fare ( [a:fare] ) ) ( VALUE ) ( WRITE context/flight $flight-mod-phrase5 ) }
    | ( <flight-mod-airline> :flight-mod-airline1 <find> <fare-descr> :fare-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [a:fare] ) ) ) ) ( WRITE context/fare [a:fare] ( APPEND AND ( APPEND flight  $flight-mod-airline1 ) $fare-descr3 ) ) }
    | ( <find> <fare-descr> :fare-descr2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  [a:fare] $fare-descr2 ) ) ) }
    | ( <fare-descr> :fare-descr1 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  [a:fare] $fare-descr1 ) ) ) }
    | ( amount <fare-mod-list> :fare-mod-list2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [a:fare] ) ) ) ) ( WRITE context/fare [a:fare] $fare-mod-list2 ) }
    | ( how much do <flight-descr> :flight-descr4 cost ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [b:fare] ) ) ) ) ( WRITE context/fare [b:fare] ( APPEND flight  $flight-descr4 ) ) }
    | ( how much does <flight-descr> :flight-descr4 cost ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [a:fare] ) ) ) ) ( WRITE context/fare [a:fare] ( APPEND flight  $flight-descr4 ) ) }
    | ( how much do these cost ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [b:fare] ) ) ) ) ( WRITE context/fare [b:fare] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( how much do they cost ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [b:fare] ) ) ) ) ( WRITE context/fare [b:fare] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( how much do those cost ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [b:fare] ) ) ) ) ( WRITE context/fare [b:fare] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( how much does <class-type> :class-type4 cost ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [b:fare] ) ) ) ) ( WRITE context/fare [b:fare] ( APPEND AND ( APPEND flight  ( [a:flight] ) ) ( APPEND class_type  $class-type4 ) ) ) }
    | ( how much does <fare-basis-code-descr> :fare-basis-code-descr4 cost ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [b:fare] ) ) ) ) ( WRITE context/fare [b:fare] ( APPEND AND ( APPEND fare_basis_code  $fare-basis-code-descr4 ) ( APPEND flight  ( [a:flight] ) ) ) ) }
    | ( how much does <fare-descr> :fare-descr4 cost on each of these <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [b:fare] ) ) ) ) ( WRITE context/fare [b:fare] ( APPEND AND $fare-descr4 ( APPEND flight  ( [a:flight] ) ) ) ) }
    | ( how much does that cost ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [b:fare] ) ) ) ) ( WRITE context/fare [b:fare] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( how much is <fare-basis-code-descr> :fare-basis-code-descr4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [b:fare] ) ) ) ) ( WRITE context/fare [b:fare] ( APPEND AND ( APPEND fare_basis_code  $fare-basis-code-descr4 ) ( APPEND flight  ( [a:flight] ) ) ) ) }
    | ( how much is <fare-descr> :fare-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  [a:fare] $fare-descr4 ) ) ) }
    | ( how much is <flight-descr> :flight-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [a:fare] ) ) ) ) ( WRITE context/fare [a:fare] ( APPEND flight  $flight-descr4 ) ) }
    | ( how much is <flight-descr> :flight-descr4 <with-flight> :with-flight5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [a:fare] ) ) ) ) ( WRITE context/flight [b:flight] ( APPEND AND $flight-descr4 $with-flight5 ) ) ( WRITE context/fare [a:fare] ( APPEND flight  ( [b:flight] ) ) ) }
    | ( how much is <flight-descr> :flight-descr4 how much does it cost ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [a:fare] ) ) ) ) ( WRITE context/fare [a:fare] ( APPEND flight  $flight-descr4 ) ) }
    | ( how much will it cost <flight-mod-phrase> :flight-mod-phrase6 flying <flight-descr> :flight-descr8 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [a:fare] ) ) ) ) ( WRITE context/flight [b:flight] ( APPEND AND $flight-mod-phrase6 $flight-descr8 ) ) ( WRITE context/fare [a:fare] ( APPEND flight  ( [b:flight] ) ) ) }
    | ( how much will that cost ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [b:fare] ) ) ) ) ( WRITE context/fare [b:fare] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( how much would <fare-descr> :fare-descr4 cost ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  [b:fare] $fare-descr4 ) ) ) }
    | ( what <fare> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [b:fare] ) ) ) ) ( WRITE context/fare [b:fare] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( what would be <fare-descr> :fare-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  [a:fare] $fare-descr4 ) ) ) }
    | ( which is <fare-descr> :fare-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [a:fare] ) ) ) ) ( WRITE context/fare [a:fare] $fare-descr3 ) }
    | ( which of <det> <fare> is the <cheapest> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [b:fare] ) ) ) ) ( WRITE context/fare [b:fare] ( APPEND AND ( APPEND super/min/one_direction_cost/fare  flight ) ( APPEND flight  ( [a:flight] ) ) ) ) }
    | ( which of <det> <fare> is the <highest> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  fare.fare_id ) ( APPEND object  fare ) ( APPEND specs/fare  ( [b:fare] ) ) ) ) ( WRITE context/fare [b:fare] ( APPEND AND ( APPEND super/max/one_direction_cost/fare  flight ) ( APPEND flight  ( [a:flight] ) ) ) ) }
  ) .

<find-flight-and-fare-query>
  ::= ( ( <find-flight> <flight-mod-phrase> :flight-mod-phrase2 how much is <fare-descr> :fare-descr6 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,  fare.fare_id ) ( APPEND object/flight,/flight_fare,  fare ) ( APPEND AND ( APPEND specs/flight  $flight-mod-phrase2 ) ( APPEND specs/fare  $fare-descr6 ) ( APPEND join/flight.flight_id  flight_fare.flight_id ) ( APPEND join/fare.fare_id  flight_fare.fare_id ) ) ) ) ( WRITE context/flight ( UPDATE ( APPEND fare  $fare-descr6 ) $flight-mod-phrase2 ) ) ( WRITE context/fare ( UPDATE $fare-descr6 ( APPEND flight  $flight-mod-phrase2 ) ) ) }
    | ( <find> <det> <cheapest> <flight> with <fare-descr> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [d:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,  fare.fare_id ) ( APPEND object/flight,/flight_fare,  fare ) ( APPEND AND ( APPEND specs/flight  ( [b:flight] ) ) ( APPEND specs/fare  ( [c:fare] ) ) ( APPEND join/flight.flight_id  flight_fare.flight_id ) ( APPEND join/fare.fare_id  flight_fare.fare_id ) ) ) ) ( WRITE context/flight [b:flight] ( APPEND AND [a:flight] ( APPEND fare  ( [c:fare] ) ) ) ) ( WRITE context/fare [c:fare] ( APPEND AND ( APPEND super/min/one_direction_cost/fare  flight ) ( APPEND flight  ( [a:flight] ) ) ) ) }
    | ( <find> <fare-descr> :fare-descr2 as well ) { ( READ context/flight ( [a:flight] ) ) ( READ context/fare ( [e:fare] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,  fare.fare_id ) ( APPEND object/flight,/flight_fare,  fare ) ( APPEND AND ( APPEND specs/flight  ( [b:flight] ) ) ( APPEND specs/fare  ( [d:fare] ) ) ( APPEND join/flight.flight_id  flight_fare.flight_id ) ( APPEND join/fare.fare_id  flight_fare.fare_id ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND fare  $fare-descr2 ) ) ) ( WRITE context/fare [d:fare] ( UPDATE ( [e:fare] ) $fare-descr2 ) ) }
    | ( <find> <flight-descr> :flight-descr2 <find> <fare-descr> :fare-descr4 <flight-mod-phrase> :flight-mod-phrase5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,  fare.fare_id ) ( APPEND object/flight,/flight_fare,  fare ) ( APPEND AND ( APPEND specs/flight  ( APPEND AND $flight-descr2 $flight-mod-phrase5 ) ) ( APPEND specs/fare  $fare-descr4 ) ( APPEND join/flight.flight_id  flight_fare.flight_id ) ( APPEND join/fare.fare_id  flight_fare.fare_id ) ) ) ) ( WRITE context/flight ( UPDATE ( APPEND fare  $fare-descr4 ) ( UPDATE $flight-descr2 $flight-mod-phrase5 ) ) ) ( WRITE context/fare ( UPDATE $fare-descr4 ( APPEND flight  ( UPDATE $flight-descr2 $flight-mod-phrase5 ) ) ) ) }
    | ( <find> <flight-descr> :flight-descr2 along with <fare-descr> :fare-descr5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,  fare.fare_id ) ( APPEND object/flight,/flight_fare,  fare ) ( APPEND AND ( APPEND specs/flight  $flight-descr2 ) ( APPEND specs/fare  $fare-descr5 ) ( APPEND join/flight.flight_id  flight_fare.flight_id ) ( APPEND join/fare.fare_id  flight_fare.fare_id ) ) ) ) ( WRITE context/flight ( UPDATE ( APPEND fare  $fare-descr5 ) $flight-descr2 ) ) ( WRITE context/fare ( UPDATE $fare-descr5 ( APPEND flight  $flight-descr2 ) ) ) }
    | ( <find> <flight-descr> :flight-descr2 and <fare> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,  fare.fare_id ) ( APPEND object/flight,/flight_fare,  fare ) ( APPEND AND ( APPEND specs/flight  $flight-descr2 ) ( APPEND join/flight.flight_id  flight_fare.flight_id ) ( APPEND join/fare.fare_id  flight_fare.fare_id ) ) ) ) ( WRITE context/flight $flight-descr2 ) }
    | ( <find> <flight-descr> :flight-descr2 and <fare> <flight-mod-phrase> :flight-mod-phrase5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,  fare.fare_id ) ( APPEND object/flight,/flight_fare,  fare ) ( APPEND AND ( APPEND specs/flight  ( APPEND AND $flight-descr2 $flight-mod-phrase5 ) ) ( APPEND join/flight.flight_id  flight_fare.flight_id ) ( APPEND join/fare.fare_id  flight_fare.fare_id ) ) ) ) ( WRITE context/flight ( UPDATE $flight-descr2 $flight-mod-phrase5 ) ) }
    | ( <find> <flight-descr> :flight-descr2 and <find> <fare-descr> :fare-descr5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,  fare.fare_id ) ( APPEND object/flight,/flight_fare,  fare ) ( APPEND AND ( APPEND specs/flight  $flight-descr2 ) ( APPEND specs/fare  $fare-descr5 ) ( APPEND join/flight.flight_id  flight_fare.flight_id ) ( APPEND join/fare.fare_id  flight_fare.fare_id ) ) ) ) ( WRITE context/flight ( UPDATE ( APPEND fare  $fare-descr5 ) $flight-descr2 ) ) ( WRITE context/fare ( UPDATE $fare-descr5 ( APPEND flight  $flight-descr2 ) ) ) }
    | ( <find> <flight-descr> :flight-descr2 and their <fare> <flight-mod-phrase> :flight-mod-phrase6 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,  fare.fare_id ) ( APPEND object/flight,/flight_fare,  fare ) ( APPEND AND ( APPEND specs/flight  ( APPEND AND $flight-descr2 $flight-mod-phrase6 ) ) ( APPEND join/flight.flight_id  flight_fare.flight_id ) ( APPEND join/fare.fare_id  flight_fare.fare_id ) ) ) ) ( WRITE context/flight ( UPDATE $flight-descr2 $flight-mod-phrase6 ) ) }
    | ( <find> <flight-descr> :flight-descr2 with <det> <fare> <flight-mod-phrase> :flight-mod-phrase6 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,  fare.fare_id ) ( APPEND object/flight,/flight_fare,  fare ) ( APPEND AND ( APPEND specs/flight  ( APPEND AND $flight-descr2 $flight-mod-phrase6 ) ) ( APPEND join/flight.flight_id  flight_fare.flight_id ) ( APPEND join/fare.fare_id  flight_fare.fare_id ) ) ) ) ( WRITE context/flight ( UPDATE $flight-descr2 $flight-mod-phrase6 ) ) ( WRITE context/fare ( APPEND flight  ( UPDATE $flight-descr2 $flight-mod-phrase6 ) ) ) }
    | ( <find> <flight-descr> :flight-descr2 with <fare-descr> :fare-descr4 <with-flight> :with-flight5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,  fare.fare_id ) ( APPEND object/flight,/flight_fare,  fare ) ( APPEND AND ( APPEND specs/flight  ( APPEND AND $flight-descr2 $with-flight5 ) ) ( APPEND specs/fare  $fare-descr4 ) ( APPEND join/flight.flight_id  flight_fare.flight_id ) ( APPEND join/fare.fare_id  flight_fare.fare_id ) ) ) ) ( WRITE context/flight ( UPDATE ( APPEND fare  $fare-descr4 ) ( UPDATE $flight-descr2 $with-flight5 ) ) ) ( WRITE context/fare ( UPDATE $fare-descr4 ( APPEND flight  ( UPDATE $flight-descr2 $with-flight5 ) ) ) ) }
    | ( <flight-descr> :flight-descr1 and <fare-descr> :fare-descr3 <flight-mod-phrase> :flight-mod-phrase4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,  fare.fare_id ) ( APPEND object/flight,/flight_fare,  fare ) ( APPEND AND ( APPEND specs/flight  ( APPEND AND $flight-descr1 $flight-mod-phrase4 ) ) ( APPEND specs/fare  $fare-descr3 ) ( APPEND join/flight.flight_id  flight_fare.flight_id ) ( APPEND join/fare.fare_id  flight_fare.fare_id ) ) ) ) ( WRITE context/flight ( UPDATE ( APPEND fare  $fare-descr3 ) ( UPDATE $flight-descr1 $flight-mod-phrase4 ) ) ) ( WRITE context/fare ( UPDATE $fare-descr3 ( APPEND flight  ( UPDATE $flight-descr1 $flight-mod-phrase4 ) ) ) ) }
    | ( <flight-descr> :flight-descr1 and <fare-param> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,  fare.fare_id ) ( APPEND object/flight,/flight_fare,  fare ) ( APPEND AND ( APPEND specs/flight  $flight-descr1 ) ( APPEND join/flight.flight_id  flight_fare.flight_id ) ( APPEND join/fare.fare_id  flight_fare.fare_id ) ) ) ) ( WRITE context/flight $flight-descr1 ) ( WRITE context/fare ( APPEND flight  $flight-descr1 ) ) }
    | ( <flight-mod-phrase> :flight-mod-phrase1 <det> nonstop <flight-mod-phrase> :flight-mod-phrase4 and <fare-param> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,  fare.fare_id ) ( APPEND object/flight,/flight_fare,  fare ) ( APPEND AND ( APPEND specs/flight  ( APPEND AND $flight-mod-phrase1 $flight-mod-phrase4 ( APPEND num_stops/range  0 ) ) ) ( APPEND join/flight.flight_id  flight_fare.flight_id ) ( APPEND join/fare.fare_id  flight_fare.fare_id ) ) ) ) ( WRITE context/flight ( UPDATE $flight-mod-phrase4 ( APPEND num_stops/range  0 ) ) ) ( WRITE context/fare ( APPEND flight  ( UPDATE $flight-mod-phrase4 ( APPEND num_stops/range  0 ) ) ) ) }
    | ( <find> <fare-descr> :fare-descr2 and <flight-descr> :flight-descr4 <flight-mod-phrase> :flight-mod-phrase5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,  fare.fare_id ) ( APPEND object/flight,/flight_fare,  fare ) ( APPEND AND ( APPEND specs/flight  ( APPEND AND $flight-descr4 $flight-mod-phrase5 ) ) ( APPEND specs/fare  $fare-descr2 ) ( APPEND join/flight.flight_id  flight_fare.flight_id ) ( APPEND join/fare.fare_id  flight_fare.fare_id ) ) ) ) ( WRITE context/flight ( UPDATE ( APPEND fare  $fare-descr2 ) ( UPDATE $flight-descr4 $flight-mod-phrase5 ) ) ) ( WRITE context/fare ( UPDATE $fare-descr2 ( APPEND flight  ( UPDATE $flight-descr4 $flight-mod-phrase5 ) ) ) ) }
    | ( <fare-descr> :fare-descr1 and <flight-descr> :flight-descr3 <flight-mod-phrase> :flight-mod-phrase4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,  fare.fare_id ) ( APPEND object/flight,/flight_fare,  fare ) ( APPEND AND ( APPEND specs/flight  ( APPEND AND $flight-descr3 $flight-mod-phrase4 ) ) ( APPEND specs/fare  $fare-descr1 ) ( APPEND join/flight.flight_id  flight_fare.flight_id ) ( APPEND join/fare.fare_id  flight_fare.fare_id ) ) ) ) ( WRITE context/flight ( UPDATE ( APPEND fare  $fare-descr1 ) ( UPDATE $flight-descr3 $flight-mod-phrase4 ) ) ) ( WRITE context/fare ( UPDATE $fare-descr1 ( APPEND flight  ( UPDATE $flight-descr3 $flight-mod-phrase4 ) ) ) ) }
    | ( with <fare-param> ) { ( READ context/flight ( [a:flight] ) ) ( READ context/fare ( [b:fare] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_id,  fare.fare_id ) ( APPEND object/flight,/flight_fare,  fare ) ( APPEND AND ( APPEND specs/flight  ( [a:flight] ) ) ( APPEND specs/fare  ( [b:fare] ) ) ( APPEND join/flight.flight_id  flight_fare.flight_id ) ( APPEND join/fare.fare_id  flight_fare.fare_id ) ) ) ) }
  ) .

<find-flight-and-return-query>
  ::= ( ( <find-flight> <flight-mod-phrase> :flight-mod-phrase2 and returning <flight-mod-phrase> :flight-mod-phrase5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND OR  $flight-mod-phrase2 ( UPDATE ( RETURN_FLIGHT $flight-mod-phrase2 ) $flight-mod-phrase5 ) ) ) }
    | ( <find> <flight-descr> :flight-descr2 <pron-rel> return <flight-mod-phrase> :flight-mod-phrase5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND OR  $flight-descr2 ( APPEND AND ( RETURN_FLIGHT $flight-descr2 ) $flight-mod-phrase5 ) ) ) }
    | ( <find> <flight-descr> :flight-descr2 and back ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND OR  $flight-descr2 ( RETURN_FLIGHT $flight-descr2 ) ) ) }
    | ( <find> <flight-descr> :flight-descr2 and returning <flight-mod-phrase> :flight-mod-phrase5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND OR  $flight-descr2 ( APPEND AND ( RETURN_FLIGHT $flight-descr2 ) $flight-mod-phrase5 ) ) ) }
    | ( <find> <flight-descr> :flight-descr2 returning <flight-mod-phrase> :flight-mod-phrase4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND OR  $flight-descr2 ( APPEND AND ( RETURN_FLIGHT $flight-descr2 ) $flight-mod-phrase4 ) ) ) }
    | ( <find> <flight-descr> :flight-descr2 then returning <flight-mod-phrase> :flight-mod-phrase5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND OR  $flight-descr2 ( APPEND AND ( RETURN_FLIGHT $flight-descr2 ) $flight-mod-phrase5 ) ) ) }
    | ( <flight-wh> :flight-wh1 <flight-pred> :flight-pred2 returning <flight-mod-phrase> :flight-mod-phrase4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND OR  ( APPEND AND $flight-wh1 $flight-pred2 ) ( UPDATE ( RETURN_FLIGHT ( APPEND AND $flight-wh1 $flight-pred2 ) ) $flight-mod-phrase4 ) ) ) }
  ) .

<find-flight-and-stops-query>
  ::= ( ( <city-name> :city-name1 <flight-stop> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight_stop.flight_id,  flight_stop.stop_number ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  ( APPEND AND ( APPEND flight  ( [a:flight] ) ) ( APPEND city  ( [b:city] ) ) ) ) ) ) ( WRITE context/city [b:city] ( APPEND city_name  $city-name1 ) ) }
  ) .

<find-flight-arrival-time-query>
  ::= ( ( <time-wh> do <flight-descr> :flight-descr3 <flight-pred-to-airport> :flight-pred-to-airport4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.arrival_time ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND AND $flight-descr3 $flight-pred-to-airport4 ) ) }
    | ( <time-wh> does <flight-descr> :flight-descr3 <flight-pred-to-airport> :flight-pred-to-airport4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.arrival_time ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND AND $flight-descr3 $flight-pred-to-airport4 ) ) }
    | ( <time-wh> would <flight-descr> :flight-descr3 <flight-pred-to-airport> :flight-pred-to-airport4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.arrival_time ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND AND $flight-descr3 $flight-pred-to-airport4 ) ) }
    | ( <find> <flight-arrival-time-param> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.arrival_time ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) }
    | ( <flight-arrival-time-param> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.arrival_time ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) }
    | ( <find> <flight-arrival-time-param> <with-flight> :with-flight3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.arrival_time ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] $with-flight3 ) }
    | ( <flight-arrival-time-param> <with-flight> :with-flight2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.arrival_time ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] $with-flight2 ) }
  ) .

<find-flight-departure-time-query>
  ::= ( ( <time-wh> are <flight-descr> :flight-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.departure_time ) ( APPEND object  flight ) ( APPEND specs/flight  $flight-descr3 ) ) ) }
    | ( <time-wh> is <flight-descr> :flight-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.departure_time ) ( APPEND object  flight ) ( APPEND specs/flight  $flight-descr3 ) ) ) }
    | ( <time-wh> do <flight-descr> :flight-descr3 <flight-pred-from-airport> :flight-pred-from-airport4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.departure_time ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND AND $flight-descr3 $flight-pred-from-airport4 ) ) }
    | ( <time-wh> does <flight-descr> :flight-descr3 <flight-pred-from-airport> :flight-pred-from-airport4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.departure_time ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND AND $flight-descr3 $flight-pred-from-airport4 ) ) }
    | ( <time-wh> would <flight-descr> :flight-descr3 <flight-pred-from-airport> :flight-pred-from-airport4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.departure_time ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND AND $flight-descr3 $flight-pred-from-airport4 ) ) }
    | ( <time-wh> do <flight-descr> :flight-descr3 leave ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.departure_time ) ( APPEND object  flight ) ( APPEND specs/flight  $flight-descr3 ) ) ) }
    | ( <time-wh> is there <flight-descr> :flight-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.departure_time ) ( APPEND object  flight ) ( APPEND specs/flight  $flight-descr4 ) ) ) }
  ) .

<find-flight-number-query>
  ::= ( ( <find> <flight-number-param> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_number ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) }
    | ( <flight-number-param> :flight-number-param1 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_number ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-number-param1 ) ) }
    | ( <find> <flight-number-param> :flight-number-param2 <flight-mod-phrase> :flight-mod-phrase3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_number ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND AND $flight-number-param2 $flight-mod-phrase3 ) ) }
    | ( <flight-number-param> :flight-number-param1 <flight-mod-phrase> :flight-mod-phrase2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_number ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND AND $flight-number-param1 $flight-mod-phrase2 ) ) }
    | ( <find> <flight-number-param> :flight-number-param2 <with-flight> :with-flight3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_number ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND AND $flight-number-param2 $with-flight3 ) ) }
    | ( <flight-number-param> :flight-number-param1 <with-flight> :with-flight2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_number ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND AND $flight-number-param1 $with-flight2 ) ) }
  ) .

<find-flight-query>
  ::= ( ( do <flight-descr> :flight-descr2 <depart> everyday ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-descr2 ( APPEND flight_days  "DAILY" ) ) ) }
    | ( does <flight-descr> :flight-descr2 <depart> everyday ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-descr2 ( APPEND flight_days  "DAILY" ) ) ) }
    | ( do <flight-descr> :flight-descr2 <flight-pred> :flight-pred3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-descr2 $flight-pred3 ) ) }
    | ( does <flight-descr> :flight-descr2 <flight-pred> :flight-pred3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-descr2 $flight-pred3 ) ) }
    | ( <airline-param> is <airline-descr> :airline-descr3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND airline  $airline-descr3 ) ) ) ( WRITE context/airline $airline-descr3 ) }
    | ( <cheapest> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context flight [b:flight] ( APPEND AND [a:flight] ( APPEND fare  ( APPEND AND ( APPEND super/min/round_trip_cost/fare  flight ) ( APPEND flight  ( [a:flight] ) ) ) ) ) ) }
    | ( <cheapest> <return-type> :return-type2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( APPEND AND [a:flight] ( APPEND fare  ( APPEND AND ( APPEND super/min/round_trip_cost/fare  flight ) $return-type2 ( APPEND flight  ( [a:flight] ) ) ) ) ) ) }
    | ( <cheapest> <return-type> :return-type2 <flight-mod-phrase> :flight-mod-phrase3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-mod-phrase3 ( APPEND fare  ( APPEND AND ( APPEND super/min/round_trip_cost/fare  flight ) $return-type2 ( APPEND flight  $flight-mod-phrase3 ) ) ) ) ) ) }
    | ( <earliest> nonstop ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND ( APPEND super/min/departure_time  flight ) ( APPEND num_stops/range  0 ) ) ) ) }
    | ( <find-flight> <flight-mod-phrase> :flight-mod-phrase2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase2 ) ) }
    | ( <find-flight> <flight-mod-phrase> :flight-mod-phrase2 <pre-filler> <find> <flight-descr> :flight-descr5 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-mod-phrase2 $flight-descr5 ) ) ) }
    | ( <find-flight> <flight-mod-phrase> :flight-mod-phrase2 and <flight-pred> :flight-pred4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-mod-phrase2 $flight-pred4 ) ) ) }
    | ( <find-flight> <with-flight> :with-flight2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  $with-flight2 ) ) ) }
    | ( <find-meal> :find-meal1 on the <ordinal> leg or the <ordinal> leg ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( APPEND AND ( APPEND leg  ( [a:flight] ) ) ( APPEND meal  $find-meal1 ) ) ) }
    | ( <find> <date-day-descr> :date-day-descr2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/date_day $date-day-descr2 ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND flight_days  $date-day-descr2 ) ) ) }
    | ( <find> <det> <earliest> arrival <to-airport> :to-airport5 <with-flight> :with-flight6 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND ( APPEND super/min/arrival_time  flight ) $to-airport5 $with-flight6 ) ) ) }
    | ( <find> <flight-descr> :flight-descr2 <departure> ) { ( READ context/airport ( [b:airport] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  [a:flight] ( APPEND AND ( APPEND from_airport  ( [b:airport] ) ) $flight-descr2 ) ) ) ) ( WRITE context/flight ( [a:flight] ) ) }
    | ( <find> <flight-descr> :flight-descr2 <find-flight> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  [a:flight] $flight-descr2 ) ) ) }
    | ( <find> <flight-descr> :flight-descr2 <find> <flight-descr> :flight-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND AND $flight-descr2 $flight-descr4 ) ) }
    | ( <find> <flight-descr> :flight-descr2 <i-want> <fare-descr> :fare-descr4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-descr2 ( APPEND fare  ( APPEND AND ( APPEND flight  $flight-descr2 ) $fare-descr4 ) ) ) ) ) }
    | ( <find> <flight-descr> :flight-descr2 <pron-rel> are <flight-descr> :flight-descr5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND AND $flight-descr2 $flight-descr5 ) ) }
    | ( <find> <flight-descr> :flight-descr2 <pron-rel> return <flight-mod-phrase> :flight-mod-phrase5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND AND $flight-descr2 $flight-mod-phrase5 ) ) }
    | ( <find> <flight-descr> :flight-descr2 and <find-flight> <flight-mod-phrase> :flight-mod-phrase5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND OR  $flight-descr2 $flight-mod-phrase5 ) ) }
    | ( <find> <flight-descr> :flight-descr2 and <find> <flight-descr> :flight-descr5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND OR  $flight-descr2 $flight-descr5 ) ) }
    | ( <find> <flight-descr> :flight-descr2 and <flight-descr> :flight-descr4 <arrival> at the same time ) { ( VALUE ( APPEND OR  $flight-descr2 $flight-descr4 ) ) ( WRITE context/flight ( APPEND OR  $flight-descr2 $flight-descr4 ) ) }
    | ( <find> <flight-descr> :flight-descr2 and <flight-pred> :flight-pred4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-descr2 $flight-pred4 ) ) }
    | ( <find> <flight-descr> :flight-descr2 returning <flight-mod-phrase> :flight-mod-phrase4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND AND $flight-descr2 $flight-mod-phrase4 ) ) }
    | ( <find> <flight-descr> :flight-descr2 what's available for that ) { ( VALUE [a:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  $flight-descr2 ) ) ) }
    | ( <find> <flight-wh> :flight-wh2 <flight-pred> :flight-pred3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-wh2 $flight-pred3 ) ) }
    | ( <find> <flight-wh> :flight-wh2 are available <flight-mod-phrase> :flight-mod-phrase5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-wh2 $flight-mod-phrase5 ) ) }
    | ( <find> departures <time-descr> :time-descr3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND departure_time  $time-descr3 ) ) ) }
    | ( <find> my choices <with-flight> :with-flight4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $with-flight4 ) ) }
    | ( <find> schedules <flight-mod-phrase> :flight-mod-phrase3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase3 ) ) }
    | ( <find> that <flight-mod-phrase> :flight-mod-phrase3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase3 ) ) }
    | ( <find> the <cheapest> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND fare  ( APPEND AND ( APPEND super/min/round_trip_cost/fare  flight ) ( APPEND flight  ( [a:flight] ) ) ) ) ) ) }
    | ( <find> the <cheapest> way to travel <flight-mod-phrase> :flight-mod-phrase7 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-mod-phrase7 ( APPEND fare  ( APPEND AND ( APPEND super/min/round_trip_cost/fare  flight ) ( APPEND flight  ( UPDATE ( [a:flight] ) $flight-mod-phrase7 ) ) ) ) ) ) ) }
    | ( <find> the <cheapest> you have on that ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND fare  ( APPEND AND ( APPEND super/min/round_trip_cost/fare  flight ) ( APPEND flight  ( [a:flight] ) ) ) ) ) ) }
    | ( <find> the <cheapest> you have ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND fare  ( APPEND AND ( APPEND super/min/round_trip_cost/fare  flight ) ( APPEND flight  ( [a:flight] ) ) ) ) ) ) }
    | ( <find> the <highest> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND fare  ( APPEND AND ( APPEND super/max/round_trip_cost/fare  flight ) ( APPEND flight  ( [a:flight] ) ) ) ) ) ) }
    | ( <find> the <highest> way to travel <flight-mod-phrase> :flight-mod-phrase7 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-mod-phrase7 ( APPEND fare  ( APPEND AND ( APPEND super/max/round_trip_cost/fare  flight ) ( APPEND flight  ( UPDATE ( APPEND AND [a:flight] $flight-mod-phrase7 ) ) ) ) ) ) ) ) }
    | ( <find> the <highest> you have on that ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND fare  ( APPEND AND ( APPEND super/max/round_trip_cost/fare  flight ) ( APPEND flight  ( [a:flight] ) ) ) ) ) ) }
    | ( <find> the <highest> you have ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND fare  ( APPEND AND ( APPEND super/max/round_trip_cost/fare  flight ) ( APPEND flight  ( [a:flight] ) ) ) ) ) ) }
    | ( <find> those <flight-mod-phrase> :flight-mod-phrase3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase3 ) ) }
    | ( <find> those <pron-rel> are <flight-mod-phrase> :flight-mod-phrase5 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase5 ) ) }
    | ( <flight-adj-list> :flight-adj-list1 schedule <flight-mod-phrase> :flight-mod-phrase3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-adj-list1 $flight-mod-phrase3 ) ) ) }
    | ( <flight-descr> :flight-descr1 <flight-pred> :flight-pred2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-descr1 $flight-pred2 ) ) }
    | ( <flight-descr> :flight-descr1 does that <flight-pred> :flight-pred4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-descr1 $flight-pred4 ) ) ) }
    | ( <flight-mod-intro> :flight-mod-intro1 <find-flight> <flight-mod-phrase> :flight-mod-phrase3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-mod-intro1 $flight-mod-phrase3 ) ) ) }
    | ( <flight-mod-intro> :flight-mod-intro1 <find> <flight-descr> :flight-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-descr3 $flight-mod-intro1 ) ) }
    | ( <flight-mod-intro> :flight-mod-intro1 <find> any <flight> <flight-mod-phrase> :flight-mod-phrase5 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-mod-intro1 $flight-mod-phrase5 ) ) ) }
    | ( <flight-mod-intro> :flight-mod-intro1 <flight-wh> :flight-wh2 <flight-pred> :flight-pred3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-wh2 $flight-mod-intro1 $flight-pred3 ) ) ) }
    | ( <flight-mod-intro> :flight-mod-intro1 <i-want> to return home <flight-mod-phrase> :flight-mod-phrase6 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( RETURN_FLIGHT ( [a:flight] ) ) ( APPEND AND $flight-mod-intro1 $flight-mod-phrase6 ) ) ) }
    | ( <flight-mod-phrase> :flight-mod-phrase1 <fare-descr> :fare-descr2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-mod-phrase1 ( APPEND fare  $fare-descr2 ) ) ) ) }
    | ( <flight-mod-phrase> :flight-mod-phrase1 <flight-pred> :flight-pred2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-mod-phrase1 $flight-pred2 ) ) ) }
    | ( <flight-mod-phrase> :flight-mod-phrase1 and <flight-pred> :flight-pred3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-mod-phrase1 $flight-pred3 ) ) ) }
    | ( <flight-pred> :flight-pred1 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-pred1 ) ) }
    | ( <flight-pred> :flight-pred1 and <flight-mod-phrase> :flight-mod-phrase3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-pred1 $flight-mod-phrase3 ) ) ) }
    | ( <flight-wh> :flight-wh1 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  [a:flight] $flight-wh1 ) ) ) }
    | ( <flight-wh> :flight-wh1 <depart> and <arrive> at <airport-name> :airport-name6 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/airport ( APPEND airport_code  $airport-name6 ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-wh1 ( APPEND OR  ( APPEND from_airport/airport_code  $airport-name6 ) ( APPEND to_airport/airport_code  $airport-name6 ) ) ) ) }
    | ( <flight-wh> :flight-wh1 <flight-pred> :flight-pred2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-wh1 $flight-pred2 ) ) }
    | ( <flight-wh> :flight-wh1 are <cost-upper-bound> :cost-upper-bound3 round trip ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-wh1 ( APPEND fare/round_trip_cost  $cost-upper-bound3 ) ) ) }
    | ( <flight-wh> :flight-wh1 are <flight-descr> :flight-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-wh1 $flight-descr3 ) ) }
    | ( <flight-wh> :flight-wh1 is <flight-descr> :flight-descr3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-wh1 $flight-descr3 ) ) ) }
    | ( <flight-wh> :flight-wh1 are there <flight-mod-phrase> :flight-mod-phrase4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-wh1 $flight-mod-phrase4 ) ) }
    | ( <flight-wh> :flight-wh1 do you have <flight-mod-phrase> :flight-mod-phrase5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-wh1 $flight-mod-phrase5 ) ) }
    | ( <flight-wh> have the smallest seating capacity ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND aircraft  ( APPEND AND ( APPEND super/min/capacity/flight  aircraft ) ( APPEND flight  ( [a:flight] ) ) ) ) ) ) }
    | ( <flight-wh> is shortest ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND super/min/time_elapsed  flight ) ) ) }
    | ( <flight-wh> :flight-wh1 is that ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  [a:flight] $flight-wh1 ) ) ) }
    | ( <flight-wh> :flight-wh1 return <flight-mod-phrase> :flight-mod-phrase3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE ( RETURN_FLIGHT $flight-wh1 ) $flight-mod-phrase3 ) ) }
    | ( <from-airport> :from-airport1 and <find-flight> <flight-mod-phrase> :flight-mod-phrase4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $from-airport1 $flight-mod-phrase4 ) ) ) }
    | ( <highest> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( APPEND AND [a:flight] ( APPEND fare  ( APPEND AND ( APPEND super/max/one_direction_cost/fare  flight ) ( APPEND flight  ( [a:flight] ) ) ) ) ) ) }
    | ( <highest> <return-type> :return-type2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( APPEND AND [a:flight] ( APPEND fare  ( APPEND AND ( APPEND super/max/round_trip_cost/fare  flight ) $return-type2 ( APPEND flight  ( [a:flight] ) ) ) ) ) ) }
    | ( <highest> <return-type> :return-type2 <flight-mod-phrase> :flight-mod-phrase3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-mod-phrase3 ( APPEND fare  ( APPEND AND ( APPEND super/max/round_trip_cost/fare  flight ) $return-type2 ( APPEND flight  $flight-mod-phrase3 ) ) ) ) ) ) }
    | ( <i-want> to <know> if there are any <flight-adj-list> :flight-adj-list8 <flight> <flight-mod-phrase> :flight-mod-phrase10 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-adj-list8 $flight-mod-phrase10 ) ) ) }
    | ( <i-want> to arrange for <cardinal> friends to fly <to-airport> :to-airport9 <on-day> :on-day10 <time-descr> :time-descr11 one of the people is coming <from-airport> :from-airport18 and the other is coming <from-airport> :from-airport24 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND AND $to-airport9 $on-day10 ( APPEND departure_time  $time-descr11 ) ( APPEND OR  $from-airport18 $from-airport24 ) ) ) }
    | ( <i-want> to book <flight-descr> :flight-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  [a:flight] $flight-descr4 ) ) ) }
    | ( <i-want> to eat <meal-descr> :meal-descr4 while i travel <find-meal> <with-flight> :with-flight9 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $with-flight9 ( APPEND meal  $meal-descr4 ) ) ) ) }
    | ( <i-want> to make <flight-descr> :flight-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  [a:flight] $flight-descr4 ) ) ) }
    | ( <i-want> to return <flight-mod-phrase> :flight-mod-phrase4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( RETURN_FLIGHT ( [a:flight] ) ) $flight-mod-phrase4 ) ) }
    | ( <i-want> to return home <flight-mod-phrase> :flight-mod-phrase5 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( RETURN_FLIGHT ( [a:flight] ) ) $flight-mod-phrase5 ) ) }
    | ( <i-want> to schedule <flight-descr> :flight-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  [a:flight] $flight-descr4 ) ) ) }
    | ( <latest> nonstop returning ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( RETURN_FLIGHT ( [a:flight] ) ) ( APPEND AND ( APPEND num_stops/range  0 ) ( APPEND super/max/departure_time  flight ) ) ) ) }
    | ( <show-ditrans> me from this list <flight-descr> :flight-descr6 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  [a:flight] $flight-descr6 ) ) ) }
    | ( <with-flight> :with-flight1 <find-flight> <flight-mod-phrase> :flight-mod-phrase3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $with-flight1 $flight-mod-phrase3 ) ) ) }
    | ( <with-flight> :with-flight1 <find> <flight-descr> :flight-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-descr3 $with-flight1 ) ) }
    | ( <with-flight> :with-flight1 <flight-wh> :flight-wh2 <flight-pred> :flight-pred3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-wh2 ( APPEND AND $with-flight1 $flight-pred3 ) ) ) }
    | ( <with-flight> :with-flight1 which have no <flight-stop> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $with-flight1 ( APPEND num_stops/range  0 ) ) ) ) }
    | ( <with-flight> :with-flight1 which is the <cheapest> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $with-flight1 ( APPEND fare/super/min/one_direction_cost/fare  flight ) ) ) ) }
    | ( <find> <flight-descr> :flight-descr2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  $flight-descr2 ) ) ) }
    | ( <flight-descr> :flight-descr1 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  $flight-descr1 ) ) ) }
    | ( <find> <flight-descr> :flight-descr2 <with-flight> :with-flight3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-descr2 $with-flight3 ) ) ) }
    | ( <flight-descr> :flight-descr1 <with-flight> :with-flight2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-descr1 $with-flight2 ) ) }
    | ( <find> <flight-descr> :flight-descr2 and <flight-descr> :flight-descr4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( APPEND OR  ( UPDATE ( [a:flight] ) $flight-descr2 ) ( UPDATE ( [a:flight] ) $flight-descr4 ) ) ) }
    | ( <flight-descr> :flight-descr1 and <flight-descr> :flight-descr3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( APPEND OR  ( UPDATE ( [a:flight] ) $flight-descr1 ) ( UPDATE ( [a:flight] ) $flight-descr3 ) ) ) }
    | ( <find> <flight-mod-phrase> :flight-mod-phrase2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase2 ) ) }
    | ( <flight-mod-phrase> :flight-mod-phrase1 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase1 ) ) }
    | ( any <flight> <flight-mod-phrase> :flight-mod-phrase3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase3 ) ) }
    | ( any of those <flight-mod-phrase> :flight-mod-phrase4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase4 ) ) }
    | ( are <flight-descr> :flight-descr2 <flight-mod-phrase> :flight-mod-phrase3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-descr2 $flight-mod-phrase3 ) ) }
    | ( are <flight-descr> :flight-descr2 available every day of the week ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-descr2 ( APPEND flight_days  "DAILY" ) ) ) }
    | ( are any of these <flight> nonstop ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND num_stops/range  0 ) ) ) }
    | ( are any of those <flight-mod-phrase> :flight-mod-phrase5 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase5 ) ) }
    | ( are any of those nonstop ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND num_stops/range  0 ) ) ) }
    | ( are both of these nonstop ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND num_stops/range  0 ) ) ) }
    | ( are there <flight-descr> :flight-descr3 <flight-mod-phrase> :flight-mod-phrase4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-descr3 $flight-mod-phrase4 ) ) }
    | ( are there any <flight-adj-list> :flight-adj-list4 <flight> <flight-mod-phrase> :flight-mod-phrase6 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-adj-list4 $flight-mod-phrase6 ) ) ) }
    | ( are there any <flight> <flight-mod-phrase> :flight-mod-phrase5 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase5 ) ) }
    | ( are there any later <flight> than <time> :time7 <flight-mod-phrase> :flight-mod-phrase8 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND ( APPEND departure_time/range/lower/>  $time7 ) $flight-mod-phrase8 ) ) ) }
    | ( are these <flight-adj-list> :flight-adj-list3 <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-adj-list3 ) ) }
    | ( are they <flight-adj-list> :flight-adj-list3 <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-adj-list3 ) ) }
    | ( are they all <flight-adj-list> :flight-adj-list4 <flight> <flight-mod-phrase> :flight-mod-phrase6 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-adj-list4 $flight-mod-phrase6 ) ) ) }
    | ( are they available <flight-mod-phrase> :flight-mod-phrase4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase4 ) ) }
    | ( book <flight-descr> :flight-descr2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-descr2 ) ) }
    | ( do all of them <flight-pred> :flight-pred5 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-pred5 ) ) }
    | ( do any of <det> <flight> <flight-pred> :flight-pred6 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-pred6 ) ) }
    | ( do either of these <flight> <flight-pred> :flight-pred6 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-pred6 ) ) }
    | ( do those all go <on-day> :on-day5 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/date_day $on-day5 ) ( WRITE context/flight [b:flight] ( APPEND AND [a:flight] $on-day5 ) ) }
    | ( does <airline-name> :airline-name2 <flight-pred> :flight-pred3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND ( APPEND airline  ( [d:airline] ) ) $flight-pred3 ) ) ) ( WRITE context/airline [d:airline] ( APPEND airline_code  $airline-name2 ) ) }
    | ( does <airline-name> :airline-name2 have <flight-descr> :flight-descr4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND ( APPEND airline  ( [d:airline] ) ) $flight-descr4 ) ) ) ( WRITE context/airline [d:airline] ( APPEND airline_code  $airline-name2 ) ) }
    | ( does <airline-name> :airline-name2 serve <city-descr> :city-descr4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/airline ( APPEND airline_code  $airline-name2 ) ) ( WRITE context/city $city-descr4 ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND ( APPEND airline/airline_code  $airline-name2 ) ( APPEND OR  ( APPEND from_city  $city-descr4 ) ( APPEND to_city  $city-descr4 ) ) ) ) ) }
    | ( does <det> other <flight-adj-list> :flight-adj-list4 <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-adj-list4 ) ) }
    | ( does <flight-descr> :flight-descr2 i guess <flight-descr> :flight-descr5 does that <flight-pred> :flight-pred8 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE ( APPEND AND $flight-descr2 $flight-descr5 ) $flight-pred8 ) ) }
    | ( does one of <flight-descr> :flight-descr4 <flight-pred> :flight-pred5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-descr4 $flight-pred5 ) ) }
    | ( how about the one <flight-mod-phrase> :flight-mod-phrase5 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase5 ) ) }
    | ( i have <cardinal> friends <pron-rel> would like to visit me <on-day> :on-day11 here in <city-descr> :city-descr14 one of them lives in <city-descr> :city-descr20 and the other lives in <city-descr> :city-descr26 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $on-day11 ( APPEND to_city  $city-descr14 ) ( APPEND OR  ( APPEND from_city  $city-descr20 ) ( APPEND from_city  $city-descr26 ) ) ) ) ) }
    | ( i have a friend living in <city-descr> :city-descr7 <pron-rel> would like to visit me here in <city-descr> :city-descr16 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/city ( APPEND OR  $city-descr7 $city-descr16 ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND ( APPEND from_city  $city-descr7 ) ( APPEND to_city  $city-descr16 ) ) ) ) }
    | ( i live in <city-descr> :city-descr4 and <find-flight> to <city-descr> :city-descr8 then <city-descr> :city-descr10 and then return home ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND OR  ( APPEND AND ( APPEND from_city  $city-descr4 ) ( APPEND to_city  $city-descr8 ) ) ( APPEND AND ( APPEND from_city  $city-descr8 ) ( APPEND to_city  $city-descr10 ) ) ( APPEND AND ( APPEND from_city  $city-descr10 ) ( APPEND to_city  $city-descr4 ) ) ) ) ) }
    | ( i need for the flight to <flight-pred> :flight-pred7 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-pred7 ) ) }
    | ( i wanna return <flight-mod-phrase> :flight-mod-phrase4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( RETURN_FLIGHT ( [a:flight] ) ) $flight-mod-phrase4 ) ) }
    | ( i wanna return home <flight-mod-phrase> :flight-mod-phrase5 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( RETURN_FLIGHT ( [a:flight] ) ) $flight-mod-phrase5 ) ) }
    | ( i'm calling <from-airport> :from-airport3 <i-want> to make <flight-descr> :flight-descr7 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-descr7 $from-airport3 ) ) }
    | ( instead of <city-descr> <may> i have the same <flight> <flight-mod-phrase> :flight-mod-phrase10 but <flight-mod-flight-stop> :flight-mod-flight-stop12 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-mod-phrase10 $flight-mod-flight-stop12 ) ) ) }
    | ( is <flight-descr> :flight-descr2 <flight-descr> :flight-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND AND $flight-descr2 $flight-descr3 ) ) }
    | ( is <flight-descr> :flight-descr2 <flight-mod-phrase> :flight-mod-phrase3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( UPDATE $flight-descr2 $flight-mod-phrase3 ) ) }
    | ( is <flight-descr> :flight-descr2 nonstop ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( APPEND AND $flight-descr2 ( APPEND num_stops/range  0 ) ) ) }
    | ( looking for <fare-descr> :fare-descr3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND fare  $fare-descr3 ) ) ) }
    | ( okay cancel <date-day-descr> what about <date-day-descr> :date-day-descr6 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/date_day $date-day-descr6 ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND flight_days  $date-day-descr6 ) ) ) }
    | ( only <flight-descr> :flight-descr2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context flight [b:flight] ( UPDATE ( [a:flight] ) $flight-descr2 ) ) }
    | ( only <flight-mod-phrase> :flight-mod-phrase2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase2 ) ) }
    | ( only those <flight-mod-phrase> :flight-mod-phrase3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase3 ) ) }
    | ( return <flight-mod-phrase> :flight-mod-phrase2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( RETURN_FLIGHT ( [a:flight] ) ) $flight-mod-phrase2 ) ) }
    | ( returning <flight-mod-phrase> :flight-mod-phrase2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( RETURN_FLIGHT ( [a:flight] ) ) $flight-mod-phrase2 ) ) }
    | ( schedule <flight-descr> :flight-descr2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  $flight-descr2 ) ) ) }
    | ( that <interval> :interval2 <find-flight> <flight-mod-phrase> :flight-mod-phrase4 ) { ( READ context/flight ( [a:flight] ) ) ( READ context/date_day [b:date_day] ) ( VALUE [d:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [c:flight] ) ) ) ) ( WRITE context/flight [c:flight] ( UPDATE ( [a:flight] ) ( APPEND AND ( APPEND flight_days  [b:date_day] ) ( APPEND departure_time  $interval2 ) $flight-mod-phrase4 ) ) ) }
    | ( what <i-want> :i-want2 to <know> is does <flight-descr> <flight-pred> :flight-pred8 that's <flight-descr> :flight-descr10 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $i-want2 $flight-pred8 $flight-descr10 ) ) ) }
    | ( which are the shortest ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND super/min/time_elapsed  flight ) ) ) }
    | ( which one's the <cheapest> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND fare  ( APPEND AND ( APPEND super/min/one-direction_cost/fare  flight ) ( APPEND flight  ( [a:flight] ) ) ) ) ) ) }
    | ( which one's <cheapest> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND fare  ( APPEND AND ( APPEND super/min/one-direction_cost/fare  flight ) ( APPEND flight  ( [a:flight] ) ) ) ) ) ) }
    | ( which one's the <highest> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND fare  ( APPEND AND ( APPEND super/max/one-direction_cost/fare  flight ) ( APPEND flight  ( [a:flight] ) ) ) ) ) ) }
    | ( which one's <highest> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( [b:flight] ) ) ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) ( APPEND fare  ( APPEND AND ( APPEND super/max/one-direction_cost/fare  flight ) ( APPEND flight  ( [a:flight] ) ) ) ) ) ) }
  ) .

<find-flight-schedule-query>
  ::= ( ( <find> <det> flight times <flight-mod-phrase> :flight-mod-phrase5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.arrival_time,  flight.departure_time ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] $flight-mod-phrase5 ) }
    | ( <find> times <flight-mod-phrase> :flight-mod-phrase3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.arrival_time,  flight.departure_time ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] $flight-mod-phrase3 ) }
    | ( <find> <departure-arrival-time> <flight-mod-phrase> :flight-mod-phrase3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.arrival_time,  flight.departure_time ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] $flight-mod-phrase3 ) }
    | ( <departure-arrival-time> <flight-mod-phrase> :flight-mod-phrase2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.arrival_time,  flight.departure_time ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] $flight-mod-phrase2 ) }
  ) .

<find-flight-stop-arrival-time-query>
  ::= ( ( <time-wh> does <flight-descr> :flight-descr3 <flight-pred-flight-stop> :flight-pred-flight-stop4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight_stop.arrival_time ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  [a:flight_stop] ) ) ) ( WRITE context/flight_stop [a:flight_stop] ( APPEND flight  ( [b:flight] ) ) ) ( WRITE context/flight [b:flight] ( APPEND AND $flight-descr3 $flight-pred-flight-stop4 ) ) }
  ) .

<find-flight-stop-query>
  ::= ( ( <find> <det> <flight-stop> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight_stop.stop_airport ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  [b:flight_stop] ) ) ) ( WRITE context/flight_stop [b:flight_stop] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( <find> <det> <flight-stop> <with-flight> :with-flight4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight_stop.stop_airport ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  [b:flight_stop] ) ) ) ( WRITE context/flight_stop [b:flight_stop] ( APPEND flight  $with-flight4 ) ) }
    | ( <find> <flight-stop> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight_stop.stop_airport ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  [b:flight_stop] ) ) ) ( WRITE context/flight_stop [b:flight_stop] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( <find> <flight-stop> <with-flight> :with-flight3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight_stop.stop_airport ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  [b:flight_stop] ) ) ) ( WRITE context/flight_stop [b:flight_stop] ( APPEND flight  $with-flight3 ) ) }
    | ( any <flight-stop> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight_stop.stop_airport ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  [b:flight_stop] ) ) ) ( WRITE context/flight_stop [b:flight_stop] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( any <flight-stop> <with-flight> :with-flight3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight_stop.stop_airport ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  [b:flight_stop] ) ) ) ( WRITE context/flight_stop [b:flight_stop] ( APPEND flight  $with-flight3 ) ) }
    | ( are there any <flight-stop> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight_stop.stop_airport ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  [b:flight_stop] ) ) ) ( WRITE context/flight_stop [b:flight_stop] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( are there any <flight-stop> <with-flight> :with-flight5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight_stop.stop_airport ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  [b:flight_stop] ) ) ) ( WRITE context/flight_stop [b:flight_stop] ( APPEND flight  $with-flight5 ) ) }
    | ( are these nonstop ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight_stop.stop_airport ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  [b:flight_stop] ) ) ) ( WRITE context/flight_stop [b:flight_stop] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( does <flight-descr> :flight-descr2 <flight-pred-flight-stop> :flight-pred-flight-stop3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight_stop.stop_airport ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  [b:flight_stop] ) ) ) ( WRITE context/flight_stop [b:flight_stop] ( APPEND flight  ( APPEND AND $flight-descr2 $flight-pred-flight-stop3 ) ) ) }
    | ( does <flight-descr> :flight-descr2 <stop> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight_stop.stop_airport ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  [b:flight_stop] ) ) ) ( WRITE context/flight_stop [b:flight_stop] ( APPEND flight  $flight-descr2 ) ) }
    | ( is this a nonstop ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight_stop.stop_airport ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  [b:flight_stop] ) ) ) ( WRITE context/flight_stop [b:flight_stop] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( stops where ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight_stop.stop_airport ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  [b:flight_stop] ) ) ) ( WRITE context/flight_stop [b:flight_stop] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( where do <flight-descr> :flight-descr3 <stop> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight_stop.stop_airport ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  [b:flight_stop] ) ) ) ( WRITE context/flight_stop [b:flight_stop] ( APPEND flight  $flight-descr3 ) ) }
    | ( where do they <stop> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight_stop.stop_airport ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  [b:flight_stop] ) ) ) ( WRITE context/flight_stop [b:flight_stop] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( where does <airline-descr> :airline-descr3 <stop> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight_stop.stop_airport ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  [b:flight_stop] ) ) ) ( WRITE context/flight_stop [b:flight_stop] ( APPEND flight  ( [d:flight] ) ) ) ( WRITE context/flight [d:flight] ( UPDATE ( [a:flight] ) ( APPEND AND ( APPEND flight_stop  ( VALUE ) ) ( APPEND airline  $airline-descr3 ) ) ) ) }
    | ( where does <flight-descr> :flight-descr3 <stop> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight_stop.stop_airport ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  [b:flight_stop] ) ) ) ( WRITE context/flight_stop [b:flight_stop] ( APPEND flight  $flight-descr3 ) ) }
    | ( where is <det> <flight-stop> <with-flight> :with-flight5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight_stop.stop_airport ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  [b:flight_stop] ) ) ) ( WRITE context/flight_stop [b:flight_stop] ( APPEND flight  $with-flight5 ) ) }
  ) .

<start_symbol_find-flight-stop-schedule-query>
  ::= ( ( <find> <det> arrival and departure times <with-flight> :with-flight7 <with-city> :with-city8 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight_stop.arrival_time,  flight_stop.departure_time ) ( APPEND object  flight_stop ) ( APPEND specs/flight_stop  ( APPEND AND ( APPEND flight  $with-flight7 ) ( APPEND city  $with-city8 ) ) ) ) ) }
  ) .

<find-flight-stops-query>
  ::= ( ( how many <flight-stop> are there ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.stops ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) }
  ) .

<find-flight-time-elapsed-query>
  ::= ( ( <find> the duration <with-flight> :with-flight4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.time_elapsed ) ( APPEND object  flight ) ( APPEND specs/flight  [a:flight] $with-flight4 ) ) ) }
    | ( <find> the flying time <with-flight> :with-flight5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.time_elapsed ) ( APPEND object  flight ) ( APPEND specs/flight  [a:flight] $with-flight5 ) ) ) }
    | ( how long does it take to get <from-airport-to-airport> :from-airport-to-airport8 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.time_elapsed ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] $from-airport-to-airport8 ) }
    | ( how long does it take to get <from-airport> :from-airport8 <to-airport> :to-airport9 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.time_elapsed ) ( APPEND object  flight ) ( APPEND specs/flight  ( [a:flight] ) ) ) ) ( WRITE context/flight [a:flight] ( APPEND AND $from-airport8 $to-airport9 ) ) }
    | ( how long is <flight-descr> :flight-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.time_elapsed ) ( APPEND object  flight ) ( APPEND specs/flight  [a:flight] $flight-descr4 ) ) ) }
  ) .

<start_symbol_find-flight-to-airport-query>
  ::= ( ( <find> where <flight-descr> goes :goes4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.to_airport ) ( APPEND object  flight ) ( APPEND specs/flight  [a:flight] $goes4 ) ) ) }
    | ( where does <flight-descr> :flight-descr3 <arrive> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.to_airport ) ( APPEND object  flight ) ( APPEND specs/flight  [a:flight] $flight-descr3 ) ) ) }
    | ( where does <flight-descr> :flight-descr3 go to ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.to_airport ) ( APPEND object  flight ) ( APPEND specs/flight  [a:flight] $flight-descr3 ) ) ) }
  ) .

<find-flight>
  ::= ( ( <find> a reservation ) 
    | ( <find> my choices of <flight> ) 
    | ( <i-want> to <know> what <flight> are available ) 
    | ( <i-want> to arrange a <flight> ) 
    | ( <i-want> to come back ) 
    | ( <i-want> to fly ) 
    | ( <i-want> to fly back ) 
    | ( <i-want> to get ) 
    | ( <i-want> to get that ) 
    | ( <i-want> to go ) 
    | ( <i-want> to make a <flight> ) 
    | ( <i-want> to make a reservation ) 
    | ( <i-want> to plan a <flight> ) 
    | ( <i-want> to take <cardinal> people ) 
    | ( <i-want> to travel ) 
    | ( <i-want> to try traveling ) 
    | ( <may> i fly ) 
    | ( <may> i get that ) 
    | ( <may> i get this ) 
    | ( are there <flight> ) 
    | ( are there any <flight> ) 
    | ( have <list-of> <flight> ) 
    | ( how <may> i get ) 
    | ( how <may> i go ) 
    | ( i actually want to go ) 
    | ( i plan to travel ) 
    | ( i wanna come back ) 
    | ( i wanna fly ) 
    | ( i wanna go ) 
    | ( i wanna make a <flight> ) 
    | ( i wanna travel ) 
    | ( i'm planning to travel ) 
    | ( i'm traveling ) 
    | ( make that ) 
    | ( so which <flight> would be appropriate ) 
    | ( that would be traveling ) 
    | ( the flight needs to be ) 
    | ( the flight should be ) 
    | ( traveling ) 
    | ( we would like to go ) 
    | ( what <flight> are available ) 
    | ( what about <det> <flight> ) 
    | ( what about <flight> ) 
    | ( what is the availability ) 
    | ( what is the flight availability ) 
    | ( what other <flight> are there ) 
    | ( which are <det> <flight> ) 
  ) .

<start_symbol_find-food-service-meal-description-query>
  ::= ( ( <find> <food-service-meal-code-compound-descr> :food-service-meal-code-compound-descr2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  food_service.meal_description ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [a:meal] ) ) ) ) ( WRITE context/meal [a:meal] ( APPEND meal_code_compound  $food-service-meal-code-compound-descr2 ) ) }
    | ( <find> <food-service-meal-code-simple-descr> :food-service-meal-code-simple-descr2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  food_service.meal_description ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [a:meal] ) ) ) ) ( WRITE context/meal [a:meal] ( APPEND meal_code_simple  $food-service-meal-code-simple-descr2 ) ) }
    | ( <find> what <food-service-meal-code-compound-descr> :food-service-meal-code-compound-descr3 <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  food_service.meal_description ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [a:meal] ) ) ) ) ( WRITE context/meal [a:meal] ( APPEND meal_code_compound  $food-service-meal-code-compound-descr3 ) ) }
    | ( <find> what <food-service-meal-code-simple-descr> :food-service-meal-code-simple-descr3 <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  food_service.meal_description ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [a:meal] ) ) ) ) ( WRITE context/meal [a:meal] ( APPEND meal_code_simple  $food-service-meal-code-simple-descr3 ) ) }
    | ( explain <food-service-meal-code-compound-descr> :food-service-meal-code-compound-descr2 to me ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  food_service.meal_description ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [a:meal] ) ) ) ) ( WRITE context/meal [a:meal] ( APPEND meal_code_compound  $food-service-meal-code-compound-descr2 ) ) }
    | ( explain <food-service-meal-code-compound-descr> :food-service-meal-code-compound-descr2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  food_service.meal_description ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [a:meal] ) ) ) ) ( WRITE context/meal [a:meal] ( APPEND meal_code_compound  $food-service-meal-code-compound-descr2 ) ) }
    | ( explain <food-service-meal-code-simple-descr> :food-service-meal-code-simple-descr2 to me ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  food_service.meal_description ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [a:meal] ) ) ) ) ( WRITE context/meal [a:meal] ( APPEND meal_code_simple  $food-service-meal-code-simple-descr2 ) ) }
    | ( explain <food-service-meal-code-simple-descr> :food-service-meal-code-simple-descr2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  food_service.meal_description ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [a:meal] ) ) ) ) ( WRITE context/meal [a:meal] ( APPEND meal_code_simple  $food-service-meal-code-simple-descr2 ) ) }
    | ( what does <food-service-meal-code-compound-descr> :food-service-meal-code-compound-descr3 <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  food_service.meal_description ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [a:meal] ) ) ) ) ( WRITE context/meal [a:meal] ( APPEND meal_code_compound  $food-service-meal-code-compound-descr3 ) ) }
    | ( what does <food-service-meal-code-simple-descr> :food-service-meal-code-simple-descr3 <symbolize> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  food_service.meal_description ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [a:meal] ) ) ) ) ( WRITE context/meal [a:meal] ( APPEND meal_code_simple  $food-service-meal-code-simple-descr3 ) ) }
    | ( what is the meaning of <food-service-meal-code-compound-descr> :food-service-meal-code-compound-descr6 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  food_service.meal_description ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [a:meal] ) ) ) ) ( WRITE context/meal [a:meal] ( APPEND meal_code_compound  $food-service-meal-code-compound-descr6 ) ) }
    | ( what is the meaning of <food-service-meal-code-simple-descr> :food-service-meal-code-simple-descr6 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  food_service.meal_description ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [a:meal] ) ) ) ) ( WRITE context/meal [a:meal] ( APPEND meal_code_simple  $food-service-meal-code-simple-descr6 ) ) }
  ) .

<find-ground-service-ground-fare-query>
  ::= ( ( <find> <det> <fare> <with-ground-service> :with-ground-service4 ) { ( READ context/city ( [a:city] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  ground_service.ground_fare ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] ( APPEND AND ( APPEND city  ( [a:city] ) ) $with-ground-service4 ) ) }
    | ( <find> <det> <ground-service-transport-type> :ground-service-transport-type3 <fare> <ground-service-mod-list> :ground-service-mod-list5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  ground_service.ground_fare ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [a:ground_service] ) ) ) ( WRITE context/ground_service [a:ground_service] ( APPEND AND ( APPEND transport_type  $ground-service-transport-type3 ) $ground-service-mod-list5 ) ) }
    | ( <find> <fare> <with-ground-service> :with-ground-service3 ) { ( READ context/city ( [a:city] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  ground_service.ground_fare ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] ( UPDATE ( APPEND city  ( [a:city] ) ) $with-ground-service3 ) ) }
    | ( <ground-service-transport-type> :ground-service-transport-type1 <fare> ) { ( READ context/city ( [a:city] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  ground_service.ground_fare ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] ( APPEND AND ( APPEND transport_type  $ground-service-transport-type1 ) ( APPEND city  ( [a:city] ) ) ) ) }
    | ( <ground-service-transport-type> :ground-service-transport-type1 <fare> <ground-service-mod-list> :ground-service-mod-list3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  ground_service.ground_fare ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [a:ground_service] ) ) ) ( WRITE context/ground_service [a:ground_service] ( APPEND AND ( APPEND transport_type  $ground-service-transport-type1 ) $ground-service-mod-list3 ) ) }
    | ( how much are <ground-service-descr> :ground-service-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  ground_service.ground_fare ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] $ground-service-descr4 ) }
    | ( how much is <ground-service-descr> :ground-service-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  ground_service.ground_fare ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] $ground-service-descr4 ) }
    | ( how much do <ground-service-descr> :ground-service-descr4 cost ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  ground_service.ground_fare ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] $ground-service-descr4 ) }
    | ( how much does <ground-service-descr> :ground-service-descr4 cost ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  ground_service.ground_fare ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] $ground-service-descr4 ) }
    | ( how much does it cost to rent a car <ground-service-mod-list> :ground-service-mod-list10 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  ground_service.ground_fare ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [a:ground_service] ) ) ) ( WRITE context/ground_service [a:ground_service] ( APPEND AND ( APPEND transport_type/"RENTAL  CAR" ) $ground-service-mod-list10 ) ) }
    | ( what <fare> is <ground-service-descr> :ground-service-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  ground_service.ground_fare ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] $ground-service-descr4 ) }
  ) .

<find-ground-service-query>
  ::= ( ( <find> <city-descr> :city-descr2 <ground-service-descr> :ground-service-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [a:ground_service] ) ) ) ( WRITE context/ground_service [a:ground_service] ( APPEND AND $ground-service-descr3 ( APPEND city  $city-descr2 ) ) ) }
    | ( <ground-service-descr> :ground-service-descr1 <city-name> :city-name2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] ( APPEND AND $ground-service-descr1 ( APPEND city/city_name  $city-name2 ) ) ) }
    | ( <ground-service-mod-list> :ground-service-mod-list1 <find> <ground-service-descr> :ground-service-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] ( APPEND AND $ground-service-mod-list1 $ground-service-descr3 ) ) }
    | ( <ground-service-mod-list> :ground-service-mod-list1 <ground-service-descr> :ground-service-descr2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] ( APPEND AND $ground-service-mod-list1 $ground-service-descr2 ) ) }
    | ( <ground-service-mod-list> :ground-service-mod-list1 <i-want> to rent a car ) { ( READ context/city ( [a:city] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] ( UPDATE ( APPEND city  ( [a:city] ) ) ( APPEND AND ( APPEND transport_type/"RENTAL  CAR" ) $ground-service-mod-list1 ) ) ) }
    | ( <ground-service-mod-list> :ground-service-mod-list1 <i-want> to rent a car <ground-service-mod-list> :ground-service-mod-list7 ) { ( READ context/city ( [a:city] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] ( UPDATE ( APPEND city  ( [a:city] ) ) ( APPEND AND ( APPEND transport_type/"RENTAL  CAR" ) $ground-service-mod-list1 $ground-service-mod-list7 ) ) ) }
    | ( <ground-service-mod-list> :ground-service-mod-list1 <may> i rent a car ) { ( READ context/city ( [a:city] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] ( UPDATE ( APPEND city  ( [a:city] ) ) ( APPEND AND ( APPEND transport_type/"RENTAL  CAR" ) $ground-service-mod-list1 ) ) ) }
    | ( <ground-service-mod-list> :ground-service-mod-list1 <may> i rent a car <ground-service-mod-list> :ground-service-mod-list7 ) { ( READ context/city ( [a:city] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] ( UPDATE ( APPEND city  ( [a:city] ) ) ( APPEND AND ( APPEND transport_type/"RENTAL  CAR" ) $ground-service-mod-list1 $ground-service-mod-list7 ) ) ) }
    | ( <ground-service-mod-list> :ground-service-mod-list1 are <ground-service> <ground-service-mod-list> :ground-service-mod-list4 ) { ( READ context/city ( [a:city] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] ( UPDATE ( APPEND city  ( [a:city] ) ) ( APPEND AND $ground-service-mod-list1 $ground-service-mod-list4 ) ) ) }
    | ( <ground-service-mod-list> :ground-service-mod-list1 is <ground-service> <ground-service-mod-list> :ground-service-mod-list4 ) { ( READ context/city ( [a:city] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] ( UPDATE ( APPEND city  ( [a:city] ) ) ( APPEND AND $ground-service-mod-list1 $ground-service-mod-list4 ) ) ) }
    | ( <ground-service-mod-list> :ground-service-mod-list1 what <ground-service> is <ground-service-mod-list> :ground-service-mod-list5 ) { ( READ context/city ( [a:city] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] ( UPDATE ( APPEND city  ( [a:city] ) ) ( APPEND AND $ground-service-mod-list1 $ground-service-mod-list5 ) ) ) }
    | ( <i-want> to rent a car ) { ( READ context/city ( [a:city] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] ( APPEND AND ( APPEND transport_type/"RENTAL  CAR" ) ( APPEND city  ( [a:city] ) ) ) ) }
    | ( <i-want> to rent a car <ground-service-mod-list> :ground-service-mod-list6 ) { ( READ context/city ( [a:city] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] ( UPDATE ( APPEND city  ( [a:city] ) ) ( APPEND AND ( APPEND transport_type/"RENTAL  CAR" ) $ground-service-mod-list6 ) ) ) }
    | ( <may> i rent a car ) { ( READ context/city ( [a:city] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] ( APPEND AND ( APPEND city  ( [a:city] ) ) ( APPEND transport_type/"RENTAL  CAR" ) ) ) }
    | ( <may> i rent a car <ground-service-mod-list> :ground-service-mod-list6 ) { ( READ context/city ( [a:city] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] ( UPDATE ( APPEND city  ( [a:city] ) ) ( APPEND AND ( APPEND transport_type/"RENTAL  CAR" ) $ground-service-mod-list6 ) ) ) }
    | ( <find> <ground-service-descr> :ground-service-descr2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] $ground-service-descr2 ) }
    | ( <ground-service-descr> :ground-service-descr1 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] $ground-service-descr1 ) }
    | ( are <ground-service> <ground-service-mod-list> :ground-service-mod-list3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [a:ground_service] ) ) ) ( WRITE context/ground_service [a:ground_service] $ground-service-mod-list3 ) }
    | ( does <airport-descr> :airport-descr2 have <ground-service-descr> :ground-service-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [a:ground_service] ) ) ) ( WRITE context/ground_service [a:ground_service] ( UPDATE $ground-service-descr4 ( APPEND airport  $airport-descr2 ) ) ) }
    | ( how do i get <city-area> :city-area5 from <airport-descr> :airport-descr7 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [a:ground_service] ) ) ) ( WRITE context/ground_service [a:ground_service] ( APPEND AND ( APPEND city  $city-area5 ) ( APPEND airport  $airport-descr7 ) ) ) }
    | ( how do i get from <airport-descr> :airport-descr6 to <city-name> :city-name8 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [a:ground_service] ) ) ) ( WRITE context/city ( APPEND city_name  $city-name8 ) ) ( WRITE context/ground_service [a:ground_service] ( APPEND AND ( APPEND airport  $airport-descr6 ) ( APPEND city/city_name  $city-name8 ) ) ) }
    | ( how do i get from <airport-descr> :airport-descr6 to downtown <with-city> :with-city9 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [a:ground_service] ) ) ) ( WRITE context/ground_service [a:ground_service] ( APPEND AND ( APPEND airport  $airport-descr6 ) ( APPEND city  $with-city9 ) ) ) }
    | ( how do i get to and from <airport-descr> :airport-descr8 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [a:ground_service] ) ) ) ( WRITE context/ground_service [a:ground_service] ( APPEND airport  $airport-descr8 ) ) }
    | ( is <ground-service> <ground-service-mod-list> :ground-service-mod-list3 ) { ( READ context/city ( [a:city] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] ( UPDATE ( APPEND city  ( [a:city] ) ) $ground-service-mod-list3 ) ) }
    | ( what <ground-service> is <ground-service-mod-list> :ground-service-mod-list4 ) { ( READ context/city ( [a:city] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [b:ground_service] ) ) ) ( WRITE context/ground_service [b:ground_service] ( UPDATE ( APPEND city  ( [a:city] ) ) $ground-service-mod-list4 ) ) }
    | ( what limousine service <ground-service-mod-list> :ground-service-mod-list4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [a:ground_service] ) ) ) ( WRITE context/ground_service [a:ground_service] ( APPEND AND ( APPEND transport_type  "LIMOUSINE" ) $ground-service-mod-list4 ) ) }
    | ( what limousine service is <ground-service-mod-list> :ground-service-mod-list5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [a:ground_service] ) ) ) ( WRITE context/ground_service [a:ground_service] ( APPEND AND ( APPEND transport_type  "LIMOUSINE" ) $ground-service-mod-list5 ) ) }
    | ( will there be <ground-service-descr> :ground-service-descr4 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/ground_service.city_code,/ground_service.airport_code,  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [a:ground_service] ) ) ) ( WRITE context/ground_service [a:ground_service] $ground-service-descr4 ) }
  ) .

<find-ground-service-transport-type-query>
  ::= ( ( <find> <det> types of <ground-service> <ground-service-mod-list> :ground-service-mod-list6 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [a:ground_service] ) ) ) ( WRITE context/ground_service [a:ground_service] $ground-service-mod-list6 ) }
    | ( <ground-service-transport-type-wh> are <ground-service-mod-list> :ground-service-mod-list3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [a:ground_service] ) ) ) ( WRITE context/ground_service [a:ground_service] $ground-service-mod-list3 ) }
    | ( <ground-service-transport-type-wh> is <ground-service-mod-list> :ground-service-mod-list3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [a:ground_service] ) ) ) ( WRITE context/ground_service [a:ground_service] $ground-service-mod-list3 ) }
    | ( <ground-service-transport-type-wh> <can> you offer me <ground-service-mod-list> :ground-service-mod-list6 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [a:ground_service] ) ) ) ( WRITE context/ground_service [a:ground_service] $ground-service-mod-list6 ) }
    | ( <ground-service-transport-type-wh> <ground-service-mod-list> :ground-service-mod-list2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  ground_service.transport_type ) ( APPEND object  ground_service ) ( APPEND specs/ground_service  [a:ground_service] ) ) ) ( WRITE context/ground_service [a:ground_service] $ground-service-mod-list2 ) }
  ) .

<find-meal-query>
  ::= ( ( <find-meal> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/food_service.meal_code,/food_service.meal_number,  food_service.compartment ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [b:meal] ) ) ) ) ( WRITE context/meal [b:meal] ( APPEND flight  ( [a:flight] ) ) ) }
    | ( <find-meal> <flight-mod-phrase> :flight-mod-phrase2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/food_service.meal_code,/food_service.meal_number,  food_service.compartment ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [b:meal] ) ) ) ) ( WRITE context/meal [b:meal] ( APPEND flight  ( [a:flight] ) ) ) ( WRITE context/flight [a:flight] $flight-mod-phrase2 ) }
    | ( <find-meal> <with-flight> :with-flight2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/food_service.meal_code,/food_service.meal_number,  food_service.compartment ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [b:meal] ) ) ) ) ( WRITE context/meal [b:meal] ( APPEND flight  $with-flight2 ) ) }
    | ( <find-meal> during <flight-descr> :flight-descr3 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/food_service.meal_code,/food_service.meal_number,  food_service.compartment ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [b:meal] ) ) ) ) ( WRITE context/meal [b:meal] ( APPEND flight  $flight-descr3 ) ) }
    | ( <meal-descr> :meal-descr1 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/food_service.meal_code,/food_service.meal_number,  food_service.compartment ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [b:meal] ) ) ) ) ( WRITE context/meal [b:meal] ( APPEND AND ( APPEND flight  ( [a:flight] ) ) $meal-descr1 ) ) }
    | ( <meal-descr> :meal-descr1 <with-flight> :with-flight2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/food_service.meal_code,/food_service.meal_number,  food_service.compartment ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [b:meal] ) ) ) ) ( WRITE context/meal [b:meal] ( APPEND AND ( APPEND flight  $with-flight2 ) $meal-descr1 ) ) }
    | ( <with-flight> :with-flight1 <find-meal> :find-meal2 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/food_service.meal_code,/food_service.meal_number,  food_service.compartment ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [b:meal] ) ) ) ) ( WRITE context/meal [b:meal] ( APPEND AND ( APPEND flight  $with-flight1 ) $find-meal2 ) ) ( WRITE context/flight ( APPEND AND $with-flight1 ( APPEND meal  $find-meal2 ) ) ) }
    | ( do they both <have-meal> :have-meal4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/food_service.meal_code,/food_service.meal_number,  food_service.compartment ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [b:meal] ) ) ) ) ( WRITE context/meal [b:meal] ( APPEND AND ( APPEND flight  ( [a:flight] ) ) $have-meal4 ) ) ( WRITE context/flight ( UPDATE ( [a:flight] ) ( APPEND meal  $have-meal4 ) ) ) }
    | ( does <det> <time> :time3 <have-meal> :have-meal4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/food_service.meal_code,/food_service.meal_number,  food_service.compartment ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [b:meal] ) ) ) ) ( WRITE context/meal [b:meal] ( APPEND AND ( APPEND flight  ( APPEND AND [a:flight] ( APPEND departure_time  $time3 ) ) ) $have-meal4 ) ) ( WRITE context/flight ( APPEND AND [a:flight] ( APPEND departure_time  $time3 ) ( APPEND meal  $have-meal4 ) ) ) }
    | ( does the <airline-name> :airline-name3 or <airline-name> :airline-name5 <have-meal> :have-meal6 on their <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/food_service.meal_code,/food_service.meal_number,  food_service.compartment ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [b:meal] ) ) ) ) ( WRITE context/meal [b:meal] ( APPEND AND ( APPEND flight  ( APPEND AND [a:flight] ( APPEND airline  ( [d:airline] ) ) ) ) $have-meal6 ) ) ( WRITE context/flight ( APPEND AND [a:flight] ( APPEND airline  ( [d:airline] ) ) ( APPEND meal  $have-meal6 ) ) ) ( WRITE context/airline [d:airline] ( APPEND OR  ( APPEND airline_code  $airline-name3 ) ( APPEND airline_code  $airline-name5 ) ) ) }
    | ( is there <meal-descr> :meal-descr3 <served> <with-flight> :with-flight5 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/food_service.meal_code,/food_service.meal_number,  food_service.compartment ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [b:meal] ) ) ) ) ( WRITE context/meal [b:meal] ( APPEND AND ( APPEND flight  $with-flight5 ) $meal-descr3 ) ) ( WRITE context/flight ( APPEND AND $with-flight5 ( APPEND meal  $meal-descr3 ) ) ) }
    | ( what <type> of meals are <with-flight> :with-flight6 ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/food_service.meal_code,/food_service.meal_number,  food_service.compartment ) ( APPEND object  food_service ) ( APPEND specs/meal  ( [b:meal] ) ) ) ) ( WRITE context/meal [b:meal] ( APPEND flight  $with-flight6 ) ) }
  ) .

<find-meal>
  ::= ( ( <can> you shown me <meal-descr> ) 
    | ( <find> <meal-descr> ) 
    | ( are <meal-descr> <served> ) 
    | ( is <meal-descr> :meal-descr2 <served> ) { ( VALUE [a:meal] $meal-descr2 ) }
    | ( what food is <served> ) 
    | ( what meal service is <served> ) 
    | ( what meals are <served> ) 
    | ( will <meal-descr> :meal-descr2 be served ) { ( VALUE [a:meal] $meal-descr2 ) }
  ) .

<find-object-query>
  ::= ( ( <find-aircraft-query> :find-aircraft-query1 ) { ( VALUE [a:query] $find-aircraft-query1 ) }
    | ( <find-airline-query> :find-airline-query1 ) { ( VALUE [a:query] $find-airline-query1 ) }
    | ( <find-airport-query> :find-airport-query1 ) { ( VALUE [a:query] $find-airport-query1 ) }
    | ( <find-city-query> :find-city-query1 ) { ( VALUE [a:query] $find-city-query1 ) }
    | ( <find-class-query> :find-class-query1 ) { ( VALUE [a:query] $find-class-query1 ) }
    | ( <find-day-query> :find-day-query1 ) { ( VALUE [a:query] $find-day-query1 ) }
    | ( <find-fare-query> :find-fare-query1 ) { ( VALUE [a:query] $find-fare-query1 ) }
    | ( <find-flight-query> :find-flight-query1 ) { ( VALUE [a:query] $find-flight-query1 ) }
    | ( <find-flight-stop-query> :find-flight-stop-query1 ) { ( VALUE [a:query] $find-flight-stop-query1 ) }
    | ( <find-ground-service-query> :find-ground-service-query1 ) { ( VALUE [a:query] $find-ground-service-query1 ) }
    | ( <find-meal-query> :find-meal-query1 ) { ( VALUE [a:query] $find-meal-query1 ) }
  ) .

<find-restriction-query>
  ::= ( ( <find> <restriction-param> ) { ( READ context/fare ( [a:fare] ) ) ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  restriction.restriction_code ) ( APPEND object  restriction ) ( APPEND specs/restriction  ( APPEND fare  ( [a:fare] ) ) ) ) ) }
    | ( <find> <restriction-param> <with-flight> :with-flight3 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  restriction.restriction_code ) ( APPEND object  restriction ) ( APPEND specs/restriction  ( APPEND flight  $with-flight3 ) ) ) ) }
    | ( <find> <restriction-param> on <fare-descr> :fare-descr4 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  restriction.restriction_code ) ( APPEND object  restriction ) ( APPEND specs/restriction  ( APPEND fare  $fare-descr4 ) ) ) ) }
    | ( <find> <restriction-param> on <flight-descr> :flight-descr4 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  restriction.restriction_code ) ( APPEND object  restriction ) ( APPEND specs/restriction  ( APPEND flight  $flight-descr4 ) ) ) ) }
    | ( <restriction-wh> apply to <fare-descr> :fare-descr4 ) { ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  restriction.restriction_code ) ( APPEND object  restriction ) ( APPEND specs/restriction  ( APPEND fare  $fare-descr4 ) ) ) ) }
    | ( <restriction-wh> on <fare-basis-code-descr> :fare-basis-code-descr3 ) { ( READ context/fare ( [a:fare] ) ) ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  restriction.restriction_code ) ( APPEND object  restriction ) ( APPEND specs/restriction  ( APPEND fare  ( UPDATE ( [a:fare] ) ( APPEND fare_basis_code  $fare-basis-code-descr3 ) ) ) ) ) ) }
    | ( are there any restrictions ) { ( READ context/fare ( [a:fare] ) ) ( VALUE [b:query] ( APPEND AND ( APPEND info/DISTINCT  restriction.restriction_code ) ( APPEND object  restriction ) ( APPEND specs/restriction  ( APPEND fare  ( [a:fare] ) ) ) ) ) }
  ) .

<find>
  ::= ( ( <can> you <show-ditrans> me about ) 
    | ( <can> you please <show-ditrans> me ) 
    | ( <can> you <show-ditrans> me ) 
    | ( <can> you please <show-ditrans> me <list-of> ) 
    | ( <can> you <show-ditrans> me <list-of> ) 
    | ( <can> you please <show-trans> ) 
    | ( <can> you <show-trans> ) 
    | ( <can> you get ) 
    | ( <can> you have ) 
    | ( <can> you only <show-ditrans> me ) 
    | ( <i-want> ) 
    | ( <i-want> <list-of> ) 
    | ( <i-want> to <know> ) 
    | ( <i-want> to <know> <list-of> ) 
    | ( <i-want> to book ) 
    | ( <i-want> to have you <show-trans> ) 
    | ( <list-of> ) 
    | ( <may> i please <know> ) 
    | ( <may> i <know> ) 
    | ( <may> i please <know> <list-of> ) 
    | ( <may> i <know> <list-of> ) 
    | ( <may> i also please <know> ) 
    | ( <show-ditrans> me ) 
    | ( <show-ditrans> me <list-of> ) 
    | ( <show-ditrans> me about ) 
    | ( <show-ditrans> me only ) 
    | ( <show-trans> ) 
    | ( <show-trans> <list-of> ) 
    | ( <show-trans> only ) 
    | ( add ) 
    | ( add to the list ) 
    | ( are there ) 
    | ( do you have ) 
    | ( how about ) 
    | ( i am also interested in ) 
    | ( i am interested in ) 
    | ( i am interested in booking ) 
    | ( i am looking for ) 
    | ( i prefer ) 
    | ( i'm interested in ) 
    | ( i'm looking for ) 
    | ( i'm trying to find ) 
    | ( i've got somebody else who wants to take ) 
    | ( is there ) 
    | ( let me <know> ) 
    | ( list for me ) 
    | ( looking for ) 
    | ( need ) 
    | ( need to <know> ) 
    | ( needing ) 
    | ( only <show-ditrans> me ) 
    | ( only <show-trans> ) 
    | ( want ) 
    | ( we need ) 
    | ( what about ) 
    | ( what are ) 
    | ( what are my options for ) 
    | ( what is ) 
    | ( what're ) 
    | ( what's ) 
  ) .

<start_symbol_flight-adj-aircraft>
  ::= ( ( <aircraft-manufacturer> :aircraft-manufacturer1 <aircraft-code> :aircraft-code2 ) { ( VALUE [a:flight] ( APPEND aircraft  [b:aircraft] ( APPEND AND ( APPEND manufacturer  $aircraft-manufacturer1 ) ( APPEND aircraft_code  $aircraft-code2 ) ) ) ) ( WRITE context/aircraft ( [b:aircraft] ) ) }
  ) .

<flight-adj-airline>
  ::= ( ( <airline-code> :airline-code1 ) { ( VALUE [a:flight] ( APPEND airline  ( [b:airline] ) ) ) ( WRITE context/airline [b:airline] ( APPEND airline_code  $airline-code1 ) ) }
    | ( <airline-name-poss> :airline-name-poss1 ) { ( VALUE [a:flight] ( APPEND airline  ( [b:airline] ) ) ) ( WRITE context/airline [b:airline] ( APPEND airline_code  $airline-name-poss1 ) ) }
    | ( <airline-name> :airline-name1 ) { ( VALUE [a:flight] ( APPEND airline  ( [b:airline] ) ) ) ( WRITE context/airline [b:airline] ( APPEND airline_code  $airline-name1 ) ) }
    | ( <airline-name> :airline-name1 and <airline-name> :airline-name3 ) { ( VALUE [a:flight] ( APPEND airline  ( [b:airline] ) ) ) ( WRITE context/airline [b:airline] ( APPEND OR  ( APPEND airline_code  $airline-name1 ) ( APPEND airline_code  $airline-name3 ) ) ) }
    | ( <airline-name> :airline-name1 or <airline-name> :airline-name3 ) { ( VALUE [a:flight] ( APPEND airline/airline_code  ( APPEND OR  $airline-name1 $airline-name3 ) ) ) ( WRITE context/airline ( APPEND OR  ( APPEND airline_code  $airline-name1 ) ( APPEND airline_code  $airline-name3 ) ) ) }
  ) .

<start_symbol_flight-adj-date-day>
  ::= ( ( <day-name> :day-name1 ) { ( VALUE [a:flight] ( APPEND flight_days  [b:date_day] ) ) ( WRITE context/date/date_day [b:date_day] ( APPEND day_name  $day-name1 ) ) }
    | ( <day-name> :day-name1 and <day-name> :day-name3 ) { ( VALUE [a:flight] ( APPEND flight_days  ( APPEND OR  ( APPEND day_name  $day-name1 ) ( APPEND day_name  $day-name3 ) ) ) ) }
    | ( <day-name> :day-name1 or <day-name> :day-name3 ) { ( VALUE [a:flight] ( APPEND flight_days  ( APPEND OR  ( APPEND day_name  $day-name1 ) ( APPEND day_name  $day-name3 ) ) ) ) }
    | ( <day-name> :day-name1 and <day-poss> :day-poss3 ) { ( VALUE [a:flight] ( APPEND flight_days  ( APPEND OR  ( APPEND day_name  $day-name1 ) ( APPEND day_name  $day-poss3 ) ) ) ) }
    | ( <day-name> :day-name1 or <day-poss> :day-poss3 ) { ( VALUE [a:flight] ( APPEND flight_days  ( APPEND OR  ( APPEND day_name  $day-name1 ) ( APPEND day_name  $day-poss3 ) ) ) ) }
    | ( <day-poss> :day-poss1 ) { ( VALUE [a:flight] ( APPEND flight_days  [b:date_day] ) ) ( WRITE context/date/date_day [b:date_day] ( APPEND day_name  $day-poss1 ) ) }
    | ( daily ) { ( VALUE [a:flight] ( APPEND flight_days  "DAILY" ) ) }
    | ( next <day-poss> :day-poss2 ) { ( VALUE [a:flight] ( APPEND flight_days  ( NEXT_DATE $day-poss2 ) ) ) }
    | ( weekday ) { ( VALUE [a:flight] ( APPEND flight_days  ( APPEND OR  ( APPEND day_name  "MONDAY" ) ( APPEND day_name  "TUESDAY" ) ( APPEND day_name  "WEDNESDAY" ) ( APPEND day_name  "THURSDAY" ) ( APPEND day_name  "FRIDAY" ) ) ) ) }
  ) .

<flight-adj-departure-time>
  ::= ( ( <earliest> ) { ( VALUE [a:flight] ( APPEND super/min/departure_time  flight ) ) }
    | ( <interval> :interval1 ) { ( VALUE [a:flight] ( APPEND departure_time  $interval1 ) ) }
    | ( <latest> ) { ( VALUE [a:flight] ( APPEND super/max/departure_time  flight ) ) }
    | ( <time> :time1 ) { ( VALUE [a:flight] ( APPEND departure_time/range/=  $time1 ) ) }
    | ( earlier ) { ( READ context/time ( [a:integer] ) ) ( VALUE [b:flight] ( APPEND departure_time/range/upper/<  ( [a:integer] ) ) ) }
    | ( early ) { ( VALUE [a:flight] ( APPEND departure_time  ( APPEND AND ( APPEND range/lower/>=  0 ) ( APPEND range/upper/<=  1000 ) ) ) ) }
    | ( late ) { ( VALUE [a:flight] ( APPEND departure_time  ( APPEND AND ( APPEND range/lower/>=  2000 ) ( APPEND range/upper/<=  300 ) ) ) ) }
    | ( next ) { ( VALUE [a:flight] ( APPEND AND ( APPEND super/min/departure_time  flight ) ( APPEND departure_time/range/lower/>  ( CURRENT_TIME ) ) ) ) }
  ) .

<flight-adj-fare>
  ::= ( ( <cheapest> ) { ( VALUE [a:flight] ( APPEND fare  ( APPEND super/min/one_direction_cost/fare  flight ) ) ) }
    | ( <class-type> :class-type1 ) { ( VALUE [a:flight] ( APPEND fare/class_type  $class-type1 ) ) ( WRITE context/fare/class_type $class-type1 ) }
    | ( <economy> :economy1 ) { ( VALUE [a:flight] ( APPEND fare  $economy1 ) ) }
    | ( <highest> ) { ( VALUE [a:flight] ( APPEND fare  ( APPEND super/max/one_direction_cost/fare  flight ) ) ) }
    | ( <restriction-code> :restriction-code1 ) { ( VALUE [a:flight] ( APPEND fare  ( APPEND AND ( APPEND restriction_code/range  $restriction-code1 ) ( APPEND round_trip_cost/IS/NOT  NULL ) ) ) ) }
    | ( one way ) { ( VALUE [a:flight] ( APPEND fare/round_trip_required  "NO" ) ) }
    | ( round trip ) { ( VALUE [a:flight] ( APPEND fare/round_trip_cost/IS/NOT  NULL ) ) }
  ) .

<flight-adj-list>
  ::= ( ( <flight-adj> :flight-adj1 ) { ( VALUE [a:flight] $flight-adj1 ) }
    | ( <flight-adj> :flight-adj1 <flight-adj> :flight-adj2 ) { ( VALUE [a:flight] ( APPEND AND $flight-adj1 $flight-adj2 ) ) }
    | ( <flight-adj> :flight-adj1 <flight-adj> :flight-adj2 <flight-adj> :flight-adj3 ) { ( VALUE [a:flight] ( APPEND AND $flight-adj1 $flight-adj2 $flight-adj3 ) ) }
  ) .

<flight-adj-num-connections>
  ::= ( ( connecting ) { ( VALUE [a:flight] ( APPEND num_connections/range/lower/>  0 ) ) }
    | ( direct ) { ( VALUE [a:flight] ( APPEND num_connections/range  0 ) ) }
  ) .

<flight-adj-num-stops>
  ::= ( ( layover ) { ( VALUE [a:flight] ( APPEND num_stops/range/lower/>  0 ) ) }
    | ( nonstop ) { ( VALUE [a:flight] ( APPEND num_stops/range  0 ) ) }
    | ( one stop ) { ( VALUE [a:flight] ( APPEND num_stops/range  1 ) ) }
  ) .

<flight-adj>
  ::= ( ( <city-descr> :city-descr1 back <to-airport> :to-airport3 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND from_city  $city-descr1 ) $to-airport3 ) ) }
    | ( <city-descr> :city-descr1 to <city-descr> :city-descr3 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND from_city  $city-descr1 ) ( APPEND to_city  $city-descr3 ) ) ) }
    | ( <flight-adj-aircraft> :flight-adj-aircraft1 ) { ( VALUE [a:flight] $flight-adj-aircraft1 ) }
    | ( <flight-adj-airline> :flight-adj-airline1 ) { ( VALUE [a:flight] $flight-adj-airline1 ) }
    | ( <flight-adj-date-day> :flight-adj-date-day1 ) { ( VALUE [a:flight] $flight-adj-date-day1 ) }
    | ( <flight-adj-departure-time> :flight-adj-departure-time1 ) { ( VALUE [a:flight] $flight-adj-departure-time1 ) }
    | ( <flight-adj-fare> :flight-adj-fare1 ) { ( VALUE [a:flight] $flight-adj-fare1 ) }
    | ( <flight-adj-num-connections> :flight-adj-num-connections1 ) { ( VALUE [a:flight] $flight-adj-num-connections1 ) }
    | ( <flight-adj-num-stops> :flight-adj-num-stops1 ) { ( VALUE [a:flight] $flight-adj-num-stops1 ) }
    | ( <flight-adj-num-stops> :flight-adj-num-stops1 or <flight-adj-num-connections> :flight-adj-num-connections3 ) { ( VALUE [a:flight] ( APPEND OR  $flight-adj-num-stops1 $flight-adj-num-connections3 ) ) }
    | ( <food-service-meal-description> :food-service-meal-description1 ) { ( VALUE [a:flight] ( APPEND meal/meal_description  $food-service-meal-description1 ) ) }
    | ( airplane ) 
    | ( available ) 
    | ( quickest ) { ( VALUE [a:flight] ( APPEND super/min/time_elapsed  flight ) ) }
    | ( red eye ) { ( VALUE [a:flight] ( APPEND AND ( APPEND OR  ( APPEND departure_time  ( APPEND AND ( APPEND range/lower/>=  2100 ) ( APPEND range/upper/<=  2359 ) ) ) ( APPEND departure_time  ( APPEND AND ( APPEND range/lower/>=  0 ) ( APPEND range/upper/<=  300 ) ) ) ) ( APPEND arrival_time  ( APPEND AND ( APPEND range/lower/>=  500 ) ( APPEND range/upper/<=  1200 ) ) ) ) ) }
    | ( return ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( APPEND AND ( RETURN_FLIGHT ( [a:flight] ) ) ( APPEND arrival_time  ( VALUE ) ) ( APPEND departure_time  ( VALUE ) ) ( APPEND flight_days  ( VALUE ) ) ( APPEND fare  ( VALUE ) ) ( APPEND num_stops  ( VALUE ) ) ) ) }
    | ( shortest ) { ( VALUE [a:flight] ( APPEND super/min/time_elapsed  flight ) ) }
  ) .

<flight-arrival-time-param>
  ::= ( ( <det> arrival time ) 
    | ( arrival time ) 
    | ( <det> arrival times ) 
    | ( arrival times ) 
    | ( time of arrival ) 
  ) .

<start_symbol_flight-descr>
  ::= ( ( <airline-code> :airline-code1 <flight-number> :flight-number2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND ( APPEND airline  ( [c:airline] ) ) ( APPEND flight_number  $flight-number2 ) ) ) ) ( WRITE context/airline [c:airline] ( APPEND airline_code  $airline-code1 ) ) }
    | ( <airline-name> :airline-name1 <flight-number> :flight-number2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND ( APPEND airline  ( [c:airline] ) ) ( APPEND flight_number  $flight-number2 ) ) ) ) ( WRITE context/airline [c:airline] ( APPEND airline_code  $airline-name1 ) ) }
    | ( <cardinal> different <flight> one <flight-mod-phrase> :flight-mod-phrase5 and one <flight-mod-phrase> :flight-mod-phrase8 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND OR  $flight-mod-phrase5 $flight-mod-phrase8 ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <cheapest> <return-type> :return-type2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND fare  ( APPEND AND ( APPEND super/min/one_direction_cost/fare  flight ) $return-type2 ) ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <cheapest> <return-type> :return-type2 <flight-mod-phrase> :flight-mod-phrase3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND ( APPEND fare  ( APPEND AND ( APPEND super/min/one_direction_cost/fare  flight ) $return-type2 ( APPEND flight  $flight-mod-phrase3 ) ) ) $flight-mod-phrase3 ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <det> <class-type> :class-type2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND fare/class_type  $class-type2 ) ) ) ( WRITE context/fare ( APPEND class_type  $class-type2 ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <det> <flight> <flight-mod-phrase> :flight-mod-phrase3 and <flight-mod-phrase> :flight-mod-phrase5 <arrival> at the same time ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( UPDATE ( [a:flight] ) ( APPEND AND $flight-mod-phrase3 $flight-mod-phrase5 ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <det> <latest> <flight> to leave ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND super/max/departure_time  flight ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <det> <return-type> :return-type2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND fare  $return-type2 ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <det> arriving <flight> <with-airport> :with-airport4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND to_airport  $with-airport4 ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <det> arriving and departing <flight> from <airport-descr> :airport-descr7 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND OR  ( APPEND from_airport  $airport-descr7 ) ( APPEND to_airport  $airport-descr7 ) ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <det> landings <with-airport> :with-airport3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND to_airport  $with-airport3 ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <det> returns ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( RETURN_FLIGHT ( [a:flight] ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <det> round trip <flight-mod-phrase> :flight-mod-phrase4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND ( APPEND fare/round_trip_cost/IS/NOT  NULL ) $flight-mod-phrase4 ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <det> shortest ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND super/min/time_elapsed  flight ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <det> takeoffs and landings <with-airport> :with-airport5 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND OR  ( APPEND from_airport  $with-airport5 ) ( APPEND to_airport  $with-airport5 ) ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <flight> number <airline-code> :airline-code3 <flight-number> :flight-number4 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND airline/airline_code  $airline-code3 ) ( APPEND flight_number  $flight-number4 ) ) ) }
    | ( <highest> <return-type> :return-type2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND fare  ( APPEND AND ( APPEND super/max/one_direction_cost/fare  flight ) $return-type2 ) ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <highest> <return-type> :return-type2 <flight-mod-phrase> :flight-mod-phrase3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-mod-phrase3 ( APPEND fare  ( APPEND AND ( APPEND super/max/one_direction_cost/fare  flight ) $return-type2 ( APPEND flight  $flight-mod-phrase3 ) ) ) ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <det> <flight-adj-list> :flight-adj-list2 <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) $flight-adj-list2 ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <flight-adj-list> :flight-adj-list1 <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) $flight-adj-list1 ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <det> <flight-adj-list> :flight-adj-list2 <flight> <flight-mod-flight-number> :flight-mod-flight-number4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-adj-list2 $flight-mod-flight-number4 ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <flight-adj-list> :flight-adj-list1 <flight> <flight-mod-flight-number> :flight-mod-flight-number3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-adj-list1 $flight-mod-flight-number3 ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <det> <flight-adj-list> :flight-adj-list2 <flight> <flight-mod-flight-number> :flight-mod-flight-number4 <flight-mod-phrase> :flight-mod-phrase5 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-adj-list2 $flight-mod-flight-number4 $flight-mod-phrase5 ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <flight-adj-list> :flight-adj-list1 <flight> <flight-mod-flight-number> :flight-mod-flight-number3 <flight-mod-phrase> :flight-mod-phrase4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-adj-list1 $flight-mod-flight-number3 $flight-mod-phrase4 ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <det> <flight-adj-list> :flight-adj-list2 <flight> <flight-mod-phrase> :flight-mod-phrase4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( UPDATE $flight-adj-list2 $flight-mod-phrase4 ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <flight-adj-list> :flight-adj-list1 <flight> <flight-mod-phrase> :flight-mod-phrase3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( UPDATE $flight-adj-list1 $flight-mod-phrase3 ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <det> <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( <det> <flight> <flight-mod-flight-number> :flight-mod-flight-number3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-flight-number3 ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <flight> <flight-mod-flight-number> :flight-mod-flight-number2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-flight-number2 ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <det> <flight> <flight-mod-flight-number> :flight-mod-flight-number3 <flight-mod-phrase> :flight-mod-phrase4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-mod-flight-number3 $flight-mod-phrase4 ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <flight> <flight-mod-flight-number> :flight-mod-flight-number2 <flight-mod-phrase> :flight-mod-phrase3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-mod-flight-number2 $flight-mod-phrase3 ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <det> <flight> <flight-mod-phrase> :flight-mod-phrase3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase3 ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <flight> <flight-mod-phrase> :flight-mod-phrase2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase2 ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( <det> nonstop ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND num_stops/range  0 ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( nonstop ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND num_stops/range  0 ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( both <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( each of the <cardinal> <flight> you just gave me ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( nonstop <flight-mod-phrase> :flight-mod-phrase2 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-mod-phrase2 ( APPEND num_stops/range  0 ) ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( them ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( what <flight> are available <flight-mod-phrase> :flight-mod-phrase5 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase5 ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( what <flight> are available ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( what <flight> there are <flight-mod-phrase> :flight-mod-phrase5 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase5 ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( what <flight> there are ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
  ) .

<flight-fare-mod-list>
  ::= ( ( <flight-fare-mod> :flight-fare-mod1 ) { ( VALUE [a:flight] $flight-fare-mod1 ) }
    | ( <flight-fare-mod> :flight-fare-mod1 <flight-fare-mod> :flight-fare-mod2 ) { ( VALUE [a:flight] ( APPEND AND $flight-fare-mod1 $flight-fare-mod2 ) ) }
    | ( <flight-fare-mod> :flight-fare-mod1 <flight-fare-mod> :flight-fare-mod2 <flight-fare-mod> :flight-fare-mod3 ) { ( VALUE [a:flight] ( APPEND AND $flight-fare-mod1 $flight-fare-mod2 $flight-fare-mod3 ) ) }
    | ( <flight-fare-mod> :flight-fare-mod1 <flight-fare-mod> :flight-fare-mod2 <flight-fare-mod> :flight-fare-mod3 <flight-fare-mod> :flight-fare-mod4 ) { ( VALUE [a:flight] ( APPEND AND $flight-fare-mod1 $flight-fare-mod2 $flight-fare-mod3 $flight-fare-mod4 ) ) }
  ) .

<flight-fare-mod>
  ::= ( ( <flight-mod-airline> :flight-mod-airline1 ) { ( VALUE [a:flight] $flight-mod-airline1 ) }
    | ( <flight-mod-day> :flight-mod-day1 ) { ( VALUE [a:flight] $flight-mod-day1 ) }
    | ( <flight-mod-departure-time> :flight-mod-departure-time1 ) { ( VALUE [a:flight] $flight-mod-departure-time1 ) }
    | ( <flight-mod-from-airport-to-airport> :flight-mod-from-airport-to-airport1 ) { ( VALUE [a:flight] $flight-mod-from-airport-to-airport1 ) }
    | ( <from-airport> :from-airport1 ) { ( VALUE [a:flight] $from-airport1 ) }
    | ( <time-descr> :time-descr1 ) { ( VALUE [a:flight] ( APPEND departure_time  $time-descr1 ) ) }
    | ( <to-airport> :to-airport1 ) { ( VALUE [a:flight] $to-airport1 ) }
    | ( nonstop ) { ( VALUE [a:flight] ( APPEND num_stops/range  0 ) ) }
  ) .

<flight-mod-aircraft>
  ::= ( ( on <aircraft-descr> :aircraft-descr2 ) { ( VALUE [a:flight] ( APPEND aircraft  $aircraft-descr2 ) ) }
    | ( using <aircraft-descr> :aircraft-descr2 ) { ( VALUE [a:flight] ( APPEND aircraft  $aircraft-descr2 ) ) }
  ) .

<start_symbol_flight-mod-airline>
  ::= ( ( <airline-descr> :airline-descr1 ) { ( VALUE [a:flight] ( APPEND airline  $airline-descr1 ) ) }
    | ( <i-want> <flight-descr> to be on <airline-descr> :airline-descr6 ) { ( VALUE [a:flight] ( APPEND airline  $airline-descr6 ) ) }
    | ( <pron-rel> <airline-descr> :airline-descr2 has ) { ( VALUE [a:flight] ( APPEND airline  $airline-descr2 ) ) }
    | ( for <airline-descr> :airline-descr2 ) { ( VALUE [a:flight] ( APPEND airline  $airline-descr2 ) ) }
    | ( i am interested in only <det> <flight> on <airline-descr> :airline-descr9 ) { ( VALUE [a:flight] ( APPEND airline  $airline-descr9 ) ) }
    | ( of <airline-descr> :airline-descr2 ) { ( VALUE [a:flight] ( APPEND airline  $airline-descr2 ) ) }
    | ( on <airline-descr> :airline-descr2 ) { ( VALUE [a:flight] ( APPEND airline  $airline-descr2 ) ) }
    | ( using <airline-descr> :airline-descr2 ) { ( VALUE [a:flight] ( APPEND airline  $airline-descr2 ) ) }
    | ( with <airline-descr> :airline-descr2 ) { ( VALUE [a:flight] ( APPEND airline  $airline-descr2 ) ) }
  ) .

<flight-mod-arrival-list>
  ::= ( ( <flight-mod-arrival> :flight-mod-arrival1 ) { ( VALUE [a:flight] $flight-mod-arrival1 ) }
    | ( <flight-mod-arrival> :flight-mod-arrival1 <flight-mod-arrival> :flight-mod-arrival2 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-arrival1 $flight-mod-arrival2 ) ) }
    | ( <flight-mod-arrival> :flight-mod-arrival1 <flight-mod-arrival> :flight-mod-arrival2 <flight-mod-arrival> :flight-mod-arrival3 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-arrival1 $flight-mod-arrival2 $flight-mod-arrival3 ) ) }
    | ( <flight-mod-arrival> :flight-mod-arrival1 <flight-mod-arrival> :flight-mod-arrival2 <flight-mod-arrival> :flight-mod-arrival3 <flight-mod-arrival> :flight-mod-arrival4 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-arrival1 $flight-mod-arrival2 $flight-mod-arrival3 $flight-mod-arrival4 ) ) }
  ) .

<flight-mod-arrival-phrase>
  ::= ( ( <flight-mod-dest> :flight-mod-dest1 ) { ( VALUE [a:flight] $flight-mod-dest1 ) }
    | ( <flight-mod-dest> :flight-mod-dest1 <flight-mod-arrival-list> :flight-mod-arrival-list2 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-dest1 $flight-mod-arrival-list2 ) ) }
  ) .

<flight-mod-arrival-time>
  ::= ( ( <arrival> <time-descr> :time-descr2 ) { ( VALUE [a:flight] ( APPEND arrival_time  $time-descr2 ) ) }
    | ( <arrival> the earliest ) { ( VALUE [a:flight] ( APPEND super/min/arrival_time  flight ) ) }
    | ( <arrival> earliest ) { ( VALUE [a:flight] ( APPEND super/min/arrival_time  flight ) ) }
    | ( <arrival> the last ) { ( VALUE [a:flight] ( APPEND super/max/arrival_time  flight ) ) }
    | ( <arrival> last ) { ( VALUE [a:flight] ( APPEND super/max/arrival_time  flight ) ) }
    | ( <arrival> the latest ) { ( VALUE [a:flight] ( APPEND super/max/arrival_time  flight ) ) }
    | ( <arrival> latest ) { ( VALUE [a:flight] ( APPEND super/max/arrival_time  flight ) ) }
    | ( <arrival> also <time-descr> :time-descr3 ) { ( VALUE [a:flight] ( APPEND arrival_time  $time-descr3 ) ) }
    | ( <arrival> around <time> <time> :time4 ) { ( VALUE [a:flight] ( APPEND arrival_time  ( APPEND AND ( APPEND range/lower/>=  ( REL_TIME $time4 -30 ) ) ( APPEND range/upper/<=  ( REL_TIME $time4 30 ) ) ) ) ) }
    | ( <arrival> around <time> :time3 or <time> :time5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND AND ( APPEND arrival_time/range/lower/>=  ( REL_TIME $time3 -30 ) ) ( APPEND arrival_time/range/upper/<=  ( REL_TIME $time3 30 ) ) ) ( APPEND AND ( APPEND arrival_time/range/lower/>=  ( REL_TIME $time5 -30 ) ) ( APPEND arrival_time/range/upper/<=  ( REL_TIME $time5 30 ) ) ) ) ) }
    | ( <arrival> as early as possible ) { ( VALUE [a:flight] ( APPEND super/min/arrival_time  flight ) ) }
    | ( <arrival> at around <time> :time4 or <time> :time6 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND AND ( APPEND arrival_time/range/lower/>=  ( REL_TIME $time4 -30 ) ) ( APPEND arrival_time/range/upper/<=  ( REL_TIME $time4 30 ) ) ) ( APPEND AND ( APPEND arrival_time/range/lower/>=  ( REL_TIME $time6 -30 ) ) ( APPEND arrival_time/range/upper/<=  ( REL_TIME $time6 30 ) ) ) ) ) }
    | ( <arrival> earlier ) { ( READ context/time ( [a:integer] ) ) ( VALUE [b:flight] ( APPEND arrival_time/range/upper/<  ( [a:integer] ) ) ) }
    | ( <pron-rel> <flight-pred-arrival-time> :flight-pred-arrival-time2 ) { ( VALUE [a:flight] $flight-pred-arrival-time2 ) }
  ) .

<flight-mod-arrival>
  ::= ( ( <flight-mod-dest> :flight-mod-dest1 ) { ( VALUE [a:flight] $flight-mod-dest1 ) }
    | ( <flight-mod-minor> :flight-mod-minor1 ) { ( VALUE [a:flight] $flight-mod-minor1 ) }
    | ( <from-airport> :from-airport1 ) { ( VALUE [a:flight] $from-airport1 ) }
    | ( <time-descr> :time-descr1 ) { ( VALUE [a:flight] ( APPEND arrival_time  $time-descr1 ) ) }
  ) .

<flight-mod-day>
  ::= ( ( <arrival> <on-day> :on-day2 ) { ( VALUE [a:flight] $on-day2 ) }
    | ( <departure> <on-day> :on-day2 ) { ( VALUE [a:flight] $on-day2 ) }
    | ( <det> date <i-want> to leave will be <date-day-descr> :date-day-descr8 ) { ( VALUE [a:flight] ( APPEND flight_days  $date-day-descr8 ) ) ( WRITE context/date_day $date-day-descr8 ) }
    | ( <on-day> :on-day1 ) { ( VALUE [a:flight] $on-day1 ) }
    | ( <pron-rel> <flight-pred-day> :flight-pred-day2 ) { ( VALUE [a:flight] $flight-pred-day2 ) }
    | ( a daily schedule ) { ( VALUE [a:flight] ( APPEND flight_days  "DAILY" ) ) }
    | ( dailies ) { ( VALUE [a:flight] ( APPEND flight_days  "DAILY" ) ) }
    | ( daily ) { ( VALUE [a:flight] ( APPEND flight_days  "DAILY" ) ) }
    | ( daily schedule ) { ( VALUE [a:flight] ( APPEND flight_days  "DAILY" ) ) }
    | ( in the next two days ) { ( VALUE [a:flight] ( APPEND flight_days  ( APPEND OR  ( CURRENT_DATE 1 ) ( CURRENT_DATE 2 ) ) ) ) }
    | ( on a daily basis ) { ( VALUE [a:flight] ( APPEND flight_days  "DAILY" ) ) }
    | ( on a daily schedule ) { ( VALUE [a:flight] ( APPEND flight_days  "DAILY" ) ) }
    | ( on the <ordinal> :ordinal3 of the next month ) { ( VALUE [a:flight] ( APPEND flight_days  [b:date_day] ( APPEND AND ( APPEND day_number  $ordinal3 ) ( APPEND month_number  ( CURRENT_MONTH 1 ) ) ( APPEND year  ( CURRENT_YEAR ) ) ) ) ) ( WRITE context/date_day [b:date_day] ) }
  ) .

<flight-mod-departure-day-and-time>
  ::= ( ( <departure> <on-day> :on-day2 <time-descr> :time-descr3 ) { ( VALUE [a:flight] ( APPEND AND $on-day2 ( APPEND departure_time  $time-descr3 ) ) ) }
    | ( <departure> later than that <on-day> :on-day5 but later in the <interval> :interval10 ) { ( READ context/time ( [a:integer] ) ) ( VALUE [b:flight] $on-day5 ( APPEND departure_time  $interval10 ) ) }
    | ( <departure> preferably <on-day> :on-day3 <time-descr> :time-descr4 ) { ( VALUE [a:flight] ( APPEND AND $on-day3 ( APPEND departure_time  $time-descr4 ) ) ) }
    | ( <departure> this <interval> :interval3 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND departure_time  $interval3 ) ( APPEND flight_days  ( CURRENT_DATE ) ) ) ) }
    | ( <on-day> :on-day1 <time-descr> :time-descr2 or <time-descr> :time-descr4 <on-day> :on-day5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND AND $on-day1 ( APPEND departure_time  $time-descr2 ) ) ( APPEND AND ( APPEND departure_time  $time-descr4 ) $on-day5 ) ) ) }
    | ( <pron-rel> leave <time-descr> :time-descr3 <on-day> :on-day4 and <time-descr> :time-descr6 <on-day> :on-day7 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND AND ( APPEND departure_time  $time-descr3 ) $on-day4 ) ( APPEND AND ( APPEND departure_time  $time-descr6 ) $on-day7 ) ) ) }
    | ( <pron-rel> leaves early <on-day> :on-day4 morning ) { ( VALUE [a:flight] ( APPEND AND $on-day4 ( APPEND departure_time  ( APPEND AND ( APPEND range/lower/>=  0 ) ( APPEND range/upper/<=  800 ) ) ) ) ) }
    | ( <time> :time1 daily ) { ( VALUE [a:flight] ( APPEND AND ( APPEND departure_time/range/=  $time1 ) ( APPEND flight_days  "DAILY" ) ) ) }
    | ( <with-interval> :with-interval1 of <date-day-descr> :date-day-descr3 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND departure_time  $with-interval1 ) ( APPEND flight_days  $date-day-descr3 ) ) ) }
    | ( daily <time> :time2 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND flight_days  "DAILY" ) ( APPEND departure_time/range/=  $time2 ) ) ) }
    | ( early <on-day> :on-day2 ) { ( VALUE [a:flight] ( APPEND AND $on-day2 ( APPEND departure_time  ( APPEND AND ( APPEND range/lower/>=  0 ) ( APPEND range/upper/<=  1000 ) ) ) ) ) }
    | ( early <on-day> :on-day2 morning ) { ( VALUE [a:flight] ( APPEND AND $on-day2 ( APPEND departure_time  ( APPEND AND ( APPEND range/lower/>=  0 ) ( APPEND range/upper/<=  800 ) ) ) ) ) }
    | ( for <date-day-descr> :date-day-descr2 <time-descr> :time-descr3 or <date-day-descr> :date-day-descr5 <time-descr> :time-descr6 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND AND ( APPEND flight_days  $date-day-descr2 ) ( APPEND departure_time  $time-descr3 ) ) ( APPEND AND ( APPEND flight_days  $date-day-descr5 ) ( APPEND departure_time  $time-descr6 ) ) ) ) }
    | ( on <date-day-descr> :date-day-descr2 <time-descr> :time-descr3 and also <date-day-descr> :date-day-descr6 <time-descr> :time-descr7 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND AND ( APPEND flight_days  $date-day-descr2 ) ( APPEND departure_time  $time-descr3 ) ) ( APPEND AND ( APPEND flight_days  $date-day-descr6 ) ( APPEND departure_time  $time-descr7 ) ) ) ) }
    | ( on <date-day-descr> :date-day-descr2 <time-descr> :time-descr3 or <date-day-descr> :date-day-descr5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND AND ( APPEND flight_days  $date-day-descr2 ) ( APPEND departure_time  $time-descr3 ) ) ( APPEND flight_days  $date-day-descr5 ) ) ) }
    | ( on <date-day-descr> :date-day-descr2 <time-descr> :time-descr3 or <date-day-descr> :date-day-descr5 <time-descr> :time-descr6 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND AND ( APPEND flight_days  $date-day-descr2 ) ( APPEND departure_time  $time-descr3 ) ) ( APPEND AND ( APPEND flight_days  $date-day-descr5 ) ( APPEND departure_time  $time-descr6 ) ) ) ) }
    | ( on either <date-day-descr> :date-day-descr3 <time-descr> :time-descr4 or <date-day-descr> :date-day-descr6 <time-descr> :time-descr7 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND AND ( APPEND flight_days  $date-day-descr3 ) ( APPEND departure_time  $time-descr4 ) ) ( APPEND AND ( APPEND flight_days  $date-day-descr6 ) ( APPEND departure_time  $time-descr7 ) ) ) ) }
    | ( on the <interval> :interval3 of <date-day-descr> :date-day-descr5 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND departure_time  $interval3 ) ( APPEND flight_days  $date-day-descr5 ) ) ) }
    | ( the <interval> :interval2 of <date-day-descr> :date-day-descr4 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND departure_time  $interval2 ) ( APPEND flight_days  $date-day-descr4 ) ) ) }
    | ( the next <interval> :interval3 ) { ( READ context/date_day [a:date_day] ) ( VALUE [c:flight] ( APPEND AND ( APPEND departure_time  $interval3 ) ( APPEND flight_days  [b:date_day] ( FIND_DATE [a:date_day] 1 ) ) ) ) ( WRITE context/date_day [b:date_day] ) }
    | ( this <interval> :interval2 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND departure_time  $interval2 ) ( APPEND flight_days  ( CURRENT_DATE ) ) ) ) }
    | ( tonight ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND AND ( APPEND flight_days  ( CURRENT_DATE ) ) ( APPEND departure_time  ( APPEND AND ( APPEND range/lower/>=  1800 ) ( APPEND range/upper/<=  2359 ) ) ) ) ( APPEND AND ( APPEND flight_days  ( CURRENT_DATE 1 ) ) ( APPEND departure_time  ( APPEND AND ( APPEND range/lower/>=  0 ) ( APPEND range/upper/<=  600 ) ) ) ) ) ) }
    | ( tonight which is <date-day-descr> ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND AND ( APPEND flight_days  ( CURRENT_DATE ) ) ( APPEND departure_time  ( APPEND AND ( APPEND range/lower/>=  1800 ) ( APPEND range/upper/<=  2359 ) ) ) ) ( APPEND AND ( APPEND flight_days  ( CURRENT_DATE 1 ) ) ( APPEND departure_time  ( APPEND AND ( APPEND range/lower/>=  0 ) ( APPEND range/upper/<=  600 ) ) ) ) ) ) }
  ) .

<start_symbol_flight-mod-departure-list>
  ::= ( ( <flight-mod-departure> :flight-mod-departure1 ) { ( VALUE [a:flight] $flight-mod-departure1 ) }
    | ( <flight-mod-departure> :flight-mod-departure1 <flight-mod-departure> :flight-mod-departure2 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-departure1 $flight-mod-departure2 ) ) }
    | ( <flight-mod-departure> :flight-mod-departure1 <flight-mod-departure> :flight-mod-departure2 <flight-mod-departure> :flight-mod-departure3 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-departure1 $flight-mod-departure2 $flight-mod-departure3 ) ) }
    | ( <flight-mod-departure> :flight-mod-departure1 <flight-mod-departure> :flight-mod-departure2 <flight-mod-departure> :flight-mod-departure3 <flight-mod-departure> :flight-mod-departure4 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-departure1 $flight-mod-departure2 $flight-mod-departure3 $flight-mod-departure4 ) ) }
    | ( <flight-mod-departure> :flight-mod-departure1 <flight-mod-departure> :flight-mod-departure2 <flight-mod-departure> :flight-mod-departure3 <flight-mod-departure> :flight-mod-departure4 <flight-mod-departure> :flight-mod-departure5 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-departure1 $flight-mod-departure2 $flight-mod-departure3 $flight-mod-departure4 $flight-mod-departure5 ) ) }
  ) .

<flight-mod-departure-phrase>
  ::= ( ( <flight-mod-source> :flight-mod-source1 ) { ( VALUE [a:flight] $flight-mod-source1 ) }
    | ( <flight-mod-source> :flight-mod-source1 <flight-mod-departure-list> :flight-mod-departure-list2 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-source1 $flight-mod-departure-list2 ) ) }
  ) .

<start_symbol_flight-mod-departure-time>
  ::= ( ( <departure> <time-descr> :time-descr2 ) { ( VALUE [a:flight] ( APPEND departure_time  $time-descr2 ) ) }
    | ( <departure> <time> :time2 ) { ( VALUE [a:flight] ( APPEND departure_time/range/=  $time2 ) ) }
    | ( <departure> the latest ) { ( VALUE [a:flight] ( APPEND super/max/departure_time  flight ) ) }
    | ( <departure> latest ) { ( VALUE [a:flight] ( APPEND super/max/departure_time  flight ) ) }
    | ( <departure> around <time> :time3 or <time> :time5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND AND ( APPEND departure_time/range/lower/>=  ( REL_TIME $time3 -30 ) ) ( APPEND departure_time/range/upper/<=  ( REL_TIME $time3 30 ) ) ) ( APPEND AND ( APPEND departure_time/range/lower/>=  ( REL_TIME $time5 -30 ) ) ( APPEND departure_time/range/upper/<=  ( REL_TIME $time5 30 ) ) ) ) ) }
    | ( <departure> at around <time> :time4 or <time> :time6 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND AND ( APPEND departure_time/range/lower/>=  ( REL_TIME $time4 -30 ) ) ( APPEND departure_time/range/upper/<=  ( REL_TIME $time4 30 ) ) ) ( APPEND AND ( APPEND departure_time/range/lower/>=  ( REL_TIME $time6 -30 ) ) ( APPEND departure_time/range/upper/<=  ( REL_TIME $time6 30 ) ) ) ) ) }
    | ( <departure> earlier ) { ( READ context/time ( [a:integer] ) ) ( VALUE [b:flight] ( APPEND departure_time/range/upper/<  ( [a:integer] ) ) ) }
    | ( <departure> first ) { ( VALUE [a:flight] ( APPEND super/min/departure_time  flight ) ) }
    | ( <pron-rel> <flight-pred-departure-time> :flight-pred-departure-time2 ) { ( VALUE [a:flight] $flight-pred-departure-time2 ) }
    | ( and i would prefer a <interval> :interval6 flight ) { ( VALUE [a:flight] ( APPEND departure_time  $interval6 ) ) }
    | ( anytime ) 
    | ( around <time> :time2 or <time> :time4 ) { ( VALUE [a:flight] ( APPEND departure_time  ( APPEND OR  ( APPEND AND ( APPEND range/lower/>=  ( REL_TIME $time2 -30 ) ) ( APPEND range/upper/<=  ( REL_TIME $time2 30 ) ) ) ( APPEND AND ( APPEND range/lower/>=  ( REL_TIME $time4 ) ) ( APPEND range/upper/<=  ( REL_TIME $time4 ) ) ) ) ) ) }
    | ( as early as possible ) { ( VALUE [a:flight] ( APPEND super/min/departure_time  flight ) ) }
    | ( at <time> :time2 and <time> :time4 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND departure_time/range/=  $time2 ) ( APPEND departure_time/range/=  $time4 ) ) ) }
    | ( at around <time> :time3 or <time> :time5 ) { ( VALUE [a:flight] ( APPEND departure_time  ( APPEND OR  ( APPEND AND ( APPEND range/lower/>=  ( REL_TIME $time3 -30 ) ) ( APPEND range/upper/<=  ( REL_TIME $time3 30 ) ) ) ( APPEND AND ( APPEND range/lower/>=  ( REL_TIME $time5 -30 ) ) ( APPEND range/upper/<=  ( REL_TIME $time5 30 ) ) ) ) ) ) }
    | ( at the same time ) { ( READ context/time ( [a:integer] ) ) ( VALUE [b:flight] ( APPEND departure_time  ( [a:integer] ) ) ) }
    | ( departure time <time-descr> :time-descr3 ) { ( VALUE [a:flight] ( APPEND departure_time  $time-descr3 ) ) }
    | ( first thing in the morning ) { ( VALUE [a:flight] ( APPEND AND ( APPEND super/min/departure_time  flight ) ( APPEND departure_time  ( APPEND AND ( APPEND range/lower/>=  0 ) ( APPEND range/upper/<=  1200 ) ) ) ) ) }
  ) .

<start_symbol_flight-mod-departure>
  ::= ( ( <flight-mod-minor> :flight-mod-minor1 ) { ( VALUE [a:flight] $flight-mod-minor1 ) }
    | ( <flight-mod-source> :flight-mod-source1 ) { ( VALUE [a:flight] $flight-mod-source1 ) }
    | ( <time-descr> :time-descr1 ) { ( VALUE [a:flight] ( APPEND departure_time  $time-descr1 ) ) }
  ) .

<start_symbol_flight-mod-dest>
  ::= ( ( <flight-mod-to-airport> :flight-mod-to-airport1 ) { ( VALUE [a:flight] $flight-mod-to-airport1 ) }
  ) .

<flight-mod-empty>
  ::= ( ( <pron-rel> you have ) 
    | ( again ) 
    | ( also ) 
    | ( available ) 
    | ( you have ) 
  ) .

<flight-mod-fare>
  ::= ( ( <pron-rel> are the <cheapest> <return-type> :return-type5 ) { ( VALUE [a:flight] ( APPEND fare  ( APPEND AND ( APPEND super/min/one_direction_cost/fare  flight ) $return-type5 ) ) ) }
    | ( <pron-rel> are the <highest> <return-type> :return-type5 ) { ( VALUE [a:flight] ( APPEND fare  ( APPEND AND ( APPEND super/max/one_direction_cost/fare  flight ) $return-type5 ) ) ) }
    | ( <with-class> :with-class1 ) { ( VALUE [a:flight] ( APPEND fare/class_type  $with-class1 ) ) ( WRITE context/fare/class_type $with-class1 ) }
    | ( for <cost-upper-bound> :cost-upper-bound2 ) { ( VALUE [a:flight] ( APPEND fare/round_trip_cost  $cost-upper-bound2 ) ) }
    | ( for <cost-upper-bound> :cost-upper-bound2 round trip ) { ( VALUE [a:flight] ( APPEND fare/round_trip_cost  $cost-upper-bound2 ) ) }
    | ( whose round trip <fare> is <cost-upper-bound> :cost-upper-bound6 ) { ( VALUE [a:flight] ( APPEND fare/round_trip_cost  $cost-upper-bound6 ) ) }
    | ( with <fare-descr> :fare-descr2 ) { ( VALUE [a:flight] ( APPEND fare  $fare-descr2 ) ) }
  ) .

<flight-mod-flight-number>
  ::= ( ( <airline-code> :airline-code1 <flight-number> :flight-number2 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND airline/airline_code  $airline-code1 ) ( APPEND flight_number  $flight-number2 ) ) ) }
    | ( <airline-name> :airline-name1 <flight-number> :flight-number2 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND airline/airline_code  $airline-name1 ) ( APPEND flight_number  $flight-number2 ) ) ) }
    | ( <airline-name> :airline-name1 <flight-number> :flight-number2 and <flight-number> :flight-number4 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND airline/airline_code  $airline-name1 ) ( APPEND OR  ( APPEND flight_number  $flight-number2 ) ( APPEND flight_number  $flight-number4 ) ) ) ) }
    | ( <airline-name> :airline-name1 <flight-number> :flight-number2 dash <flight-number> :flight-number4 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND airline/airline_code  $airline-name1 ) ( APPEND OR  ( APPEND flight_number  $flight-number2 ) ( APPEND flight_number  $flight-number4 ) ) ) ) }
    | ( <airline-name> :airline-name1 <flight-number> :flight-number2 or <flight-number> :flight-number4 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND airline/airline_code  $airline-name1 ) ( APPEND OR  ( APPEND flight_number  $flight-number2 ) ( APPEND flight_number  $flight-number4 ) ) ) ) }
    | ( <airline-name> :airline-name1 <flight-number> :flight-number2 slash <flight-number> :flight-number4 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND airline/airline_code  $airline-name1 ) ( APPEND OR  ( APPEND flight_number  $flight-number2 ) ( APPEND flight_number  $flight-number4 ) ) ) ) }
    | ( <flight-number> :flight-number1 and <flight-number> :flight-number3 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND flight_number  $flight-number1 ) ( APPEND flight_number  $flight-number3 ) ) ) }
    | ( <flight-number> :flight-number1 dash <flight-number> :flight-number3 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND flight_number  $flight-number1 ) ( APPEND flight_number  $flight-number3 ) ) ) }
    | ( <flight-number> :flight-number1 or <flight-number> :flight-number3 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND flight_number  $flight-number1 ) ( APPEND flight_number  $flight-number3 ) ) ) }
    | ( <flight-number> :flight-number1 slash <flight-number> :flight-number3 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND flight_number  $flight-number1 ) ( APPEND flight_number  $flight-number3 ) ) ) }
    | ( number <flight-number> :flight-number2 ) { ( VALUE [a:flight] ( APPEND flight_number  $flight-number2 ) ) }
    | ( <flight-number> :flight-number1 ) { ( VALUE [a:flight] ( APPEND flight_number  $flight-number1 ) ) }
    | ( number <flight-number> :flight-number2 and <flight-number> :flight-number4 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND flight_number  $flight-number2 ) ( APPEND flight_number  $flight-number4 ) ) ) }
    | ( <flight-number> :flight-number1 and <flight-number> :flight-number3 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND flight_number  $flight-number1 ) ( APPEND flight_number  $flight-number3 ) ) ) }
    | ( number <flight-number> :flight-number2 dash <flight-number> :flight-number4 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND flight_number  $flight-number2 ) ( APPEND flight_number  $flight-number4 ) ) ) }
    | ( <flight-number> :flight-number1 dash <flight-number> :flight-number3 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND flight_number  $flight-number1 ) ( APPEND flight_number  $flight-number3 ) ) ) }
    | ( number <flight-number> :flight-number2 or <flight-number> :flight-number4 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND flight_number  $flight-number2 ) ( APPEND flight_number  $flight-number4 ) ) ) }
    | ( <flight-number> :flight-number1 or <flight-number> :flight-number3 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND flight_number  $flight-number1 ) ( APPEND flight_number  $flight-number3 ) ) ) }
    | ( number <flight-number> :flight-number2 slash <flight-number> :flight-number4 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND flight_number  $flight-number2 ) ( APPEND flight_number  $flight-number4 ) ) ) }
    | ( <flight-number> :flight-number1 slash <flight-number> :flight-number3 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND flight_number  $flight-number1 ) ( APPEND flight_number  $flight-number3 ) ) ) }
    | ( on <airline-name> :airline-name2 <flight-number> :flight-number3 and <airline-name> :airline-name5 <flight-number> :flight-number6 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND AND ( APPEND airline/airline_code  $airline-name2 ) ( APPEND flight_number  $flight-number3 ) ) ( APPEND AND ( APPEND airline/airline_code  $airline-name5 ) ( APPEND flight_number  $flight-number6 ) ) ) ) }
  ) .

<flight-mod-flight-stop>
  ::= ( ( <flight-stop-descr> :flight-stop-descr1 ) { ( VALUE [a:flight] ( APPEND flight_stop  $flight-stop-descr1 ) ) }
    | ( <i-want> <flight-stop-descr> :flight-stop-descr2 ) { ( VALUE [a:flight] ( APPEND flight_stop  $flight-stop-descr2 ) ) }
    | ( <i-want> it to <flight-pred-flight-stop> :flight-pred-flight-stop4 ) { ( VALUE [a:flight] $flight-pred-flight-stop4 ) }
    | ( <i-want> to <flight-pred-flight-stop> :flight-pred-flight-stop3 ) { ( VALUE [a:flight] $flight-pred-flight-stop3 ) }
    | ( <pron-rel> <flight-pred-flight-stop> :flight-pred-flight-stop2 ) { ( VALUE [a:flight] $flight-pred-flight-stop2 ) }
    | ( and <i-want> to <flight-pred-flight-stop> :flight-pred-flight-stop4 ) { ( VALUE [a:flight] $flight-pred-flight-stop4 ) }
    | ( and <i-want> to have <flight-stop-descr> :flight-stop-descr5 ) { ( VALUE [a:flight] ( APPEND flight_stop  $flight-stop-descr5 ) ) }
    | ( but <i-want> to <flight-pred-flight-stop> :flight-pred-flight-stop4 ) { ( VALUE [a:flight] $flight-pred-flight-stop4 ) }
    | ( by way of <city-descr> :city-descr4 ) { ( VALUE [a:flight] ( APPEND flight_stop/city  $city-descr4 ) ) }
    | ( i'm also planning to stop in <city-descr> :city-descr7 ) { ( VALUE [a:flight] ( APPEND flight_stop/city  $city-descr7 ) ) }
    | ( laying over in <city-descr> :city-descr4 ) { ( VALUE [a:flight] ( APPEND flight_stop/city  $city-descr4 ) ) }
    | ( making <flight-stop-descr> :flight-stop-descr2 ) { ( VALUE [a:flight] ( APPEND flight_stop  $flight-stop-descr2 ) ) }
    | ( stopover <city-descr> :city-descr2 ) { ( VALUE [a:flight] ( APPEND flight_stop/city  $city-descr2 ) ) }
    | ( stopping at <city-descr> :city-descr3 ) { ( VALUE [a:flight] ( APPEND flight_stop/city  $city-descr3 ) ) }
    | ( stopping in <city-descr> :city-descr3 ) { ( VALUE [a:flight] ( APPEND flight_stop/city  $city-descr3 ) ) }
    | ( stopping over in <city-descr> :city-descr4 ) { ( VALUE [a:flight] ( APPEND flight_stop/city  $city-descr4 ) ) }
    | ( through <city-descr> :city-descr2 ) { ( VALUE [a:flight] ( APPEND flight_stop/city  $city-descr2 ) ) }
    | ( via <city-descr> :city-descr2 ) { ( VALUE [a:flight] ( APPEND flight_stop/city  $city-descr2 ) ) }
    | ( with <flight-stop-descr> :flight-stop-descr2 ) { ( VALUE [a:flight] ( APPEND flight_stop  $flight-stop-descr2 ) ) }
  ) .

<flight-mod-from-airport-to-airport>
  ::= ( ( <from-airport-to-airport> :from-airport-to-airport1 ) { ( VALUE [a:flight] $from-airport-to-airport1 ) }
    | ( flying <from-airport-to-airport> :from-airport-to-airport2 ) { ( VALUE [a:flight] $from-airport-to-airport2 ) }
    | ( flying <from-airport> :from-airport2 <to-airport> :to-airport3 ) { ( VALUE [a:flight] ( APPEND AND $from-airport2 $to-airport3 ) ) }
    | ( for <city-descr> :city-descr2 <to-airport> :to-airport3 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND from_city  $city-descr2 ) $to-airport3 ) ) }
    | ( to get <from-airport-to-airport> :from-airport-to-airport3 ) { ( VALUE [a:flight] $from-airport-to-airport3 ) }
    | ( to get <from-airport> :from-airport3 <to-airport> :to-airport4 ) { ( VALUE [a:flight] ( APPEND AND $from-airport3 $to-airport4 ) ) }
  ) .

<flight-mod-from-airport>
  ::= ( ( <departure> <city-descr> :city-descr2 ) { ( VALUE [a:flight] ( APPEND from_city  $city-descr2 ) ) }
    | ( <departure> <from-airport> :from-airport2 ) { ( VALUE [a:flight] $from-airport2 ) }
    | ( <from-airport> :from-airport1 ) { ( VALUE [a:flight] $from-airport1 ) }
    | ( <pron-rel> <flight-pred-from-airport> :flight-pred-from-airport2 ) { ( VALUE [a:flight] $flight-pred-from-airport2 ) }
    | ( back <from-airport> :from-airport2 ) { ( VALUE [a:flight] $from-airport2 ) }
  ) .

<flight-mod-general>
  ::= ( ( <flight-mod-minor> :flight-mod-minor1 ) { ( VALUE [a:flight] $flight-mod-minor1 ) }
    | ( <time-descr> :time-descr1 ) { ( VALUE [a:flight] ( APPEND departure_time  $time-descr1 ) ) }
  ) .

<flight-mod-intro>
  ::= ( ( <on-day> :on-day1 ) { ( VALUE [a:flight] $on-day1 ) }
    | ( <on-day> :on-day1 <on-day> :on-day2 ) { ( VALUE [a:flight] ( APPEND AND $on-day1 $on-day2 ) ) }
    | ( in the next two days ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND flight_days  ( CURRENT_DATE 1 ) ) ( APPEND flight_days  ( CURRENT_DATE 2 ) ) ) ) ( WRITE context/date_day ( APPEND OR  ( CURRENT_DATE 1 ) ( CURRENT_DATE 2 ) ) ) }
  ) .

<start_symbol_flight-mod-meal>
  ::= ( ( <flight-descr> should also serve <meal-descr> :meal-descr5 ) { ( VALUE [a:flight] ( APPEND meal  $meal-descr5 ) ) }
    | ( <i-want> to have <meal-descr> :meal-descr4 <served> ) { ( VALUE [a:flight] ( APPEND meal  $meal-descr4 ) ) }
    | ( <may> i please <have-meal> :have-meal4 on my flight ) { ( VALUE [a:flight] ( APPEND meal  $have-meal4 ) ) }
    | ( <pron-rel> <have-meal> :have-meal2 ) { ( VALUE [a:flight] ( APPEND meal  $have-meal2 ) ) }
    | ( <pron-rel> serves a snack ) { ( VALUE [a:flight] ( APPEND meal/meal_description  "SNACK" ) ) }
    | ( and <i-want> <meal-descr> :meal-descr3 ) { ( VALUE [a:flight] ( APPEND meal  $meal-descr3 ) ) }
    | ( hopefully a <food-service-meal-description> :food-service-meal-description3 flight ) { ( VALUE [a:flight] ( APPEND meal/meal_description  $food-service-meal-description3 ) ) }
    | ( including <meal-descr> :meal-descr2 ) { ( VALUE [a:flight] ( APPEND meal  $meal-descr2 ) ) }
    | ( serving <meal-descr> :meal-descr2 ) { ( VALUE [a:flight] ( APPEND meal  $meal-descr2 ) ) }
    | ( with <meal-descr> :meal-descr2 ) { ( VALUE [a:flight] ( APPEND meal  $meal-descr2 ) ) }
    | ( with <meal-descr> :meal-descr2 <served> ) { ( VALUE [a:flight] ( APPEND meal  $meal-descr2 ) ) }
  ) .

<flight-mod-minor-phrase>
  ::= ( ( <flight-mod-minor> :flight-mod-minor1 ) { ( VALUE [a:flight] $flight-mod-minor1 ) }
    | ( <flight-mod-minor> :flight-mod-minor1 <flight-mod-general> :flight-mod-general2 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-minor1 $flight-mod-general2 ) ) }
    | ( <flight-mod-minor> :flight-mod-minor1 <flight-mod-general> :flight-mod-general2 <flight-mod-general> :flight-mod-general3 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-minor1 $flight-mod-general2 $flight-mod-general3 ) ) }
    | ( <time-descr> :time-descr1 ) { ( VALUE [a:flight] ( APPEND departure_time  $time-descr1 ) ) }
    | ( <time-descr> :time-descr1 <flight-mod-general> :flight-mod-general2 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND departure_time  $time-descr1 ) $flight-mod-general2 ) ) }
    | ( <time-descr> :time-descr1 <flight-mod-general> :flight-mod-general2 <flight-mod-general> :flight-mod-general3 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND departure_time  $time-descr1 ) $flight-mod-general2 $flight-mod-general3 ) ) }
  ) .

<flight-mod-minor>
  ::= ( ( <economy> :economy1 ) { ( VALUE [a:flight] ( APPEND fare  $economy1 ) ) }
    | ( <fare-mod-cost-upper-bound> :fare-mod-cost-upper-bound1 ) { ( VALUE [a:flight] ( APPEND fare  $fare-mod-cost-upper-bound1 ) ) ( WRITE context/fare $fare-mod-cost-upper-bound1 ) }
    | ( <fare-mod-restriction> :fare-mod-restriction1 ) { ( VALUE [a:flight] ( APPEND fare  $fare-mod-restriction1 ) ) }
    | ( <fare-mod-return-type> :fare-mod-return-type1 ) { ( VALUE [a:flight] ( APPEND fare  $fare-mod-return-type1 ) ) }
    | ( <flight-mod-aircraft> :flight-mod-aircraft1 ) { ( VALUE [a:flight] $flight-mod-aircraft1 ) }
    | ( <flight-mod-airline> :flight-mod-airline1 ) { ( VALUE [a:flight] $flight-mod-airline1 ) }
    | ( <flight-mod-arrival-time> :flight-mod-arrival-time1 ) { ( VALUE [a:flight] $flight-mod-arrival-time1 ) }
    | ( <flight-mod-day> :flight-mod-day1 ) { ( VALUE [a:flight] $flight-mod-day1 ) }
    | ( <flight-mod-day> :flight-mod-day1 and <flight-mod-to-airport> :flight-mod-to-airport3 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-day1 $flight-mod-to-airport3 ) ) }
    | ( <flight-mod-departure-day-and-time> :flight-mod-departure-day-and-time1 ) { ( VALUE [a:flight] $flight-mod-departure-day-and-time1 ) }
    | ( <flight-mod-departure-time> :flight-mod-departure-time1 ) { ( VALUE [a:flight] $flight-mod-departure-time1 ) }
    | ( <flight-mod-departure-time> :flight-mod-departure-time1 and <flight-mod-arrival-time> :flight-mod-arrival-time3 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-departure-time1 $flight-mod-arrival-time3 ) ) }
    | ( <flight-mod-empty> ) 
    | ( <flight-mod-fare> :flight-mod-fare1 ) { ( VALUE [a:flight] $flight-mod-fare1 ) }
    | ( <flight-mod-flight-stop> :flight-mod-flight-stop1 ) { ( VALUE [a:flight] $flight-mod-flight-stop1 ) }
    | ( <flight-mod-meal> :flight-mod-meal1 ) { ( VALUE [a:flight] $flight-mod-meal1 ) }
    | ( <flight-mod-num-connections> :flight-mod-num-connections1 ) { ( VALUE [a:flight] $flight-mod-num-connections1 ) }
    | ( <flight-mod-num-stops> :flight-mod-num-stops1 ) { ( VALUE [a:flight] $flight-mod-num-stops1 ) }
    | ( <flight-mod-to-or-from-airport> :flight-mod-to-or-from-airport1 ) { ( VALUE [a:flight] $flight-mod-to-or-from-airport1 ) }
    | ( <from-airport-layover-to-airport> :from-airport-layover-to-airport1 ) { ( VALUE [a:flight] $from-airport-layover-to-airport1 ) }
    | ( <pron-rel> <flight-pred-aircraft> :flight-pred-aircraft2 ) { ( VALUE [a:flight] $flight-pred-aircraft2 ) }
    | ( <pron-rel> <flight-pred-num-stops> :flight-pred-num-stops2 and <flight-pred-arrival-time> :flight-pred-arrival-time4 ) { ( VALUE [a:flight] ( APPEND AND $flight-pred-num-stops2 $flight-pred-arrival-time4 ) ) }
    | ( <pron-rel> are <flight-mod-airline> :flight-mod-airline3 ) { ( VALUE [a:flight] $flight-mod-airline3 ) }
    | ( <pron-rel> are on the same airline as <det> other <flight> ) { ( READ context/airline ( [a:airline] ) ) ( VALUE [b:flight] ( APPEND airline  ( [a:airline] ) ) ) }
    | ( <pron-rel> are on the same airline as <flight-descr> ) { ( READ context/airline ( [a:airline] ) ) ( VALUE [b:flight] ( APPEND airline  ( [a:airline] ) ) ) }
    | ( <pron-rel> does not leave on weekends ) { ( VALUE [a:flight] ( APPEND flight_days/days/"NOT/SA  SU" ) ) }
    | ( <to-airport> :to-airport1 ) { ( VALUE [a:flight] $to-airport1 ) }
    | ( <with-seating-capacity-smallest> ) { ( VALUE [a:flight] ( APPEND aircraft  ( APPEND super/min/capacity/flight  aircraft ) ) ) }
    | ( at <airport-name> :airport-name2 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND from_airport/airport_code  $airport-name2 ) ( APPEND to_airport/airport_code  $airport-name2 ) ) ) ( WRITE context/airport ( APPEND airport_code  $airport-name2 ) ) }
    | ( from <city-descr> :city-descr2 and <city-descr> :city-descr4 <to-airport> :to-airport5 <arrival> at the same time ) { ( VALUE ( APPEND OR  ( APPEND AND ( APPEND from_city  $city-descr2 ) $to-airport5 ) ( APPEND AND ( APPEND from_city  $city-descr4 ) $to-airport5 ) ) ) }
    | ( with round trip required ) { ( VALUE [a:flight] ( APPEND fare/round_trip_required  "YES" ) ) }
  ) .

<flight-mod-num-connections>
  ::= ( ( <det> <flight-adj-num-connections> :flight-adj-num-connections2 <flight> ) { ( VALUE [a:flight] $flight-adj-num-connections2 ) }
    | ( <det> <flight-adj-num-connections> :flight-adj-num-connections2 <flight> if possible ) { ( VALUE [a:flight] $flight-adj-num-connections2 ) }
    | ( <flight-adj-num-connections> :flight-adj-num-connections1 <flight> if possible ) { ( VALUE [a:flight] $flight-adj-num-connections1 ) }
  ) .

<flight-mod-num-stops>
  ::= ( ( <det> <flight-adj-num-stops> :flight-adj-num-stops2 <flight> ) { ( VALUE [a:flight] $flight-adj-num-stops2 ) }
    | ( <det> <flight-adj-num-stops> :flight-adj-num-stops2 <flight> if possible ) { ( VALUE [a:flight] $flight-adj-num-stops2 ) }
    | ( <flight-adj-num-stops> :flight-adj-num-stops1 <flight> if possible ) { ( VALUE [a:flight] $flight-adj-num-stops1 ) }
    | ( <pron-rel> <flight-pred-num-stops> :flight-pred-num-stops2 ) { ( VALUE [a:flight] $flight-pred-num-stops2 ) }
    | ( no <flight-stop> ) { ( VALUE [a:flight] ( APPEND num_stops/range  0 ) ) }
    | ( nonstop ) { ( VALUE [a:flight] ( APPEND num_stops/range  0 ) ) }
    | ( with <flight-stop> ) { ( VALUE [a:flight] ( APPEND num_stops/range  1 ) ) }
    | ( with a <flight-stop> ) { ( VALUE [a:flight] ( APPEND num_stops/range  1 ) ) }
    | ( with at least one <flight-stop> ) { ( VALUE [a:flight] ( APPEND num_stops/range/lower/>  0 ) ) }
    | ( with one <flight-stop> ) { ( VALUE [a:flight] ( APPEND num_stops/range  1 ) ) }
    | ( with zero <flight-stop> ) { ( VALUE [a:flight] ( APPEND num_stops/range  0 ) ) }
    | ( zero <flight-stop> ) { ( VALUE [a:flight] ( APPEND num_stops/range  0 ) ) }
  ) .

<start_symbol_flight-mod-phrase>
  ::= ( ( <flight-mod-arrival-phrase> :flight-mod-arrival-phrase1 ) { ( VALUE [a:flight] $flight-mod-arrival-phrase1 ) }
    | ( <flight-mod-arrival-phrase> :flight-mod-arrival-phrase1 and <flight-mod-departure-phrase> :flight-mod-departure-phrase3 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-arrival-phrase1 $flight-mod-departure-phrase3 ) ) }
    | ( <flight-mod-arrival-phrase> :flight-mod-arrival-phrase1 <flight-mod-departure-phrase> :flight-mod-departure-phrase2 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-arrival-phrase1 $flight-mod-departure-phrase2 ) ) }
    | ( <flight-mod-departure-phrase> :flight-mod-departure-phrase1 ) { ( VALUE [a:flight] $flight-mod-departure-phrase1 ) }
    | ( <flight-mod-departure-phrase> :flight-mod-departure-phrase1 <flight-mod-departure-phrase> :flight-mod-departure-phrase2 and then <flight-mod-departure-phrase> :flight-mod-departure-phrase5 ) { ( VALUE [a:flight] ( APPEND OR  $flight-mod-departure-phrase1 $flight-mod-departure-phrase2 $flight-mod-departure-phrase5 ) ) }
    | ( <flight-mod-departure-phrase> :flight-mod-departure-phrase1 <flight-mod-departure-phrase> :flight-mod-departure-phrase2 and <flight-mod-departure-phrase> :flight-mod-departure-phrase4 ) { ( VALUE [a:flight] ( APPEND OR  $flight-mod-departure-phrase1 $flight-mod-departure-phrase2 $flight-mod-departure-phrase4 ) ) }
    | ( <flight-mod-departure-phrase> :flight-mod-departure-phrase1 and <flight-mod-arrival-phrase> :flight-mod-arrival-phrase3 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-departure-phrase1 $flight-mod-arrival-phrase3 ) ) }
    | ( <flight-mod-departure-phrase> :flight-mod-departure-phrase1 <flight-mod-arrival-phrase> :flight-mod-arrival-phrase2 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-departure-phrase1 $flight-mod-arrival-phrase2 ) ) }
    | ( <flight-mod-departure-phrase> :flight-mod-departure-phrase1 and <flight-mod-departure-phrase> :flight-mod-departure-phrase3 ) { ( VALUE [b:flight] ( APPEND OR  $flight-mod-departure-phrase1 $flight-mod-departure-phrase3 ) ) }
    | ( <flight-mod-departure-phrase> :flight-mod-departure-phrase1 and <flight-mod-minor-phrase> :flight-mod-minor-phrase3 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-departure-phrase1 $flight-mod-minor-phrase3 ) ) }
    | ( <flight-mod-departure-phrase> :flight-mod-departure-phrase1 and <flight-pred-departure> :flight-pred-departure3 ) { ( VALUE [b:flight] ( APPEND OR  $flight-mod-departure-phrase1 $flight-pred-departure3 ) ) }
    | ( <flight-mod-departure-phrase> :flight-mod-departure-phrase1 and then <flight-mod-departure-phrase> :flight-mod-departure-phrase4 and <flight-mod-departure-phrase> :flight-mod-departure-phrase6 ) { ( VALUE [a:flight] ( APPEND OR  $flight-mod-departure-phrase1 $flight-mod-departure-phrase4 $flight-mod-departure-phrase6 ) ) }
    | ( <flight-mod-minor-phrase> :flight-mod-minor-phrase1 ) { ( VALUE [a:flight] $flight-mod-minor-phrase1 ) }
    | ( <flight-mod-minor-phrase> :flight-mod-minor-phrase1 <flight-mod-arrival-phrase> :flight-mod-arrival-phrase2 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-minor-phrase1 $flight-mod-arrival-phrase2 ) ) }
    | ( <flight-mod-minor-phrase> :flight-mod-minor-phrase1 <flight-mod-arrival-phrase> :flight-mod-arrival-phrase2 <flight-mod-departure-phrase> :flight-mod-departure-phrase3 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-minor-phrase1 $flight-mod-arrival-phrase2 $flight-mod-departure-phrase3 ) ) }
    | ( <flight-mod-minor-phrase> :flight-mod-minor-phrase1 <flight-mod-departure-phrase> :flight-mod-departure-phrase2 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-minor-phrase1 $flight-mod-departure-phrase2 ) ) }
    | ( <flight-mod-minor-phrase> :flight-mod-minor-phrase1 <flight-mod-departure-phrase> :flight-mod-departure-phrase2 <flight-mod-arrival-phrase> :flight-mod-arrival-phrase3 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-minor-phrase1 $flight-mod-departure-phrase2 $flight-mod-arrival-phrase3 ) ) }
    | ( <flight-mod-minor-phrase> :flight-mod-minor-phrase1 <flight-mod-departure-phrase> :flight-mod-departure-phrase2 and <flight-mod-arrival-phrase> :flight-mod-arrival-phrase4 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-minor-phrase1 $flight-mod-departure-phrase2 $flight-mod-arrival-phrase4 ) ) }
    | ( <flight-mod-minor-phrase> :flight-mod-minor-phrase1 <flight-mod-departure-phrase> :flight-mod-departure-phrase2 and then <flight-mod-departure-phrase> :flight-mod-departure-phrase5 ) { ( VALUE [a:flight] ( APPEND AND $flight-mod-minor-phrase1 ( APPEND OR  $flight-mod-departure-phrase2 $flight-mod-departure-phrase5 ) ) ) }
    | ( <flight-mod-phrase> :flight-mod-phrase1 same conditions ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) ( WRITE context/flight [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase1 ) ) }
    | ( <pron-rel> <flight-pred-departure> :flight-pred-departure2 <flight-pred-arrival> :flight-pred-arrival3 and <flight-pred-arrival> :flight-pred-arrival5 ) { ( VALUE [a:flight] ( APPEND AND $flight-pred-departure2 $flight-pred-arrival3 $flight-pred-arrival5 ) ) }
    | ( <pron-rel> <flight-pred-departure> :flight-pred-departure2 and <flight-pred-arrival> :flight-pred-arrival4 ) { ( VALUE [a:flight] ( APPEND AND $flight-pred-departure2 $flight-pred-arrival4 ) ) }
  ) .

<flight-mod-source>
  ::= ( ( <flight-mod-from-airport-to-airport> :flight-mod-from-airport-to-airport1 ) { ( VALUE [a:flight] $flight-mod-from-airport-to-airport1 ) }
    | ( <flight-mod-from-airport> :flight-mod-from-airport1 ) { ( VALUE [a:flight] $flight-mod-from-airport1 ) }
  ) .

<start_symbol_flight-mod-to-airport>
  ::= ( ( <arrival> <city-descr> :city-descr2 ) { ( VALUE [a:flight] ( APPEND to_city  $city-descr2 ) ) }
    | ( <arrival> <to-airport> :to-airport2 ) { ( VALUE [a:flight] $to-airport2 ) }
    | ( <pron-rel> <flight-pred-to-airport> :flight-pred-to-airport2 ) { ( VALUE [a:flight] $flight-pred-to-airport2 ) }
    | ( back <to-airport> :to-airport2 ) { ( VALUE [a:flight] $to-airport2 ) }
    | ( flying <to-airport> :to-airport2 ) { ( VALUE [a:flight] $to-airport2 ) }
  ) .

<flight-mod-to-or-from-airport>
  ::= ( ( <arrival> and <departure> at <airport-descr> :airport-descr5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND from_airport  $airport-descr5 ) ( APPEND to_airport  $airport-descr5 ) ) ) }
    | ( <pron-rel> <arrive> and <depart> from <airport-descr> :airport-descr6 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND from_airport  $airport-descr6 ) ( APPEND to_airport  $airport-descr6 ) ) ) }
    | ( taking off and landing on <airport-descr> :airport-descr6 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND from_airport  $airport-descr6 ) ( APPEND to_airport  $airport-descr6 ) ) ) }
    | ( to and from <airport-descr> :airport-descr4 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND from_airport  $airport-descr4 ) ( APPEND to_airport  $airport-descr4 ) ) ) }
    | ( to or from <airport-descr> :airport-descr4 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND from_airport  $airport-descr4 ) ( APPEND to_airport  $airport-descr4 ) ) ) }
  ) .

<flight-number-param>
  ::= ( ( <det> <flight-adj> :flight-adj2 flight number ) { ( VALUE [a:flight] $flight-adj2 ) ( WRITE context/flight $flight-adj2 ) }
    | ( <flight-adj> :flight-adj1 flight number ) { ( VALUE [a:flight] $flight-adj1 ) ( WRITE context/flight $flight-adj1 ) }
    | ( <det> flight number ) 
    | ( flight number ) 
    | ( <det> <flight-adj> :flight-adj2 flight numbers ) { ( VALUE [a:flight] $flight-adj2 ) ( WRITE context/flight $flight-adj2 ) }
    | ( <flight-adj> :flight-adj1 flight numbers ) { ( VALUE [a:flight] $flight-adj1 ) ( WRITE context/flight $flight-adj1 ) }
    | ( <det> flight numbers ) 
    | ( flight numbers ) 
  ) .

<flight-number>
  ::= ( ( <double-digit> :double-digit1 ) { ( VALUE [a:flight] $double-digit1 ) }
    | ( <four-digit> :four-digit1 ) { ( VALUE [a:flight_number] $four-digit1 ) }
    | ( <non-zero-digit> :non-zero-digit1 ) { ( VALUE [a:flight_number] $non-zero-digit1 ) }
    | ( <three-digit> :three-digit1 ) { ( VALUE [a:flight_number] $three-digit1 ) }
    | ( <three-digit> :three-digit1 <three-digit> :three-digit2 ) { ( VALUE [a:flight_number] ( APPEND AND ( APPEND first_leg  $three-digit1 ) ( APPEND second_leg  $three-digit2 ) ) ) }
  ) .

<start_symbol_flight-numq>
  ::= ( ( <det> number of <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( how many <flight-adj-list> :flight-adj-list3 <flight> ) { ( VALUE [a:flight] $flight-adj-list3 ) ( WRITE context/flight $flight-adj-list3 ) }
    | ( how many <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( how many of these <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( number of <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
  ) .

<start_symbol_flight-pred-aircraft>
  ::= ( ( fly on <aircraft-descr> :aircraft-descr3 ) { ( VALUE [a:flight] ( APPEND aircraft  $aircraft-descr3 ) ) }
    | ( has <aircraft-descr> :aircraft-descr2 ) { ( VALUE [a:flight] ( APPEND aircraft  $aircraft-descr2 ) ) }
    | ( have <aircraft-descr> :aircraft-descr2 ) { ( VALUE [a:flight] ( APPEND aircraft  $aircraft-descr2 ) ) }
    | ( is <aircraft-descr> :aircraft-descr2 ) { ( VALUE [a:flight] ( APPEND aircraft  $aircraft-descr2 ) ) }
    | ( is on <aircraft-descr> :aircraft-descr3 ) { ( VALUE [a:flight] ( APPEND aircraft  $aircraft-descr3 ) ) }
    | ( use <aircraft-descr> :aircraft-descr2 ) { ( VALUE [a:flight] ( APPEND aircraft  $aircraft-descr2 ) ) }
    | ( uses <aircraft-descr> :aircraft-descr2 ) { ( VALUE [a:flight] ( APPEND aircraft  $aircraft-descr2 ) ) }
  ) .

<flight-pred-airline>
  ::= ( ( do <airline-descr> :airline-descr2 have ) { ( VALUE [a:flight] ( APPEND airline  $airline-descr2 ) ) }
    | ( does <airline-descr> :airline-descr2 have ) { ( VALUE [a:flight] ( APPEND airline  $airline-descr2 ) ) }
    | ( are <airline-descr> :airline-descr2 ) { ( VALUE [a:flight] ( APPEND airline  $airline-descr2 ) ) }
    | ( are on <airline-descr> :airline-descr3 ) { ( VALUE [a:flight] ( APPEND airline  $airline-descr3 ) ) }
    | ( should be <airline-descr> :airline-descr3 ) { ( VALUE [a:flight] ( APPEND airline  $airline-descr3 ) ) }
  ) .

<start_symbol_flight-pred-arrival-time>
  ::= ( ( <arrive> <time-descr> :time-descr2 ) { ( VALUE [a:flight] ( APPEND arrival_time  $time-descr2 ) ) }
    | ( <arrive> <time> :time2 ) { ( VALUE [a:flight] ( APPEND arrival_time/range/=  $time2 ) ) }
    | ( <arrive> the last ) { ( VALUE [a:flight] ( APPEND super/max/arrival_time  flight ) ) }
    | ( <arrive> last ) { ( VALUE [a:flight] ( APPEND super/max/arrival_time  flight ) ) }
    | ( <arrive> the latest ) { ( VALUE [a:flight] ( APPEND super/max/arrival_time  flight ) ) }
    | ( <arrive> latest ) { ( VALUE [a:flight] ( APPEND super/max/arrival_time  flight ) ) }
    | ( <arrive> the earliest ) { ( VALUE [a:flight] ( APPEND super/min/arrival_time  flight ) ) }
    | ( <arrive> earliest ) { ( VALUE [a:flight] ( APPEND super/min/arrival_time  flight ) ) }
    | ( <arrive> around <time> <time> :time4 ) { ( VALUE [a:flight] ( APPEND arrival_time  ( APPEND AND ( APPEND range/lower/>=  ( REL_TIME $time4 -30 ) ) ( APPEND range/upper/<=  ( REL_TIME $time4 30 ) ) ) ) ) }
    | ( <arrive> as early as possible ) { ( VALUE [a:flight] ( APPEND super/min/arrival_time  flight ) ) }
    | ( <arrive> at around <time> :time4 or <time> :time6 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND AND ( APPEND arrival_time/range/lower/>=  ( REL_TIME $time4 -30 ) ) ( APPEND arrival_time/range/upper/<=  ( REL_TIME $time4 30 ) ) ) ( APPEND AND ( APPEND arrival_time/range/lower/>=  ( REL_TIME $time6 -30 ) ) ( APPEND arrival_time/range/upper/<=  ( REL_TIME $time6 30 ) ) ) ) ) }
    | ( <arrive> around <time> :time3 or <time> :time5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND AND ( APPEND arrival_time/range/lower/>=  ( REL_TIME $time3 -30 ) ) ( APPEND arrival_time/range/upper/<=  ( REL_TIME $time3 30 ) ) ) ( APPEND AND ( APPEND arrival_time/range/lower/>=  ( REL_TIME $time5 -30 ) ) ( APPEND arrival_time/range/upper/<=  ( REL_TIME $time5 30 ) ) ) ) ) }
    | ( <arrive> earlier ) { ( READ context/time ( [a:integer] ) ) ( VALUE [b:flight] ( APPEND arrival_time/range/upper/<  ( [a:integer] ) ) ) }
    | ( has the <earliest> arrival ) { ( VALUE [a:flight] ( APPEND super/min/arrival_time  flight ) ) }
  ) .

<start_symbol_flight-pred-arrival>
  ::= ( ( <flight-pred-arrival-time> :flight-pred-arrival-time1 <flight-mod-arrival-list> :flight-mod-arrival-list2 ) { ( VALUE [a:flight] ( APPEND AND $flight-pred-arrival-time1 $flight-mod-arrival-list2 ) ) }
    | ( <flight-pred-arrival-time> :flight-pred-arrival-time1 ) { ( VALUE [a:flight] $flight-pred-arrival-time1 ) }
    | ( <flight-pred-to-airport> :flight-pred-to-airport1 <flight-mod-arrival-list> :flight-mod-arrival-list2 ) { ( VALUE [a:flight] ( APPEND AND $flight-pred-to-airport1 $flight-mod-arrival-list2 ) ) }
    | ( <flight-pred-to-airport> :flight-pred-to-airport1 ) { ( VALUE [a:flight] $flight-pred-to-airport1 ) }
  ) .

<flight-pred-day>
  ::= ( ( <arrive> <on-day> :on-day2 ) { ( VALUE [a:flight] $on-day2 ) }
    | ( <depart> <on-day> :on-day2 ) { ( VALUE [a:flight] $on-day2 ) }
    | ( <fly> <on-day> :on-day2 ) { ( VALUE [a:flight] $on-day2 ) }
    | ( does not travel on a weekend ) { ( VALUE [a:flight] ( APPEND flight_days/days/"NOT/SA  SU" ) ) }
  ) .

<flight-pred-departure-time>
  ::= ( ( <depart> <cardinal> hours before arriving ) { ( VALUE [a:flight] ( APPEND time_elapsed/range  540 ) ) }
    | ( <depart> <time-descr> :time-descr2 ) { ( VALUE [a:flight] ( APPEND departure_time  $time-descr2 ) ) }
    | ( <depart> <time-descr> :time-descr2 or <depart> <time-descr> :time-descr5 ) { ( VALUE [a:flight] ( APPEND departure_time  ( APPEND OR  $time-descr2 $time-descr5 ) ) ) }
    | ( <depart> <time> :time2 ) { ( VALUE [a:flight] ( APPEND departure_time/range/=  $time2 ) ) }
    | ( <depart> the last ) { ( VALUE [a:flight] ( APPEND super/max/departure_time  flight ) ) }
    | ( <depart> last ) { ( VALUE [a:flight] ( APPEND super/max/departure_time  flight ) ) }
    | ( <depart> the latest ) { ( VALUE [a:flight] ( APPEND super/max/departure_time  flight ) ) }
    | ( <depart> latest ) { ( VALUE [a:flight] ( APPEND super/max/departure_time  flight ) ) }
    | ( <depart> at around <time> :time4 or <time> :time6 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND AND ( APPEND departure_time/range/lower/>=  ( REL_TIME $time4 -30 ) ) ( APPEND departure_time/range/upper/<=  ( REL_TIME $time4 30 ) ) ) ( APPEND AND ( APPEND departure_time/range/lower/>=  ( REL_TIME $time6 -30 ) ) ( APPEND departure_time/range/upper/<=  ( REL_TIME $time6 30 ) ) ) ) ) }
    | ( <depart> first ) { ( VALUE [a:flight] ( APPEND super/min/departure_time  flight ) ) }
    | ( is the last ) { ( VALUE [a:flight] ( APPEND super/max/departure_time  flight ) ) }
    | ( is last ) { ( VALUE [a:flight] ( APPEND super/max/departure_time  flight ) ) }
    | ( is the latest ) { ( VALUE [a:flight] ( APPEND super/max/departure_time  flight ) ) }
    | ( is latest ) { ( VALUE [a:flight] ( APPEND super/max/departure_time  flight ) ) }
    | ( is the earliest ) { ( VALUE [a:flight] ( APPEND super/min/departure_time  flight ) ) }
    | ( is the earliest possible ) { ( VALUE [a:flight] ( APPEND super/min/departure_time  flight ) ) }
    | ( is the earliest ) { ( VALUE [a:flight] ( APPEND super/min/departure_time  flight ) ) }
  ) .

<start_symbol_flight-pred-departure>
  ::= ( ( <flight-pred-departure-time> :flight-pred-departure-time1 <flight-mod-departure-list> :flight-mod-departure-list2 ) { ( VALUE [a:flight] ( APPEND AND $flight-pred-departure-time1 $flight-mod-departure-list2 ) ) }
    | ( <flight-pred-departure-time> :flight-pred-departure-time1 ) { ( VALUE [a:flight] $flight-pred-departure-time1 ) }
    | ( <flight-pred-from-airport> :flight-pred-from-airport1 <flight-mod-departure-list> :flight-mod-departure-list2 ) { ( VALUE [a:flight] ( APPEND AND $flight-pred-from-airport1 $flight-mod-departure-list2 ) ) }
    | ( <flight-pred-from-airport> :flight-pred-from-airport1 ) { ( VALUE [a:flight] $flight-pred-from-airport1 ) }
  ) .

<flight-pred-fare>
  ::= ( ( are <fare-descr> :fare-descr2 ) { ( VALUE [a:flight] ( APPEND fare  $fare-descr2 ) ) }
    | ( is <fare-descr> :fare-descr2 ) { ( VALUE [a:flight] ( APPEND fare  $fare-descr2 ) ) }
    | ( are the <cheapest> ) { ( VALUE [a:flight] ( APPEND fare  ( SUPER min one_direction_cost fare flight ) ) ) }
    | ( is the <cheapest> ) { ( VALUE [a:flight] ( APPEND fare  ( SUPER min one_direction_cost fare flight ) ) ) }
    | ( are <cheapest> ) { ( VALUE [a:flight] ( APPEND fare  ( SUPER min one_direction_cost fare flight ) ) ) }
    | ( is <cheapest> ) { ( VALUE [a:flight] ( APPEND fare  ( SUPER min one_direction_cost fare flight ) ) ) }
    | ( are the <highest> ) { ( VALUE [a:flight] ( APPEND fare  ( SUPER max one_direction_cost fare flight ) ) ) }
    | ( is the <highest> ) { ( VALUE [a:flight] ( APPEND fare  ( SUPER max one_direction_cost fare flight ) ) ) }
    | ( are <highest> ) { ( VALUE [a:flight] ( APPEND fare  ( SUPER max one_direction_cost fare flight ) ) ) }
    | ( is <highest> ) { ( VALUE [a:flight] ( APPEND fare  ( SUPER max one_direction_cost fare flight ) ) ) }
    | ( cost at least <cost> :cost4 ) { ( VALUE [a:flight] ( APPEND fare/one_direction_cost/range/lower/>=  $cost4 ) ) ( WRITE context/fare ( APPEND one_direction_cost/range/lower/>=  $cost4 ) ) ( WRITE context/flight ( [a:flight] ) ) }
    | ( costs at least <cost> :cost4 ) { ( VALUE [a:flight] ( APPEND fare/one_direction_cost/range/lower/>=  $cost4 ) ) ( WRITE context/fare ( APPEND one_direction_cost/range/lower/>=  $cost4 ) ) ( WRITE context/flight ( [a:flight] ) ) }
    | ( has <fare-descr> :fare-descr2 ) { ( VALUE [a:flight] ( APPEND fare  $fare-descr2 ) ) }
    | ( have <fare-descr> :fare-descr2 ) { ( VALUE [a:flight] ( APPEND fare  $fare-descr2 ) ) ( WRITE context/fare $fare-descr2 ) }
    | ( has <fare-param> of <cost> :cost4 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND fare  ( [b:fare] ) ) ) ) ( WRITE context/fare [b:fare] ( APPEND one_direction_cost/range/upper/<=  $cost4 ) ) }
    | ( have <fare-param> of <cost> :cost4 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND fare  ( [b:fare] ) ) ) ) ( WRITE context/fare [b:fare] ( APPEND one_direction_cost/range/upper/<=  $cost4 ) ) }
  ) .

<start_symbol_flight-pred-flight-stop>
  ::= ( ( <stop> at <city-descr> :city-descr3 ) { ( VALUE [a:flight] ( APPEND flight_stop/city  $city-descr3 ) ) }
    | ( <stop> in <city-descr> :city-descr3 ) { ( VALUE [a:flight] ( APPEND flight_stop/city  $city-descr3 ) ) }
    | ( <stop> through <city-descr> :city-descr3 ) { ( VALUE [a:flight] ( APPEND flight_stop/city  $city-descr3 ) ) }
    | ( <stop> at <city-descr> :city-descr3 <flight-stop-mod> :flight-stop-mod4 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND flight_stop/city  $city-descr3 ) $flight-stop-mod4 ) ) }
    | ( <stop> in <city-descr> :city-descr3 <flight-stop-mod> :flight-stop-mod4 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND flight_stop/city  $city-descr3 ) $flight-stop-mod4 ) ) }
    | ( <stop> through <city-descr> :city-descr3 <flight-stop-mod> :flight-stop-mod4 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND flight_stop/city  $city-descr3 ) $flight-stop-mod4 ) ) }
    | ( go through <city-descr> :city-descr3 ) { ( VALUE [a:flight] ( APPEND flight_stop/city  $city-descr3 ) ) }
    | ( go through <city-descr> :city-descr3 <flight-stop-mod> :flight-stop-mod4 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND flight_stop/city  $city-descr3 ) $flight-stop-mod4 ) ) }
  ) .

<start_symbol_flight-pred-from-airport>
  ::= ( ( <depart> <airport-descr> :airport-descr2 ) { ( VALUE [a:flight] ( APPEND from_airport  $airport-descr2 ) ) }
    | ( <depart> <city-descr> :city-descr2 ) { ( VALUE [a:flight] ( APPEND from_city  $city-descr2 ) ) }
    | ( <depart> <from-airport> :from-airport2 ) { ( VALUE [a:flight] $from-airport2 ) }
    | ( <fly> <from-airport> :from-airport2 ) { ( VALUE [a:flight] $from-airport2 ) }
  ) .

<flight-pred-num-stops>
  ::= ( ( are nonstop ) { ( VALUE [a:flight] ( APPEND num_stops/range  0 ) ) }
    | ( is nonstop ) { ( VALUE [a:flight] ( APPEND num_stops/range  0 ) ) }
    | ( fly nonstop ) { ( VALUE [a:flight] ( APPEND num_stops/range  0 ) ) }
    | ( have <flight-stop> ) { ( VALUE [a:flight] ( APPEND num_stops/range/lower/>=  1 ) ) }
    | ( have more than one <flight-stop> ) { ( VALUE [a:flight] ( APPEND num_stops/range/lower/>  1 ) ) }
    | ( make at least one <flight-stop> ) { ( VALUE [a:flight] ( APPEND num_stops/range/lower/>  0 ) ) }
    | ( makes a <flight-stop> ) { ( VALUE [a:flight] ( APPEND num_stops/range  1 ) ) }
  ) .

<start_symbol_flight-pred-to-airport>
  ::= ( ( <arrive> <city-descr> :city-descr2 ) { ( VALUE [a:flight] ( APPEND to_city  $city-descr2 ) ) }
    | ( <arrive> <to-airport> :to-airport2 ) { ( VALUE [a:flight] $to-airport2 ) }
    | ( <fly> <to-airport> :to-airport2 ) { ( VALUE [a:flight] $to-airport2 ) }
  ) .

<flight-pred>
  ::= ( ( <arrive> and <depart> <time-descr> :time-descr4 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND arrival_time  $time-descr4 ) ( APPEND departure_time  $time-descr4 ) ) ) }
    | ( <flight-pred-aircraft> :flight-pred-aircraft1 ) { ( VALUE [a:flight] $flight-pred-aircraft1 ) }
    | ( <flight-pred-airline> :flight-pred-airline1 ) { ( VALUE [a:flight] $flight-pred-airline1 ) }
    | ( <flight-pred-airline> :flight-pred-airline1 <flight-mod-day> :flight-mod-day2 ) { ( VALUE [a:flight] ( APPEND AND $flight-pred-airline1 $flight-mod-day2 ) ) }
    | ( <flight-pred-airline> :flight-pred-airline1 <flight-mod-from-airport> :flight-mod-from-airport2 <flight-mod-day> :flight-mod-day3 ) { ( VALUE [a:flight] ( APPEND AND $flight-pred-airline1 $flight-mod-from-airport2 $flight-mod-day3 ) ) }
    | ( <flight-pred-arrival> :flight-pred-arrival1 ) { ( VALUE [a:flight] $flight-pred-arrival1 ) }
    | ( <flight-pred-day> :flight-pred-day1 ) { ( VALUE [a:flight] $flight-pred-day1 ) }
    | ( <flight-pred-day> :flight-pred-day1 <time-descr> :time-descr2 ) { ( VALUE [a:flight] ( APPEND AND $flight-pred-day1 ( APPEND arrival_time  $time-descr2 ) ) ) }
    | ( <flight-pred-departure-time> :flight-pred-departure-time1 and <flight-pred-flight-stop> :flight-pred-flight-stop3 ) { ( VALUE [a:flight] ( APPEND AND $flight-pred-departure-time1 $flight-pred-flight-stop3 ) ) }
    | ( <flight-pred-departure-time> :flight-pred-departure-time1 and <have-restriction> :have-restriction3 ) { ( VALUE [a:flight] ( APPEND AND $flight-pred-departure-time1 ( APPEND fare  $have-restriction3 ) ) ) }
    | ( <flight-pred-departure> :flight-pred-departure1 ) { ( VALUE [a:flight] $flight-pred-departure1 ) }
    | ( <flight-pred-departure> :flight-pred-departure1 and <flight-pred-arrival> :flight-pred-arrival3 ) { ( VALUE [a:flight] ( APPEND AND $flight-pred-departure1 $flight-pred-arrival3 ) ) }
    | ( <flight-pred-departure> :flight-pred-departure1 and <flight-pred-departure> :flight-pred-departure3 ) { ( VALUE [a:flight] ( APPEND AND $flight-pred-departure1 $flight-pred-departure3 ) ) }
    | ( <flight-pred-departure> :flight-pred-departure1 and <flight-pred-flight-stop> :flight-pred-flight-stop3 ) { ( VALUE [a:flight] ( APPEND AND $flight-pred-departure1 $flight-pred-flight-stop3 ) ) }
    | ( <flight-pred-departure> :flight-pred-departure1 but <flight-pred-flight-stop> :flight-pred-flight-stop3 ) { ( VALUE [a:flight] ( APPEND AND $flight-pred-departure1 $flight-pred-flight-stop3 ) ) }
    | ( <flight-pred-fare> :flight-pred-fare1 ) { ( VALUE [a:flight] $flight-pred-fare1 ) }
    | ( <flight-pred-flight-stop> :flight-pred-flight-stop1 ) { ( VALUE [a:flight] $flight-pred-flight-stop1 ) }
    | ( <flight-pred-num-stops> :flight-pred-num-stops1 ) { ( VALUE [a:flight] $flight-pred-num-stops1 ) }
    | ( <have-meal> :have-meal1 ) { ( VALUE [a:flight] ( APPEND meal  $have-meal1 ) ) }
    | ( <have-restriction> :have-restriction1 ) { ( VALUE [a:flight] ( APPEND fare  $have-restriction1 ) ) }
    | ( are <class-type> :class-type2 ) { ( VALUE [a:flight] ( APPEND fare/class_type  $class-type2 ) ) ( WRITE context/fare ( APPEND class_type  $class-type2 ) ) }
    | ( have <class-type> :class-type2 ) { ( VALUE [a:flight] ( APPEND fare/class_type  $class-type2 ) ) ( WRITE context/fare ( APPEND class_type  $class-type2 ) ) }
    | ( have the longest <flight-stop> in <city-descr> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ) }
  ) .

<start_symbol_flight-stop-descr>
  ::= ( ( <flight-stop> in <city-descr> :city-descr3 ) { ( VALUE [a:flight_stop] ( APPEND city  $city-descr3 ) ) }
    | ( a <flight-stop> in <city-descr> :city-descr4 ) { ( VALUE [a:flight_stop] ( APPEND city  $city-descr4 ) ) }
    | ( one <flight-stop> in <city-descr> :city-descr4 ) { ( VALUE [a:flight_stop] ( APPEND city  $city-descr4 ) ) }
  ) .

<flight-stop-mod>
  ::= ( ( <time-descr> :time-descr1 ) { ( VALUE [a:flight] ( APPEND flight_stop/arrival_time  $time-descr1 ) ) }
    | ( along the way ) 
    | ( around <time> :time2 or <time> :time4 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND AND ( APPEND flight_stop/arrival_time/range/lower/>=  ( REL_TIME $time2 -30 ) ) ( APPEND flight_stop/arrival_time/range/upper/<=  ( REL_TIME $time2 30 ) ) ) ( APPEND AND ( APPEND flight_stop/arrival_time/range/lower/>=  ( REL_TIME $time4 -30 ) ) ( APPEND flight_stop/arrival_time/range/upper/<=  ( REL_TIME $time4 30 ) ) ) ) ) }
    | ( at around <time> :time3 or <time> :time5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND AND ( APPEND flight_stop/arrival_time/range/lower/>=  ( REL_TIME $time3 -30 ) ) ( APPEND flight_stop/arrival_time/range/upper/<=  ( REL_TIME $time3 30 ) ) ) ( APPEND AND ( APPEND flight_stop/arrival_time/range/lower/>=  ( REL_TIME $time5 -30 ) ) ( APPEND flight_stop/arrival_time/range/upper/<=  ( REL_TIME $time5 30 ) ) ) ) ) }
    | ( on the way ) 
  ) .

<flight-stop>
  ::= ( ( connection ) 
    | ( connections ) 
    | ( layover ) 
    | ( layovers ) 
    | ( stop ) 
    | ( stop off ) 
    | ( stopover ) 
    | ( stopovers ) 
    | ( stops ) 
  ) .

<flight-wh>
  ::= ( ( what <flight-adj-list> :flight-adj-list2 <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) $flight-adj-list2 ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( what <flight-adj-list> :flight-adj-list2 <flight> <flight-mod-phrase> :flight-mod-phrase4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-adj-list2 $flight-mod-phrase4 ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( what <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( what <flight> <flight-mod-phrase> :flight-mod-phrase3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase3 ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( what other <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( which ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( which <flight-adj-list> :flight-adj-list2 <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) $flight-adj-list2 ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( which <flight-adj-list> :flight-adj-list2 <flight> <flight-mod-phrase> :flight-mod-phrase4 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) ( APPEND AND $flight-adj-list2 $flight-mod-phrase4 ) ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( which <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( which <flight> <flight-mod-phrase> :flight-mod-phrase3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase3 ) ) ( WRITE context/flight ( [b:flight] ) ) }
    | ( which of <det> above <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( which of <det> above <flight> <flight-mod-phrase> :flight-mod-phrase6 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) $flight-mod-phrase6 ) ) }
    | ( which of <flight-descr> :flight-descr3 ) { ( READ context/flight ( [a:flight] ) ) ( VALUE [b:flight] ( UPDATE ( [a:flight] ) $flight-descr3 ) ) }
    | ( which of these ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( which of those ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( which one of these ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( which one of these <flight> ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( which ones of them ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
  ) .

<flight>
  ::= ( ( airline flight ) 
    | ( airline flights ) 
    | ( flight ) 
    | ( flights ) 
    | ( nonstops ) 
    | ( one ) 
    | ( ones ) 
    | ( plane ) 
    | ( round trips ) 
    | ( ticket ) 
    | ( tickets ) 
    | ( trip ) 
    | ( trips ) 
  ) .

<start_symbol_fly>
  ::= ( ( continue ) 
    | ( do you have ) 
    | ( flies ) 
    | ( fly ) 
    | ( go ) 
    | ( goes ) 
    | ( runs ) 
    | ( travel ) 
    | ( will fly me ) 
    | ( will take me ) 
  ) .

<food-service-meal-code-compound-descr>
  ::= ( ( <det> meal <code> <food-service-meal-code-compound> :food-service-meal-code-compound4 ) { ( VALUE $food-service-meal-code-compound4 ) }
    | ( meal <code> <food-service-meal-code-compound> :food-service-meal-code-compound3 ) { ( VALUE $food-service-meal-code-compound3 ) }
    | ( meal <food-service-meal-code-compound> :food-service-meal-code-compound2 ) { ( VALUE $food-service-meal-code-compound2 ) }
  ) .

<food-service-meal-code-compound>
  ::= ( ( b b slash b s ) { ( VALUE "%BB/BS%" ) }
    | ( b b slash s b ) { ( VALUE "%BB/SB%" ) }
    | ( b b slash s s ) { ( VALUE "%BB/SS%" ) }
    | ( b d slash b s ) { ( VALUE "%BD/BS%" ) }
    | ( b l d slash b s d ) { ( VALUE "%BLD/BSD%" ) }
    | ( b l d slash s l d ) { ( VALUE "%BLD/SLD%" ) }
    | ( b l s slash b l ) { ( VALUE "%BLS/BL%" ) }
    | ( b l s slash b s ) { ( VALUE "%BLS/BS%" ) }
    | ( b l slash b s ) { ( VALUE "%BL/BS%" ) }
    | ( b l slash b s l ) { ( VALUE "%BL/BSL%" ) }
    | ( b l slash s ) { ( VALUE "%BL/S%" ) }
    | ( b l slash s l ) { ( VALUE "%BL/SL%" ) }
    | ( b l slash s s ) { ( VALUE "%BL/SS%" ) }
    | ( b s d slash s ) { ( VALUE "%BSD/S%" ) }
    | ( b s l slash b l ) { ( VALUE "%BSL/BL%" ) }
    | ( b s s slash b s ) { ( VALUE "%BSS/BS%" ) }
    | ( b s slash b ) { ( VALUE "%BS/B%" ) }
    | ( b s slash s ) { ( VALUE "%BS/S%" ) }
    | ( b s slash s s ) { ( VALUE "%BS/SS%" ) }
    | ( b slash ) { ( VALUE "%B/%" ) }
    | ( b slash b s ) { ( VALUE "%B/BS%" ) }
    | ( b slash s ) { ( VALUE "%B/S%" ) }
    | ( b slash s b ) { ( VALUE "%B/SB%" ) }
    | ( d d slash d s ) { ( VALUE "%DD/DS%" ) }
    | ( d d slash s d ) { ( VALUE "%DD/SD%" ) }
    | ( d s slash d ) { ( VALUE "%DS/D%" ) }
    | ( d s slash s ) { ( VALUE "%DS/S%" ) }
    | ( d s slash s s ) { ( VALUE "%DS/SS%" ) }
    | ( d slash d s ) { ( VALUE "%D/DS%" ) }
    | ( d slash s ) { ( VALUE "%D/S%" ) }
    | ( d slash s d ) { ( VALUE "%D/SD%" ) }
    | ( l d s slash l d ) { ( VALUE "%LDS/LD%" ) }
    | ( l d slash l s ) { ( VALUE "%LD/LS%" ) }
    | ( l d slash l s d ) { ( VALUE "%LD/LSD%" ) }
    | ( l d slash s ) { ( VALUE "%LD/S%" ) }
    | ( l d slash s d ) { ( VALUE "%LD/SD%" ) }
    | ( l d slash s s ) { ( VALUE "%LD/SS%" ) }
    | ( l l slash l ) { ( VALUE "%LL/L%" ) }
    | ( l l slash l s ) { ( VALUE "%LL/LS%" ) }
    | ( l l slash s ) { ( VALUE "%LL/S%" ) }
    | ( l s d slash l d ) { ( VALUE "%LSD/LD%" ) }
    | ( l s slash l ) { ( VALUE "%LS/L%" ) }
    | ( l s slash s ) { ( VALUE "%LS/S%" ) }
    | ( l s slash s s ) { ( VALUE "%LS/SS%" ) }
    | ( l slash ) { ( VALUE "%L/%" ) }
    | ( l slash s ) { ( VALUE "%L/S%" ) }
    | ( l slash s l ) { ( VALUE "%L/SL%" ) }
    | ( s b l slash b l ) { ( VALUE "%SBL/BL%" ) }
    | ( s b s slash b ) { ( VALUE "%SBS/B%" ) }
    | ( s b s slash b s ) { ( VALUE "%SBS/BS%" ) }
    | ( s b s slash s b ) { ( VALUE "%SBS/SB%" ) }
    | ( s b slash b ) { ( VALUE "%SB/B%" ) }
    | ( s b slash s ) { ( VALUE "%SB/S%" ) }
    | ( s b slash s s ) { ( VALUE "%SB/SS%" ) }
    | ( s d s slash d ) { ( VALUE "%SDS/D%" ) }
    | ( s d s slash d s ) { ( VALUE "%SDS/DS%" ) }
    | ( s d slash d ) { ( VALUE "%SD/D%" ) }
    | ( s d slash s ) { ( VALUE "%SD/S%" ) }
    | ( s d slash s s ) { ( VALUE "%SD/SS%" ) }
    | ( s l d slash s l ) { ( VALUE "%SLD/SL%" ) }
    | ( s l s slash l s ) { ( VALUE "%SLS/LS%" ) }
    | ( s l slash l ) { ( VALUE "%SL/L%" ) }
    | ( s l slash s ) { ( VALUE "%SL/S%" ) }
    | ( s l slash s s ) { ( VALUE "%SL/SS%" ) }
    | ( s s l slash l ) { ( VALUE "%SSL/L%" ) }
    | ( s s l slash s l ) { ( VALUE "%SSL/SL%" ) }
    | ( s s slash ) { ( VALUE "%SS/%" ) }
    | ( s s slash s ) { ( VALUE "%SS/S%" ) }
    | ( s slash ) { ( VALUE "%S/%" ) }
  ) .

<food-service-meal-code-simple-descr>
  ::= ( ( <det> meal <code> ) 
    | ( <det> meal <code> <food-service-meal-code-simple> :food-service-meal-code-simple4 ) { ( VALUE $food-service-meal-code-simple4 ) }
    | ( meal <code> <food-service-meal-code-simple> :food-service-meal-code-simple3 ) { ( VALUE $food-service-meal-code-simple3 ) }
    | ( meal <food-service-meal-code-simple> :food-service-meal-code-simple2 ) { ( VALUE $food-service-meal-code-simple2 ) }
  ) .

<food-service-meal-code-simple>
  ::= ( ( b ) { ( VALUE "B" ) }
    | ( b b ) { ( VALUE "BB" ) }
    | ( b d ) { ( VALUE "BD" ) }
    | ( b l ) { ( VALUE "BL" ) }
    | ( b l d ) { ( VALUE "BLD" ) }
    | ( b l s ) { ( VALUE "BLS" ) }
    | ( b s ) { ( VALUE "BS" ) }
    | ( b s d ) { ( VALUE "BSD" ) }
    | ( b s l ) { ( VALUE "BSL" ) }
    | ( d ) { ( VALUE "D" ) }
    | ( d b ) { ( VALUE "DB" ) }
    | ( d d ) { ( VALUE "DD" ) }
    | ( d s ) { ( VALUE "DS" ) }
    | ( l ) { ( VALUE "L" ) }
    | ( l d ) { ( VALUE "LD" ) }
    | ( l l ) { ( VALUE "LL" ) }
    | ( l s ) { ( VALUE "LS" ) }
    | ( s ) { ( VALUE "S" ) }
    | ( s b ) { ( VALUE "SB" ) }
    | ( s b l ) { ( VALUE "SBL" ) }
    | ( s b s ) { ( VALUE "SBS" ) }
    | ( s d ) { ( VALUE "SD" ) }
    | ( s l ) { ( VALUE "SL" ) }
    | ( s l d ) { ( VALUE "SLD" ) }
    | ( s s ) { ( VALUE "SS" ) }
    | ( s s d ) { ( VALUE "SSD" ) }
    | ( s s l ) { ( VALUE "SSL" ) }
  ) .

<food-service-meal-description>
  ::= ( ( breakfast ) { ( VALUE "BREAKFAST" ) }
    | ( dinner ) { ( VALUE "DINNER" ) }
    | ( lunch ) { ( VALUE "LUNCH" ) }
    | ( snack ) { ( VALUE "SNACK" ) }
    | ( supper ) { ( VALUE "DINNER" ) }
  ) .

<start_symbol_four-digit>
  ::= ( ( <double-digit> :double-digit1 oh <digit> :digit3 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $double-digit1 ) ( VALUE 0 $digit3 ) ) ) }
    | ( <double-digit> :double-digit1 zero <digit> :digit3 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $double-digit1 ) ( VALUE 0 $digit3 ) ) ) }
    | ( <double-digit> :double-digit1 <double-digit> :double-digit2 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $double-digit1 ) ( VALUE 0 $double-digit2 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 thousand <non-zero-digit> :non-zero-digit3 hundred and <double-digit> :double-digit6 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 3 $non-zero-digit1 ) ( VALUE 2 $non-zero-digit3 ) ( VALUE 0 $double-digit6 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 thousand <non-zero-digit> :non-zero-digit3 hundred <double-digit> :double-digit5 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 3 $non-zero-digit1 ) ( VALUE 2 $non-zero-digit3 ) ( VALUE 0 $double-digit5 ) ) ) }
  ) .

<start_symbol_from-airport-layover-to-airport>
  ::= ( ( <city-descr> :city-descr1 to <city-descr> :city-descr3 and then to <city-descr> :city-descr7 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND from_city  $city-descr1 ) ( APPEND to_city  $city-descr7 ) ( APPEND flight_stop/city  $city-descr3 ) ) ) ( WRITE context/city $city-descr7 ) }
    | ( from <city-descr> :city-descr2 to <city-descr> :city-descr4 and then on to <city-descr> :city-descr9 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND from_city  $city-descr2 ) ( APPEND to_city  $city-descr9 ) ( APPEND flight_stop/city  $city-descr4 ) ) ) ( WRITE context/city $city-descr9 ) }
    | ( from <city-descr> :city-descr2 to <city-descr> :city-descr4 and then to <city-descr> :city-descr8 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND from_city  $city-descr2 ) ( APPEND to_city  $city-descr8 ) ( APPEND flight_stop/city  $city-descr4 ) ) ) ( WRITE context/city $city-descr8 ) }
    | ( from <city-descr> :city-descr2 to <city-descr> :city-descr4 continuing on then to <city-descr> :city-descr9 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND from_city  $city-descr2 ) ( APPEND to_city  $city-descr9 ) ( APPEND flight_stop/city  $city-descr4 ) ) ) ( WRITE context/city $city-descr9 ) }
    | ( from <city-descr> :city-descr2 to <city-descr> :city-descr4 then to <city-descr> :city-descr7 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND from_city  $city-descr2 ) ( APPEND to_city  $city-descr7 ) ( APPEND flight_stop/city  $city-descr4 ) ) ) ( WRITE context/city $city-descr7 ) }
    | ( from <city-descr> :city-descr2 to <city-descr> :city-descr4 to <city-descr> :city-descr6 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND from_city  $city-descr2 ) ( APPEND to_city  $city-descr6 ) ( APPEND flight_stop/city  $city-descr4 ) ) ) ( WRITE context/city $city-descr6 ) }
    | ( leaving <city-descr> :city-descr2 to <city-descr> :city-descr4 and then to <city-descr> :city-descr8 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND from_city  $city-descr2 ) ( APPEND to_city  $city-descr8 ) ( APPEND flight_stop/city  $city-descr4 ) ) ) ( WRITE context/city $city-descr8 ) }
  ) .

<start_symbol_from-airport-to-airport>
  ::= ( ( <city-descr> :city-descr1 <city-descr> :city-descr2 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND from_city  $city-descr1 ) ( APPEND to_city  $city-descr2 ) ) ) }
    | ( <city-descr> :city-descr1 <to-airport> :to-airport2 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND from_city  $city-descr1 ) $to-airport2 ) ) }
    | ( between <city-descr> :city-descr2 and <city-descr> :city-descr4 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND from_city  $city-descr2 ) ( APPEND to_city  $city-descr4 ) ) ) }
    | ( departing from <city-descr> :city-descr3 and landing in <city-descr> :city-descr7 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND from_city  $city-descr3 ) ( APPEND to_city  $city-descr7 ) ) ) }
    | ( going from <city-descr> :city-descr3 to <city-descr> :city-descr5 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND from_city  $city-descr3 ) ( APPEND to_city  $city-descr5 ) ) ) }
    | ( in <city-descr> :city-descr2 to <city-descr> :city-descr4 ) { ( VALUE [a:flight] ( APPEND AND ( APPEND from_city  $city-descr2 ) ( APPEND to_city  $city-descr4 ) ) ) }
  ) .

<from-airport>
  ::= ( ( either from <city-descr> :city-descr3 or <city-descr> :city-descr5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND from_city  $city-descr3 ) ( APPEND from_city  $city-descr5 ) ) ) ( WRITE context/city ( APPEND OR  $city-descr3 $city-descr5 ) ) }
    | ( from <airport-descr> :airport-descr2 ) { ( VALUE [a:flight] ( APPEND from_airport  $airport-descr2 ) ) ( WRITE context/airport $airport-descr2 ) }
    | ( out of <airport-descr> :airport-descr3 ) { ( VALUE [a:flight] ( APPEND from_airport  $airport-descr3 ) ) ( WRITE context/airport $airport-descr3 ) }
    | ( from <city-descr> :city-descr2 ) { ( VALUE [a:flight] ( APPEND from_city  $city-descr2 ) ) ( WRITE context/city $city-descr2 ) }
    | ( out of <city-descr> :city-descr3 ) { ( VALUE [a:flight] ( APPEND from_city  $city-descr3 ) ) ( WRITE context/city $city-descr3 ) }
    | ( from <airport-descr> :airport-descr2 and <city-descr> :city-descr4 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND from_airport  $airport-descr2 ) ( APPEND from_city  $city-descr4 ) ) ) ( WRITE context/airport $airport-descr2 ) ( WRITE context/city $city-descr4 ) }
    | ( from <airport-descr> :airport-descr2 or <city-descr> :city-descr4 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND from_airport  $airport-descr2 ) ( APPEND from_city  $city-descr4 ) ) ) ( WRITE context/airport $airport-descr2 ) ( WRITE context/city $city-descr4 ) }
    | ( from <airport-descr> :airport-descr2 and from <airport-descr> :airport-descr5 ) { ( VALUE [a:flight] ( APPEND from_airport  ( APPEND OR  $airport-descr2 $airport-descr5 ) ) ) ( WRITE context/airport ( APPEND OR  $airport-descr2 $airport-descr5 ) ) }
    | ( from <airport-descr> :airport-descr2 or from <airport-descr> :airport-descr5 ) { ( VALUE [a:flight] ( APPEND from_airport  ( APPEND OR  $airport-descr2 $airport-descr5 ) ) ) ( WRITE context/airport ( APPEND OR  $airport-descr2 $airport-descr5 ) ) }
    | ( from <airport-descr> :airport-descr2 and from <city-descr> :city-descr5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND from_airport  $airport-descr2 ) ( APPEND from_city  $city-descr5 ) ) ) ( WRITE context/airport $airport-descr2 ) ( WRITE context/city $city-descr5 ) }
    | ( from <airport-descr> :airport-descr2 or from <city-descr> :city-descr5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND from_airport  $airport-descr2 ) ( APPEND from_city  $city-descr5 ) ) ) ( WRITE context/airport $airport-descr2 ) ( WRITE context/city $city-descr5 ) }
    | ( from <city-descr> :city-descr2 and <airport-descr> :airport-descr4 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND from_city  $city-descr2 ) ( APPEND from_airport  $airport-descr4 ) ) ) ( WRITE context/city $city-descr2 ) ( WRITE context/airport $airport-descr4 ) }
    | ( from <city-descr> :city-descr2 or <airport-descr> :airport-descr4 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND from_city  $city-descr2 ) ( APPEND from_airport  $airport-descr4 ) ) ) ( WRITE context/city $city-descr2 ) ( WRITE context/airport $airport-descr4 ) }
    | ( from <city-descr> :city-descr2 and from <airport-descr> :airport-descr5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND from_city  $city-descr2 ) ( APPEND from_airport  $airport-descr5 ) ) ) ( WRITE context/city $city-descr2 ) ( WRITE context/airport $airport-descr5 ) }
    | ( from <city-descr> :city-descr2 or from <airport-descr> :airport-descr5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND from_city  $city-descr2 ) ( APPEND from_airport  $airport-descr5 ) ) ) ( WRITE context/city $city-descr2 ) ( WRITE context/airport $airport-descr5 ) }
    | ( from <city-descr> :city-descr2 and from <city-descr> :city-descr5 ) { ( VALUE [a:flight] ( APPEND from_city  ( APPEND OR  $city-descr2 $city-descr5 ) ) ) ( WRITE context/city ( APPEND OR  $city-descr2 $city-descr5 ) ) }
    | ( from <city-descr> :city-descr2 or from <city-descr> :city-descr5 ) { ( VALUE [a:flight] ( APPEND from_city  ( APPEND OR  $city-descr2 $city-descr5 ) ) ) ( WRITE context/city ( APPEND OR  $city-descr2 $city-descr5 ) ) }
    | ( i'm in <city-name> :city-name3 ) { ( VALUE [a:flight] ( APPEND from_city/city_name  $city-name3 ) ) ( WRITE context/city ( APPEND city_name  $city-name3 ) ) }
    | ( originating <city-descr> :city-descr2 ) { ( VALUE [a:flight] ( APPEND from_city  $city-descr2 ) ) }
    | ( originating in <city-descr> :city-descr3 ) { ( VALUE [a:flight] ( APPEND from_city  $city-descr3 ) ) }
  ) .

<ground-service-descr>
  ::= ( ( <ground-service-param> <ground-service-mod-list> :ground-service-mod-list2 ) { ( READ context/city ( [a:city] ) ) ( VALUE [b:ground_service] ( UPDATE ( APPEND city  ( [a:city] ) ) $ground-service-mod-list2 ) ) ( WRITE context/ground_service [b:ground_service] ) }
    | ( <ground-service-param> ) { ( READ context/city ( [a:city] ) ) ( VALUE [b:ground_service] ( APPEND city  ( [a:city] ) ) ) ( WRITE context/ground_service [b:ground_service] ) }
    | ( <ground-service-transport-type> :ground-service-transport-type1 operation <ground-service-mod-list> :ground-service-mod-list3 ) { ( READ context/city ( [a:city] ) ) ( VALUE [b:ground_service] ( UPDATE ( APPEND city  ( [a:city] ) ) ( APPEND AND ( APPEND transport_type  $ground-service-transport-type1 ) $ground-service-mod-list3 ) ) ) ( WRITE context/ground_service [b:ground_service] ) }
    | ( <ground-service-transport-type> :ground-service-transport-type1 operation ) { ( READ context/city ( [a:city] ) ) ( VALUE [b:ground_service] ( APPEND AND ( APPEND city  ( [a:city] ) ) ( APPEND transport_type  $ground-service-transport-type1 ) ) ) ( WRITE context/ground_service [b:ground_service] ) }
    | ( <ground-service> <ground-service-transport-type> :ground-service-transport-type2 <ground-service-mod-list> :ground-service-mod-list3 ) { ( READ context/city ( [a:city] ) ) ( VALUE [b:ground_service] ( UPDATE ( APPEND city  ( [a:city] ) ) ( APPEND AND ( APPEND transport_type  $ground-service-transport-type2 ) $ground-service-mod-list3 ) ) ) ( WRITE context/ground_service [b:ground_service] ) }
    | ( <ground-service> <ground-service-transport-type> :ground-service-transport-type2 ) { ( READ context/city ( [a:city] ) ) ( VALUE [b:ground_service] ( APPEND AND ( APPEND city  ( [a:city] ) ) ( APPEND transport_type  $ground-service-transport-type2 ) ) ) ( WRITE context/ground_service [b:ground_service] ) }
    | ( <det> <ground-service-transport-type> :ground-service-transport-type2 information <ground-service-mod-list> :ground-service-mod-list4 ) { ( READ context/city ( [a:city] ) ) ( VALUE [b:ground_service] ( UPDATE ( APPEND city  ( [a:city] ) ) ( APPEND AND ( APPEND transport_type  $ground-service-transport-type2 ) $ground-service-mod-list4 ) ) ) ( WRITE context/ground_service [b:ground_service] ) }
    | ( <ground-service-transport-type> :ground-service-transport-type1 information <ground-service-mod-list> :ground-service-mod-list3 ) { ( READ context/city ( [a:city] ) ) ( VALUE [b:ground_service] ( UPDATE ( APPEND city  ( [a:city] ) ) ( APPEND AND ( APPEND transport_type  $ground-service-transport-type1 ) $ground-service-mod-list3 ) ) ) ( WRITE context/ground_service [b:ground_service] ) }
    | ( <det> <ground-service-transport-type> :ground-service-transport-type2 <ground-service-mod-list> :ground-service-mod-list3 ) { ( READ context/city ( [a:city] ) ) ( VALUE [b:ground_service] ( UPDATE ( APPEND city  ( [a:city] ) ) ( APPEND AND ( APPEND transport_type  $ground-service-transport-type2 ) $ground-service-mod-list3 ) ) ) ( WRITE context/ground_service [b:ground_service] ) }
    | ( <ground-service-transport-type> :ground-service-transport-type1 <ground-service-mod-list> :ground-service-mod-list2 ) { ( READ context/city ( [a:city] ) ) ( VALUE [b:ground_service] ( UPDATE ( APPEND city  ( [a:city] ) ) ( APPEND AND ( APPEND transport_type  $ground-service-transport-type1 ) $ground-service-mod-list2 ) ) ) ( WRITE context/ground_service [b:ground_service] ) }
    | ( <det> <ground-service-transport-type> :ground-service-transport-type2 information ) { ( READ context/city ( [a:city] ) ) ( VALUE [b:ground_service] ( APPEND AND ( APPEND city  ( [a:city] ) ) ( APPEND transport_type  $ground-service-transport-type2 ) ) ) ( WRITE context/ground_service [b:ground_service] ) }
    | ( <ground-service-transport-type> :ground-service-transport-type1 information ) { ( READ context/city ( [a:city] ) ) ( VALUE [b:ground_service] ( APPEND AND ( APPEND city  ( [a:city] ) ) ( APPEND transport_type  $ground-service-transport-type1 ) ) ) ( WRITE context/ground_service [b:ground_service] ) }
    | ( <det> <ground-service-transport-type> :ground-service-transport-type2 ) { ( READ context/city ( [a:city] ) ) ( VALUE [b:ground_service] ( APPEND AND ( APPEND city  ( [a:city] ) ) ( APPEND transport_type  $ground-service-transport-type2 ) ) ) ( WRITE context/ground_service [b:ground_service] ) }
    | ( <ground-service-transport-type> :ground-service-transport-type1 ) { ( READ context/city ( [a:city] ) ) ( VALUE [b:ground_service] ( APPEND AND ( APPEND city  ( [a:city] ) ) ( APPEND transport_type  $ground-service-transport-type1 ) ) ) ( WRITE context/ground_service [b:ground_service] ) }
  ) .

<ground-service-mod-list>
  ::= ( ( <ground-service-mod> :ground-service-mod1 ) { ( VALUE [a:ground_service] $ground-service-mod1 ) }
    | ( <ground-service-mod> :ground-service-mod1 <ground-service-mod> :ground-service-mod2 ) { ( VALUE [a:ground_service] ( APPEND AND $ground-service-mod1 $ground-service-mod2 ) ) }
    | ( <ground-service-mod> :ground-service-mod1 <ground-service-mod> :ground-service-mod2 <ground-service-mod> :ground-service-mod3 ) { ( VALUE [a:ground_service] ( APPEND AND $ground-service-mod1 $ground-service-mod2 $ground-service-mod3 ) ) }
  ) .

<ground-service-mod>
  ::= ( ( <on-day> ) 
    | ( <time-descr> ) 
    | ( <with-city> :with-city1 ) { ( VALUE [a:ground_service] ( APPEND city  $with-city1 ) ) }
    | ( at <airport-descr> :airport-descr2 ) { ( VALUE [a:ground_service] ( APPEND airport  $airport-descr2 ) ) }
    | ( available ) 
    | ( between <airport-descr> :airport-descr2 and <city-area> :city-area4 ) { ( VALUE [a:ground_service] ( APPEND AND ( APPEND airport  $airport-descr2 ) ( APPEND city  $city-area4 ) ) ) ( WRITE context/airport $airport-descr2 ) }
    | ( between <airport-descr> :airport-descr2 and <city-name> :city-name4 ) { ( VALUE [a:ground_service] ( APPEND AND ( APPEND city/city_name  $city-name4 ) ( APPEND airport  $airport-descr2 ) ) ) ( WRITE context/city ( APPEND city_name  $city-name4 ) ) ( WRITE context/airport $airport-descr2 ) }
    | ( for <airport-descr> :airport-descr2 ) { ( VALUE [a:ground_service] ( APPEND airport  $airport-descr2 ) ) }
    | ( for <city-descr> :city-descr2 ) { ( VALUE [a:ground_service] ( APPEND city  $city-descr2 ) ) }
    | ( for <day-name> <date-day-descr> to <day-name> <date-day-descr> ) 
    | ( from <airport-descr> :airport-descr2 ) { ( VALUE [a:ground_service] ( APPEND airport  $airport-descr2 ) ) }
    | ( from <airport-descr> :airport-descr2 into <city-descr> :city-descr4 ) { ( VALUE [a:ground_service] ( APPEND AND ( APPEND city  $city-descr4 ) ( APPEND airport  $airport-descr2 ) ) ) ( WRITE context/city $city-descr4 ) ( WRITE context/airport $airport-descr2 ) }
    | ( from <city-area> :city-area2 ) { ( VALUE [a:ground_service] ( APPEND city  $city-area2 ) ) }
    | ( from <city-descr> :city-descr2 ) { ( VALUE [a:ground_service] ( APPEND city  $city-descr2 ) ) }
    | ( in <airport-descr> :airport-descr2 ) { ( VALUE [a:ground_service] ( APPEND airport  $airport-descr2 ) ) }
    | ( offered ) 
    | ( provided ) 
    | ( to <airport-descr> :airport-descr2 ) { ( VALUE [a:ground_service] ( APPEND airport  $airport-descr2 ) ) }
    | ( to <city-area> :city-area2 ) { ( VALUE [a:ground_service] ( APPEND city  $city-area2 ) ) }
    | ( to <city-descr> :city-descr2 ) { ( VALUE [a:ground_service] ( APPEND city  $city-descr2 ) ) }
    | ( to and from <city-area> :city-area4 ) { ( VALUE [a:ground_service] ( APPEND city  $city-area4 ) ) }
  ) .

<start_symbol_ground-service-param>
  ::= ( ( <det> available <ground-service> ) 
    | ( <ground-service> availability ) 
    | ( <ground-service> information ) 
    | ( <ground-service> options ) 
    | ( <det> <ground-service> ) 
    | ( <ground-service> ) 
    | ( the transportation on the ground ) 
    | ( transportation on the ground ) 
    | ( all ground information ) 
    | ( ground information ) 
    | ( transportation on the ground ) 
  ) .

<start_symbol_ground-service-transport-type-wh>
  ::= ( ( what <type> of <ground-service> ) 
    | ( what <type> of ground transportation services ) 
  ) .

<start_symbol_ground-service-transport-type>
  ::= ( ( air taxi ) { ( VALUE "AIR TAXI OPERATION" ) }
    | ( car ) { ( VALUE "RENTAL CAR" ) }
    | ( car rental ) { ( VALUE "RENTAL CAR" ) }
    | ( car rentals ) { ( VALUE "RENTAL CAR" ) }
    | ( limo ) { ( VALUE "LIMOUSINE" ) }
    | ( limousine ) { ( VALUE "LIMOUSINE" ) }
    | ( limousine service ) { ( VALUE "LIMOUSINE" ) }
    | ( limousines ) { ( VALUE "LIMOUSINE" ) }
    | ( rental car ) { ( VALUE "RENTAL CAR" ) }
    | ( rental cars ) { ( VALUE "RENTAL CAR" ) }
    | ( taxi ) { ( VALUE "TAXI" ) }
    | ( train ) { ( VALUE "RAPID TRANSIT" ) }
  ) .

<ground-service>
  ::= ( ( ground transport ) 
    | ( ground transportation ) 
  ) .

<have-meal>
  ::= ( ( has <meal-descr> :meal-descr2 ) { ( VALUE [a:meal] $meal-descr2 ) }
    | ( have <meal-descr> :meal-descr2 ) { ( VALUE [a:meal] $meal-descr2 ) }
    | ( include <meal-descr> :meal-descr2 ) { ( VALUE [a:meal] $meal-descr2 ) }
    | ( includes <meal-descr> :meal-descr2 ) { ( VALUE [a:meal] $meal-descr2 ) }
    | ( offer <meal-descr> :meal-descr2 ) { ( VALUE [a:meal] $meal-descr2 ) }
    | ( offers <meal-descr> :meal-descr2 ) { ( VALUE [a:meal] $meal-descr2 ) }
    | ( provide <meal-descr> :meal-descr2 ) { ( VALUE [a:meal] $meal-descr2 ) }
    | ( serve <meal-descr> :meal-descr2 ) { ( VALUE [a:meal] $meal-descr2 ) }
    | ( serves <meal-descr> :meal-descr2 ) { ( VALUE [a:meal] $meal-descr2 ) }
    | ( will provide <meal-descr> :meal-descr3 ) { ( VALUE [a:meal] $meal-descr3 ) }
    | ( will serve <meal-descr> :meal-descr3 ) { ( VALUE [a:meal] $meal-descr3 ) }
  ) .

<have-miles-distant-min>
  ::= ( ( is closest to <city-area> ) 
  ) .

<have-restriction>
  ::= ( ( do not have travel restrictions ) { ( VALUE [a:fare] ( APPEND restriction_code/IS  NULL ) ) }
    | ( have no travel restrictions ) { ( VALUE [a:fare] ( APPEND restriction_code/IS  NULL ) ) }
  ) .

<highest>
  ::= ( ( highest ) 
    | ( most expensive ) 
  ) .

<hour-am>
  ::= ( ( eleven ) { ( VALUE [a:integer] 11 ) }
    | ( nine ) { ( VALUE [a:integer] 9 ) }
    | ( ten ) { ( VALUE [a:integer] 10 ) }
    | ( twelve ) { ( VALUE [a:integer] 12 ) }
  ) .

<hour-military>
  ::= ( ( eighteen ) { ( VALUE [a:integer] 18 ) }
    | ( fifteen ) { ( VALUE [a:integer] 15 ) }
    | ( fourteen ) { ( VALUE [a:integer] 14 ) }
    | ( nineteen ) { ( VALUE [a:integer] 19 ) }
    | ( oh eight ) { ( VALUE [a:integer] 8 ) }
    | ( oh five ) { ( VALUE [a:integer] 5 ) }
    | ( oh four ) { ( VALUE [a:integer] 4 ) }
    | ( oh nine ) { ( VALUE [a:integer] 9 ) }
    | ( oh one ) { ( VALUE [a:integer] 1 ) }
    | ( oh seven ) { ( VALUE [a:integer] 7 ) }
    | ( oh six ) { ( VALUE [a:integer] 6 ) }
    | ( oh three ) { ( VALUE [a:integer] 3 ) }
    | ( oh two ) { ( VALUE [a:integer] 2 ) }
    | ( seventeen ) { ( VALUE [a:integer] 17 ) }
    | ( sixteen ) { ( VALUE [a:integer] 16 ) }
    | ( thirteen ) { ( VALUE [a:integer] 13 ) }
    | ( twenty ) { ( VALUE [a:integer] 20 ) }
    | ( twenty four ) { ( VALUE [a:integer] 24 ) }
    | ( twenty one ) { ( VALUE [a:integer] 21 ) }
    | ( twenty three ) { ( VALUE [a:integer] 23 ) }
    | ( twenty two ) { ( VALUE [a:integer] 22 ) }
  ) .

<hour-pm>
  ::= ( ( eight ) { ( VALUE [a:integer] 8 ) }
    | ( five ) { ( VALUE [a:integer] 5 ) }
    | ( four ) { ( VALUE [a:integer] 4 ) }
    | ( one ) { ( VALUE [a:integer] 1 ) }
    | ( seven ) { ( VALUE [a:integer] 7 ) }
    | ( six ) { ( VALUE [a:integer] 6 ) }
    | ( three ) { ( VALUE [a:integer] 3 ) }
    | ( two ) { ( VALUE [a:integer] 3 ) }
  ) .

<hour>
  ::= ( ( eight ) { ( VALUE [a:integer] 8 ) }
    | ( eleven ) { ( VALUE [a:integer] 11 ) }
    | ( five ) { ( VALUE [a:integer] 5 ) }
    | ( four ) { ( VALUE [a:integer] 4 ) }
    | ( nine ) { ( VALUE [a:integer] 9 ) }
    | ( one ) { ( VALUE [a:integer] 1 ) }
    | ( seven ) { ( VALUE [a:integer] 7 ) }
    | ( six ) { ( VALUE [a:integer] 6 ) }
    | ( ten ) { ( VALUE [a:integer] 10 ) }
    | ( three ) { ( VALUE [a:integer] 3 ) }
    | ( twelve ) { ( VALUE [a:integer] 12 ) }
    | ( two ) { ( VALUE [a:integer] 2 ) }
  ) .

<i-want>
  ::= ( ( i desire ) 
    | ( i need ) 
    | ( i now need ) 
    | ( i want ) 
    | ( i will need ) 
    | ( i wish ) 
    | ( i would like ) 
    | ( i'd like ) 
    | ( i'll need ) 
  ) .

<interval>
  ::= ( ( afternoon ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  1200 ) ( APPEND range/upper/<=  1800 ) ) ) }
    | ( early afternoon ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  1200 ) ( APPEND range/upper/<=  1400 ) ) ) }
    | ( early evening ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  1600 ) ( APPEND range/upper/<=  2000 ) ) ) }
    | ( early morning ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  0 ) ( APPEND range/upper/<=  800 ) ) ) }
    | ( evening ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  1800 ) ( APPEND range/upper/<=  2200 ) ) ) }
    | ( late afternoon ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  1600 ) ( APPEND range/upper/<=  1800 ) ) ) }
    | ( late evening ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  2000 ) ( APPEND range/upper/<=  2200 ) ) ) }
    | ( late morning ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  1000 ) ( APPEND range/upper/<=  1200 ) ) ) }
    | ( late night ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  2200 ) ( APPEND range/upper/<=  2359 ) ) ) }
    | ( mid afternoon ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  1400 ) ( APPEND range/upper/<=  1600 ) ) ) }
    | ( mid day ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  1100 ) ( APPEND range/upper/<=  1500 ) ) ) }
    | ( mid morning ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  800 ) ( APPEND range/upper/<=  1000 ) ) ) }
    | ( morning ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  0 ) ( APPEND range/upper/<=  1200 ) ) ) }
    | ( mornings ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  0 ) ( APPEND range/upper/<=  1200 ) ) ) }
    | ( night ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  1800 ) ( APPEND range/upper/<=  2359 ) ) ) }
  ) .

<know>
  ::= ( ( find ) 
    | ( find out ) 
    | ( find out about ) 
    | ( get ) 
    | ( have ) 
    | ( know ) 
    | ( know about ) 
    | ( see ) 
  ) .

<latest>
  ::= ( ( last ) 
    | ( latest ) 
  ) .

<list-of>
  ::= ( ( list of ) 
    | ( listings of ) 
    | ( a list of ) 
    | ( a listing of ) 
    | ( the list of ) 
  ) .

<may>
  ::= ( ( can ) 
    | ( could ) 
    | ( may ) 
  ) .

<meal-descr>
  ::= ( ( <det> meal <pron-rel> are <served> ) 
    | ( <det> meals <pron-rel> are <served> ) 
    | ( <det> meal <served> ) 
    | ( <det> meals <served> ) 
    | ( <det> <food-service-meal-description> :food-service-meal-description2 ) { ( VALUE [a:meal] ( APPEND meal_description  $food-service-meal-description2 ) ) ( WRITE context/meal ( [a:meal] ) ) }
    | ( <food-service-meal-description> :food-service-meal-description1 ) { ( VALUE [a:meal] ( APPEND meal_description  $food-service-meal-description1 ) ) ( WRITE context/meal ( [a:meal] ) ) }
    | ( <food-service-meal-description> :food-service-meal-description1 and <food-service-meal-description> :food-service-meal-description3 ) { ( VALUE [a:meal] ( APPEND OR  ( APPEND meal_description  $food-service-meal-description1 ) ( APPEND meal_description  $food-service-meal-description3 ) ) ) ( WRITE context/meal ( [a:meal] ) ) }
    | ( <food-service-meal-description> :food-service-meal-description1 or <food-service-meal-description> :food-service-meal-description3 ) { ( VALUE [a:meal] ( APPEND OR  ( APPEND meal_description  $food-service-meal-description1 ) ( APPEND meal_description  $food-service-meal-description3 ) ) ) ( WRITE context/meal ( [a:meal] ) ) }
    | ( <det> meal ) { ( VALUE [a:meal] ( APPEND meal_code/any  meal_code ) ) ( WRITE context/meal ( [a:meal] ) ) }
    | ( meal ) { ( VALUE [a:meal] ( APPEND meal_code/any  meal_code ) ) ( WRITE context/meal ( [a:meal] ) ) }
    | ( <det> meals ) 
    | ( meals ) { ( VALUE [a:meal] ( APPEND meal_code/any  meal_code ) ) ( WRITE context/meal ( [a:meal] ) ) }
    | ( <det> meal service ) 
    | ( meal service ) { ( VALUE [a:meal] ( APPEND meal_code/any  meal_code ) ) ( WRITE context/meal ( [a:meal] ) ) }
  ) .

<min-connect-time>
  ::= ( ( the minimum possible connecting time ) 
    | ( minimum possible connecting time ) 
    | ( the minimum connecting time ) 
    | ( minimum connecting time ) 
    | ( the minimum possible connection time ) 
    | ( minimum possible connection time ) 
    | ( the minimum connection time ) 
    | ( minimum connection time ) 
    | ( the minimum possible connecting times ) 
    | ( minimum possible connecting times ) 
    | ( the minimum connecting times ) 
    | ( minimum connecting times ) 
    | ( the minimum possible connection times ) 
    | ( minimum possible connection times ) 
    | ( the minimum connection times ) 
    | ( minimum connection times ) 
  ) .

<minute-tens>
  ::= ( ( fifty ) { ( VALUE [a:integer] 50 ) }
    | ( forty ) { ( VALUE [a:integer] 40 ) }
    | ( thirty ) { ( VALUE [a:integer] 30 ) }
    | ( twenty ) { ( VALUE [a:integer] 20 ) }
  ) .

<minutes>
  ::= ( ( <minute-tens> :minute-tens1 ) { ( VALUE [a:integer] $minute-tens1 ) }
    | ( <minute-tens> :minute-tens1 <non-zero-digit> :non-zero-digit2 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 0 $minute-tens1 ) ( VALUE 0 $non-zero-digit2 ) ) ) }
    | ( eighteen ) { ( VALUE [a:integer] 18 ) }
    | ( eleven ) { ( VALUE [a:integer] 11 ) }
    | ( fifteen ) { ( VALUE [a:integer] 15 ) }
    | ( fourteen ) { ( VALUE [a:integer] 14 ) }
    | ( nineteen ) { ( VALUE [a:integer] 19 ) }
    | ( oh <non-zero-digit> :non-zero-digit2 ) { ( VALUE [a:integer] $non-zero-digit2 ) }
    | ( seventeen ) { ( VALUE [a:integer] 17 ) }
    | ( sixteen ) { ( VALUE [a:integer] 16 ) }
    | ( ten ) { ( VALUE [a:integer] 10 ) }
    | ( thirteen ) { ( VALUE [a:integer] 13 ) }
    | ( twelve ) { ( VALUE [a:integer] 12 ) }
  ) .

<month>
  ::= ( ( april ) { ( VALUE [a:integer] 4 ) }
    | ( august ) { ( VALUE [a:integer] 8 ) }
    | ( december ) { ( VALUE [a:integer] 12 ) }
    | ( february ) { ( VALUE [a:integer] 2 ) }
    | ( january ) { ( VALUE [a:integer] 1 ) }
    | ( july ) { ( VALUE [a:integer] 7 ) }
    | ( june ) { ( VALUE [a:integer] 6 ) }
    | ( march ) { ( VALUE [a:integer] 3 ) }
    | ( may ) { ( VALUE [a:integer] 5 ) }
    | ( november ) { ( VALUE [a:integer] 11 ) }
    | ( october ) { ( VALUE [a:integer] 10 ) }
    | ( september ) { ( VALUE [a:integer] 9 ) }
  ) .

<non-zero-digit>
  ::= ( ( eight ) { ( VALUE [a:integer] 8 ) }
    | ( five ) { ( VALUE [a:integer] 5 ) }
    | ( four ) { ( VALUE [a:integer] 4 ) }
    | ( nine ) { ( VALUE [a:integer] 9 ) }
    | ( one ) { ( VALUE [a:integer] 1 ) }
    | ( seven ) { ( VALUE [a:integer] 7 ) }
    | ( six ) { ( VALUE [a:integer] 6 ) }
    | ( three ) { ( VALUE [a:integer] 3 ) }
    | ( two ) { ( VALUE [a:integer] 2 ) }
  ) .

<on-day>
  ::= ( ( <date-day-descr> :date-day-descr1 ) { ( VALUE [a:flight] ( APPEND flight_days  $date-day-descr1 ) ) }
    | ( <date-day-descr> :date-day-descr1 or <date-day-descr> :date-day-descr3 ) { ( VALUE [a:flight] ( APPEND flight_days  ( APPEND OR  $date-day-descr1 $date-day-descr3 ) ) ) }
    | ( during the week ) { ( VALUE [a:flight] ( APPEND flight_days  ( APPEND OR  ( APPEND day_name  "MONDAY" ) ( APPEND day_name  "TUESDAY" ) ( APPEND day_name  "WEDNESDAY" ) ( APPEND day_name  "THURSDAY" ) ( APPEND day_name  "FRIDAY" ) ) ) ) }
    | ( during week days ) { ( VALUE [a:flight] ( APPEND flight_days  ( APPEND OR  ( APPEND day_name  "MONDAY" ) ( APPEND day_name  "TUESDAY" ) ( APPEND day_name  "WEDNESDAY" ) ( APPEND day_name  "THURSDAY" ) ( APPEND day_name  "FRIDAY" ) ) ) ) }
    | ( during weekdays ) { ( VALUE [a:flight] ( APPEND flight_days  ( APPEND OR  ( APPEND day_name  "MONDAY" ) ( APPEND day_name  "TUESDAY" ) ( APPEND day_name  "WEDNESDAY" ) ( APPEND day_name  "THURSDAY" ) ( APPEND day_name  "FRIDAY" ) ) ) ) }
    | ( either <date-day-descr> :date-day-descr2 or <date-day-descr> :date-day-descr4 ) { ( VALUE [a:flight] ( APPEND flight_days  ( APPEND OR  $date-day-descr2 $date-day-descr4 ) ) ) }
    | ( either on <date-day-descr> :date-day-descr3 or on <date-day-descr> :date-day-descr6 ) { ( VALUE [a:flight] ( APPEND flight_days  ( APPEND OR  $date-day-descr3 $date-day-descr6 ) ) ) }
    | ( for <date-day-descr> :date-day-descr2 ) { ( VALUE [a:flight] ( APPEND flight_days  $date-day-descr2 ) ) }
    | ( not on weekends ) { ( VALUE [a:flight] ( APPEND flight_days/days/"NOT/SA  SU" ) ) }
    | ( on <date-day-descr> :date-day-descr2 ) { ( VALUE [a:flight] ( APPEND flight_days  $date-day-descr2 ) ) }
    | ( on <date-day-descr> :date-day-descr2 and on <date-day-descr> :date-day-descr5 ) { ( VALUE [a:flight] ( APPEND flight_days  ( APPEND OR  $date-day-descr2 $date-day-descr5 ) ) ) }
    | ( on <date-day-descr> :date-day-descr2 or on <date-day-descr> :date-day-descr5 ) { ( VALUE [a:flight] ( APPEND flight_days  ( APPEND OR  $date-day-descr2 $date-day-descr5 ) ) ) }
    | ( on weekdays ) { ( VALUE [a:flight] ( APPEND flight_days  ( APPEND OR  ( APPEND day_name  "MONDAY" ) ( APPEND day_name  "TUESDAY" ) ( APPEND day_name  "WEDNESDAY" ) ( APPEND day_name  "THURSDAY" ) ( APPEND day_name  "FRIDAY" ) ) ) ) }
    | ( that day ) { ( READ context/date_day [a:date_day] ) ( VALUE [a:flight] ( APPEND flight_days  [a:date_day] ) ) }
    | ( weekday ) { ( VALUE [a:flight] ( APPEND flight_days  ( APPEND OR  ( APPEND day_name  "MONDAY" ) ( APPEND day_name  "TUESDAY" ) ( APPEND day_name  "WEDNESDAY" ) ( APPEND day_name  "THURSDAY" ) ( APPEND day_name  "FRIDAY" ) ) ) ) }
    | ( weekdays ) { ( VALUE [a:flight] ( APPEND flight_days  ( APPEND OR  ( APPEND day_name  "MONDAY" ) ( APPEND day_name  "TUESDAY" ) ( APPEND day_name  "WEDNESDAY" ) ( APPEND day_name  "THURSDAY" ) ( APPEND day_name  "FRIDAY" ) ) ) ) }
  ) .

<ordinal>
  ::= ( ( eighteenth ) { ( VALUE [a:integer] 18 ) }
    | ( eighth ) { ( VALUE [a:integer] 8 ) }
    | ( eleventh ) { ( VALUE [a:integer] 11 ) }
    | ( fifteenth ) { ( VALUE [a:integer] 15 ) }
    | ( fifth ) { ( VALUE [a:integer] 5 ) }
    | ( first ) { ( VALUE [a:integer] 1 ) }
    | ( fourteenth ) { ( VALUE [a:integer] 14 ) }
    | ( fourth ) { ( VALUE [a:integer] 4 ) }
    | ( nineteenth ) { ( VALUE [a:integer] 19 ) }
    | ( ninth ) { ( VALUE [a:integer] 9 ) }
    | ( second ) { ( VALUE [a:integer] 2 ) }
    | ( seventeenth ) { ( VALUE [a:integer] 17 ) }
    | ( seventh ) { ( VALUE [a:integer] 7 ) }
    | ( sixteenth ) { ( VALUE [a:integer] 16 ) }
    | ( sixth ) { ( VALUE [a:integer] 6 ) }
    | ( tenth ) { ( VALUE [a:integer] 10 ) }
    | ( third ) { ( VALUE [a:integer] 3 ) }
    | ( thirteenth ) { ( VALUE [a:integer] 13 ) }
    | ( thirtieth ) { ( VALUE [a:integer] 30 ) }
    | ( thirty first ) { ( VALUE [a:integer] 31 ) }
    | ( twelfth ) { ( VALUE [a:integer] 12 ) }
    | ( twentieth ) { ( VALUE [a:integer] 20 ) }
    | ( twenty eighth ) { ( VALUE [a:integer] 28 ) }
    | ( twenty fifth ) { ( VALUE [a:integer] 25 ) }
    | ( twenty first ) { ( VALUE [a:integer] 21 ) }
    | ( twenty fourth ) { ( VALUE [a:integer] 24 ) }
    | ( twenty ninth ) { ( VALUE [a:integer] 29 ) }
    | ( twenty second ) { ( VALUE [a:integer] 22 ) }
    | ( twenty seventh ) { ( VALUE [a:integer] 27 ) }
    | ( twenty sixth ) { ( VALUE [a:integer] 26 ) }
    | ( twenty third ) { ( VALUE [a:integer] 23 ) }
  ) .

<post-filler>
  ::= ( ( again ) 
    | ( again please ) 
    | ( also ) 
    | ( how <may> i find that out ) 
    | ( if possible ) 
    | ( if you please ) 
    | ( only ) 
    | ( please ) 
    | ( thank you ) 
    | ( too ) 
    | ( what do you have available ) 
    | ( what is there ) 
    | ( what's available ) 
  ) .

<pre-filler>
  ::= ( ( actually ) 
    | ( all right ) 
    | ( all right now ) 
    | ( and ) 
    | ( and now ) 
    | ( excuse me ) 
    | ( hello ) 
    | ( hi ) 
    | ( i beg your pardon ) 
    | ( i mean ) 
    | ( no ) 
    | ( now ) 
    | ( now please ) 
    | ( okay ) 
    | ( okay now ) 
    | ( okay please ) 
    | ( please ) 
    | ( this time ) 
    | ( well ) 
    | ( yeah ) 
    | ( yes ) 
  ) .

<pron-rel>
  ::= ( ( that ) 
    | ( which ) 
  ) .

<start_symbol_query>
  ::= ( ( <clear-memory> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT  flight.flight_id ) ( APPEND object  flight ) ( APPEND specs/flight  ( 1 = 2 ) ) ) ) }
    | ( <count-objects-query> :count-objects-query1 ) { ( VALUE [a:query] $count-objects-query1 ) }
    | ( <find-airline-and-flight-number-query> :find-airline-and-flight-number-query1 ) { ( VALUE [a:query] $find-airline-and-flight-number-query1 ) }
    | ( <find-all-attributes-query> :find-all-attributes-query1 ) { ( VALUE [a:query] $find-all-attributes-query1 ) }
    | ( <find-attribute-query> :find-attribute-query1 ) { ( VALUE [a:query] $find-attribute-query1 ) }
    | ( <find-flight-and-fare-query> :find-flight-and-fare-query1 ) { ( VALUE [a:query] $find-flight-and-fare-query1 ) }
    | ( <find-flight-and-return-query> :find-flight-and-return-query1 ) { ( VALUE [a:query] $find-flight-and-return-query1 ) }
    | ( <find-flight-and-stops-query> :find-flight-and-stops-query1 ) { ( VALUE [a:query] $find-flight-and-stops-query1 ) }
    | ( <find-flight-schedule-query> :find-flight-schedule-query1 ) { ( VALUE [a:query] $find-flight-schedule-query1 ) }
    | ( <find-flight-stop-schedule-query> :find-flight-stop-schedule-query1 ) { ( VALUE [a:query] $find-flight-stop-schedule-query1 ) }
    | ( <find-flight> <flight-mod-phrase> :flight-mod-phrase2 and <flight-pred> :flight-pred4 <find> <aircraft-wh> are used by <flight-descr> :flight-descr10 and <find> <flight-number-param> ) { ( VALUE ( APPEND AND $flight-mod-phrase2 $flight-pred4 $flight-descr10 ) ) ( WRITE context/flight ( APPEND AND $flight-mod-phrase2 $flight-pred4 $flight-descr10 ) ) }
    | ( <find-object-query> :find-object-query1 ) { ( VALUE [a:query] $find-object-query1 ) }
    | ( <find-restriction-query> :find-restriction-query1 ) { ( VALUE [a:query] $find-restriction-query1 ) }
    | ( <find> <flight-descr> :flight-descr2 <find> <aircraft-param> and <flight-number-param> ) { ( VALUE [c:query] ( APPEND AND ( APPEND info/DISTINCT/flight.flight_number,  aircraft.aircraft_code ) ( APPEND object/flight,/equipment_sequence,  aircraft ) ( APPEND AND ( APPEND specs/flight  $flight-descr2 ) ( APPEND join/flight.aircraft_code_sequence  equipment_sequence.aircraft_code_sequence ) ( APPEND join/equipment_sequence.aircraft_code  aircraft.aircraft_code ) ) ) ) ( WRITE context/flight $flight-descr2 ) }
  ) .

<restriction-code-descr>
  ::= ( ( <restriction-code> :restriction-code1 ) { ( VALUE $restriction-code1 ) }
    | ( the restriction <code> <restriction-code> :restriction-code4 ) { ( VALUE $restriction-code4 ) }
    | ( restriction <code> <restriction-code> :restriction-code3 ) { ( VALUE $restriction-code3 ) }
    | ( the restriction <restriction-code> :restriction-code3 ) { ( VALUE $restriction-code3 ) }
    | ( restriction <restriction-code> :restriction-code2 ) { ( VALUE $restriction-code2 ) }
    | ( restrictions <restriction-code> :restriction-code2 ) { ( VALUE $restriction-code2 ) }
  ) .

<restriction-code>
  ::= ( ( a p fifty eight ) { ( VALUE "AP/58" ) }
    | ( a p five eight ) { ( VALUE "AP/58" ) }
    | ( a p fifty seven ) { ( VALUE "AP/57" ) }
    | ( a p five seven ) { ( VALUE "AP/57" ) }
    | ( a p seven five ) { ( VALUE "AP/75" ) }
    | ( a p seventy five ) { ( VALUE "AP/75" ) }
    | ( a p six ) { ( VALUE "AP/6" ) }
    | ( a p sixty ) { ( VALUE "AP/60" ) }
    | ( a p twenty one ) { ( VALUE "AP/21" ) }
    | ( a p two one ) { ( VALUE "AP/21" ) }
    | ( a p one two ) { ( VALUE "AP/12" ) }
    | ( a p six oh ) { ( VALUE "AP/60" ) }
    | ( a p six zero ) { ( VALUE "AP/60" ) }
    | ( a p slash fifty eight ) { ( VALUE "AP/58" ) }
    | ( a p slash five eight ) { ( VALUE "AP/58" ) }
    | ( a p slash fifty seven ) { ( VALUE "AP/57" ) }
    | ( a p slash five seven ) { ( VALUE "AP/57" ) }
    | ( a p slash seven five ) { ( VALUE "AP/75" ) }
    | ( a p slash seventy five ) { ( VALUE "AP/75" ) }
    | ( a p slash six ) { ( VALUE "AP/6" ) }
    | ( a p slash sixty ) { ( VALUE "AP/60" ) }
    | ( a p slash twenty one ) { ( VALUE "AP/21" ) }
    | ( a p slash two one ) { ( VALUE "AP/21" ) }
    | ( a p slash one two ) { ( VALUE "AP/12" ) }
    | ( a p slash six oh ) { ( VALUE "AP/60" ) }
    | ( a p slash six zero ) { ( VALUE "AP/60" ) }
    | ( a p slash twelve ) { ( VALUE "AP/12" ) }
    | ( a p slash twenty ) { ( VALUE "AP/20" ) }
    | ( a p slash two ) { ( VALUE "AP/2" ) }
    | ( a p slash two oh ) { ( VALUE "AP/20" ) }
    | ( a p slash two zero ) { ( VALUE "AP/20" ) }
    | ( a p twelve ) { ( VALUE "AP/12" ) }
    | ( a p twenty ) { ( VALUE "AP/20" ) }
    | ( a p two ) { ( VALUE "AP/2" ) }
    | ( a p two oh ) { ( VALUE "AP/20" ) }
    | ( a p two zero ) { ( VALUE "AP/20" ) }
    | ( e x fourteen ) { ( VALUE "EX/14" ) }
    | ( e x nine ) { ( VALUE "EX/9" ) }
    | ( e x nineteen ) { ( VALUE "EX/19" ) }
    | ( e x one four ) { ( VALUE "EX/14" ) }
    | ( e x one nine ) { ( VALUE "EX/19" ) }
    | ( e x one seven ) { ( VALUE "EX/17" ) }
    | ( e x one three ) { ( VALUE "EX/13" ) }
    | ( e x seventeen ) { ( VALUE "EX/17" ) }
    | ( e x slash fourteen ) { ( VALUE "EX/14" ) }
    | ( e x slash nine ) { ( VALUE "EX/9" ) }
    | ( e x slash nineteen ) { ( VALUE "EX/19" ) }
    | ( e x slash one four ) { ( VALUE "EX/14" ) }
    | ( e x slash one nine ) { ( VALUE "EX/19" ) }
    | ( e x slash one seven ) { ( VALUE "EX/17" ) }
    | ( e x slash one three ) { ( VALUE "EX/13" ) }
    | ( e x slash seventeen ) { ( VALUE "EX/17" ) }
    | ( e x slash thirteen ) { ( VALUE "EX/13" ) }
    | ( e x thirteen ) { ( VALUE "EX/13" ) }
  ) .

<restriction-param>
  ::= ( ( <det> <restriction> ) 
    | ( <restriction> ) 
    | ( <det> flight restriction ) 
    | ( flight restriction ) 
    | ( <det> restriction <code> ) 
    | ( restriction <code> ) 
    | ( <det> travel restrictions ) 
    | ( travel restrictions ) 
  ) .

<restriction-wh>
  ::= ( ( what restrictions ) 
  ) .

<restriction>
  ::= ( ( restriction ) 
    | ( restrictions ) 
  ) .

<return-type>
  ::= ( ( not requiring a round trip purchase ) { ( VALUE [a:fare] ( APPEND round_trip_required  "NO" ) ) }
    | ( one way ) { ( VALUE [a:fare] ( APPEND round_trip_required  "NO" ) ) }
    | ( round trip ) { ( VALUE [a:fare] ( APPEND round_trip_cost/IS/NOT  NULL ) ) }
  ) .

<served>
  ::= ( ( available ) 
    | ( included ) 
    | ( offered ) 
    | ( provided ) 
    | ( served ) 
  ) .

<show-ditrans>
  ::= ( ( find ) 
    | ( get ) 
    | ( give ) 
    | ( show ) 
    | ( tell ) 
  ) .

<show-trans>
  ::= ( ( bring up ) 
    | ( display ) 
    | ( find ) 
    | ( list ) 
    | ( provide ) 
    | ( show ) 
  ) .

<state-name>
  ::= ( ( alaska ) { ( VALUE "ALASKA" ) }
    | ( arizona ) { ( VALUE "ARIZONA" ) }
    | ( california ) { ( VALUE "CALIFORNIA" ) }
    | ( colorado ) { ( VALUE "COLORADO" ) }
    | ( connecticut ) { ( VALUE "CONNECTICUT" ) }
    | ( florida ) { ( VALUE "FLORIDA" ) }
    | ( georgia ) { ( VALUE "GEORGIA" ) }
    | ( hawaii ) { ( VALUE "HAWAII" ) }
    | ( illinois ) { ( VALUE "ILLINOIS" ) }
    | ( indiana ) { ( VALUE "INDIANA" ) }
    | ( kansas ) { ( VALUE "KANSAS" ) }
    | ( maryland ) { ( VALUE "MARYLAND" ) }
    | ( massachusetts ) { ( VALUE "MASSACHUSETTS" ) }
    | ( michigan ) { ( VALUE "MICHIGAN" ) }
    | ( minnesota ) { ( VALUE "MINNESOTA" ) }
    | ( missouri ) { ( VALUE "MISSOURI" ) }
    | ( nevada ) { ( VALUE "NEVADA" ) }
    | ( new hampshire ) { ( VALUE "NEW HAMPSHIRE" ) }
    | ( new jersey ) { ( VALUE "NEW JERSEY" ) }
    | ( new york ) { ( VALUE "NEW YORK" ) }
    | ( new york state ) { ( VALUE "NEW YORK STATE" ) }
    | ( north carolina ) { ( VALUE "NORTH CAROLINA" ) }
    | ( ohio ) { ( VALUE "OHIO" ) }
    | ( ontario ) { ( VALUE "ONTARIO" ) }
    | ( pennsylvania ) { ( VALUE "PENNSYLVANIA" ) }
    | ( quebec ) { ( VALUE "QUEBEC" ) }
    | ( tennessee ) { ( VALUE "TENNESSEE" ) }
    | ( texas ) { ( VALUE "TEXAS" ) }
    | ( utah ) { ( VALUE "UTAH" ) }
    | ( virginia ) { ( VALUE "VIRGINIA" ) }
    | ( washington ) { ( VALUE "WASHINGTON" ) }
    | ( wisconsin ) { ( VALUE "WISCONSIN" ) }
  ) .

<stop>
  ::= ( ( also stop ) 
    | ( connect ) 
    | ( has <det> <flight-stop> ) 
    | ( have a <flight-stop> ) 
    | ( make a <flight-stop> ) 
    | ( makes a <flight-stop> ) 
    | ( should stop ) 
    | ( stop ) 
    | ( stop over ) 
    | ( stopover ) 
    | ( stops ) 
    | ( stops over ) 
  ) .

<symbolize>
  ::= ( ( mean ) 
    | ( means ) 
    | ( represent ) 
    | ( represents ) 
    | ( stand for ) 
    | ( stands for ) 
  ) .

<start_symbol_tens>
  ::= ( ( eighty ) { ( VALUE [a:integer] 80 ) }
    | ( fifty ) { ( VALUE [a:integer] 50 ) }
    | ( forty ) { ( VALUE [a:integer] 40 ) }
    | ( ninety ) { ( VALUE [a:integer] 90 ) }
    | ( seventy ) { ( VALUE [a:integer] 70 ) }
    | ( sixty ) { ( VALUE [a:integer] 60 ) }
    | ( thirty ) { ( VALUE [a:integer] 30 ) }
    | ( twenty ) { ( VALUE [a:integer] 20 ) }
  ) .

<start_symbol_three-digit>
  ::= ( ( <non-zero-digit> :non-zero-digit1 oh <digit> :digit3 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $non-zero-digit1 ) ( VALUE 0 $digit3 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 zero <digit> :digit3 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $non-zero-digit1 ) ( VALUE 0 $digit3 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 <double-digit> :double-digit2 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $non-zero-digit1 ) ( VALUE 0 $double-digit2 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 hundred ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $non-zero-digit1 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 hundred and <double-digit> :double-digit4 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $non-zero-digit1 ) ( VALUE 0 $double-digit4 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 hundred <double-digit> :double-digit3 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $non-zero-digit1 ) ( VALUE 0 $double-digit3 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 hundred and <non-zero-digit> :non-zero-digit4 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $non-zero-digit1 ) ( VALUE 0 $non-zero-digit4 ) ) ) }
    | ( <non-zero-digit> :non-zero-digit1 hundred <non-zero-digit> :non-zero-digit3 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $non-zero-digit1 ) ( VALUE 0 $non-zero-digit3 ) ) ) }
  ) .

<start_symbol_time-approx>
  ::= ( ( approximately <time> :time2 ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  ( REL_TIME $time2 -30 ) ) ( APPEND range/upper/<=  ( REL_TIME $time2 30 ) ) ) ) }
    | ( approximately at <time> :time3 ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  ( REL_TIME $time3 -30 ) ) ( APPEND range/upper/<=  ( REL_TIME $time3 30 ) ) ) ) }
    | ( at about <time> :time3 ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  ( REL_TIME $time3 -30 ) ) ( APPEND range/upper/<=  ( REL_TIME $time3 30 ) ) ) ) }
    | ( about <time> :time2 ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  ( REL_TIME $time2 -30 ) ) ( APPEND range/upper/<=  ( REL_TIME $time2 30 ) ) ) ) }
    | ( at around <time> :time3 ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  ( REL_TIME $time3 -30 ) ) ( APPEND range/upper/<=  ( REL_TIME $time3 30 ) ) ) ) }
    | ( around <time> :time2 ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  ( REL_TIME $time2 -30 ) ) ( APPEND range/upper/<=  ( REL_TIME $time2 30 ) ) ) ) ( WRITE context/time $time2 ) }
    | ( at or around <time> :time4 ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  ( REL_TIME $time4 -30 ) ) ( APPEND range/upper/<=  ( REL_TIME $time4 30 ) ) ) ) }
    | ( by <time> :time2 or as soon thereafter as possible ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  ( REL_TIME $time2 -30 ) ) ( APPEND range/upper/<=  ( REL_TIME $time2 30 ) ) ) ) }
    | ( close to <time> :time3 ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  ( REL_TIME $time3 -30 ) ) ( APPEND range/upper/<=  ( REL_TIME $time3 30 ) ) ) ) }
    | ( sometime around <time> :time3 ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  ( REL_TIME $time3 -30 ) ) ( APPEND range/upper/<=  ( REL_TIME $time3 30 ) ) ) ) }
  ) .

<start_symbol_time-descr>
  ::= ( ( <time-approx> :time-approx1 ) { ( VALUE [a:bounded_integer] $time-approx1 ) }
    | ( <time-lower-bound> :time-lower-bound1 ) { ( VALUE [a:bounded_integer] $time-lower-bound1 ) }
    | ( <time-point> :time-point1 ) { ( VALUE [a:bounded_integer] $time-point1 ) }
    | ( <time-range> :time-range1 ) { ( VALUE [a:bounded_integer] $time-range1 ) }
    | ( <time-upper-bound> :time-upper-bound1 ) { ( VALUE [a:bounded_integer] $time-upper-bound1 ) }
    | ( <with-interval> :with-interval1 ) { ( VALUE [a:bounded_integer] $with-interval1 ) }
    | ( before or around <time> :time4 ) { ( VALUE [a:bounded_integer] ( APPEND range/upper/<  ( REL_TIME $time4 30 ) ) ) }
    | ( shortly after <time> :time3 ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>  $time3 ) ( APPEND range/upper/<=  ( REL_TIME $time3 30 ) ) ) ) }
    | ( soon after <time> :time3 ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>  $time3 ) ( APPEND range/upper/<=  ( REL_TIME $time3 30 ) ) ) ) }
  ) .

<start_symbol_time-lower-bound>
  ::= ( ( after <time> :time2 ) { ( VALUE [a:bounded_integer] ( APPEND range/lower/>  $time2 ) ) }
    | ( after dinner ) { ( VALUE [a:bounded_integer] ( APPEND range/lower/>  1700 ) ) }
    | ( after lunch time ) { ( VALUE [a:bounded_integer] ( APPEND range/lower/>  1400 ) ) }
    | ( at <time> :time2 or later ) { ( VALUE [a:bounded_integer] ( APPEND OR  ( APPEND range/=  $time2 ) ( APPEND range/lower/>  $time2 ) ) ) }
  ) .

<time-point>
  ::= ( ( at <time> :time2 ) { ( VALUE [a:bounded_integer] ( APPEND range/=  $time2 ) ) }
  ) .

<start_symbol_time-range>
  ::= ( ( from <time> :time2 to <time> :time4 ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  $time2 ) ( APPEND range/upper/<=  $time4 ) ) ) }
    | ( <time> :time1 to <time> :time3 ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  $time1 ) ( APPEND range/upper/<=  $time3 ) ) ) }
    | ( after <time> :time2 and before <time> :time5 ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  $time2 ) ( APPEND range/upper/<=  $time5 ) ) ) }
    | ( after <time> :time2 but before <time> :time5 ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  $time2 ) ( APPEND range/upper/<=  $time5 ) ) ) }
    | ( before <time> :time2 and after <time> :time5 ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  $time5 ) ( APPEND range/upper/<=  $time2 ) ) ) }
    | ( before <time> :time2 but after <time> :time5 ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  $time5 ) ( APPEND range/upper/<=  $time2 ) ) ) }
    | ( between <time> :time2 and <time> :time4 ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  $time2 ) ( APPEND range/upper/<=  $time4 ) ) ) }
    | ( between <time> :time2 to <time> :time4 ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  $time2 ) ( APPEND range/upper/<=  $time4 ) ) ) }
  ) .

<time-upper-bound>
  ::= ( ( <time> :time1 or sooner ) { ( VALUE [a:bounded_integer] ( APPEND OR  ( APPEND range/=  $time1 ) ( APPEND range/upper/<  $time1 ) ) ) }
    | ( at or before <time> :time4 ) { ( VALUE [a:bounded_integer] ( APPEND range/upper/<=  $time4 ) ) }
    | ( before <time> :time2 ) { ( VALUE [a:bounded_integer] ( APPEND range/upper/<  $time2 ) ) }
    | ( by <time> :time2 ) { ( VALUE [a:bounded_integer] ( APPEND range/upper/<  $time2 ) ) }
  ) .

<time-wh>
  ::= ( ( at what time ) 
    | ( what time ) 
    | ( when ) 
  ) .

<start_symbol_time>
  ::= ( ( <hour-am> :hour-am1 <minutes> :minutes2 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $hour-am1 ) ( VALUE 0 $minutes2 ) ) ) }
    | ( <hour-am> :hour-am1 o'clock ) { ( VALUE [a:integer] ( MIL_TIME $hour-am1 0 am ) ) }
    | ( <hour-am> :hour-am1 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $hour-am1 ) ) ) }
    | ( <hour-military> :hour-military1 <minutes> :minutes2 hours ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $hour-military1 ) ( VALUE 0 $minutes2 ) ) ) }
    | ( <hour-military> :hour-military1 <minutes> :minutes2 ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $hour-military1 ) ( VALUE 0 $minutes2 ) ) ) }
    | ( <hour-military> :hour-military1 hundred hours ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $hour-military1 ) ) ) }
    | ( <hour-military> :hour-military1 hundred ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $hour-military1 ) ) ) }
    | ( <hour-pm> :hour-pm1 <minutes> :minutes2 ) { ( VALUE [a:integer] ( MIL_TIME $hour-pm1 $minutes2 pm ) ) }
    | ( <hour-pm> :hour-pm1 o'clock ) { ( VALUE [a:integer] ( MIL_TIME $hour-pm1 0 pm ) ) }
    | ( <hour-pm> :hour-pm1 ) { ( VALUE [a:integer] ( MIL_TIME $hour-pm1 0 pm ) ) }
    | ( <hour> :hour1 <minutes> :minutes2 a m ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $hour1 ) ( VALUE 0 $minutes2 ) ) ) }
    | ( <hour> :hour1 <minutes> :minutes2 hours ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $hour1 ) ( VALUE 0 $minutes2 ) ) ) }
    | ( <hour> :hour1 <minutes> :minutes2 in the afternoon ) { ( VALUE [a:integer] ( MIL_TIME $hour1 $minutes2 pm ) ) }
    | ( <hour> :hour1 <minutes> :minutes2 in the evening ) { ( VALUE [a:integer] ( MIL_TIME $hour1 $minutes2 pm ) ) }
    | ( <hour> :hour1 <minutes> :minutes2 in the morning ) { ( VALUE [a:integer] ( MIL_TIME $hour1 $minutes2 am ) ) }
    | ( <hour> :hour1 <minutes> :minutes2 p m ) { ( VALUE [a:integer] ( MIL_TIME $hour1 $minutes2 pm ) ) }
    | ( <hour> :hour1 o'clock a m ) { ( VALUE [a:integer] ( MIL_TIME $hour1 0 am ) ) }
    | ( <hour> :hour1 a m ) { ( VALUE [a:integer] ( MIL_TIME $hour1 0 am ) ) }
    | ( <hour> :hour1 o'clock at night ) { ( VALUE [a:integer] ( MIL_TIME $hour1 0 pm ) ) }
    | ( <hour> :hour1 at night ) { ( VALUE [a:integer] ( MIL_TIME $hour1 0 pm ) ) }
    | ( <hour> :hour1 o'clock in the afternoon ) { ( VALUE [a:integer] ( MIL_TIME $hour1 0 pm ) ) }
    | ( <hour> :hour1 in the afternoon ) { ( VALUE [a:integer] ( MIL_TIME $hour1 0 pm ) ) }
    | ( <hour> :hour1 o'clock in the evening ) { ( VALUE [a:integer] ( MIL_TIME $hour1 0 pm ) ) }
    | ( <hour> :hour1 in the evening ) { ( VALUE [a:integer] ( MIL_TIME $hour1 0 pm ) ) }
    | ( <hour> :hour1 o'clock in the morning ) { ( VALUE [a:integer] ( MIL_TIME $hour1 0 am ) ) }
    | ( <hour> :hour1 in the morning ) { ( VALUE [a:integer] ( MIL_TIME $hour1 0 am ) ) }
    | ( <hour> :hour1 hundred hours ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $hour1 ) ) ) }
    | ( <hour> :hour1 hundred ) { ( VALUE [a:integer] ( DEC_STRING ( VALUE 2 $hour1 ) ) ) }
    | ( <hour> :hour1 o'clock p m ) { ( VALUE [a:integer] ( MIL_TIME $hour1 0 pm ) ) }
    | ( <hour> :hour1 p m ) { ( VALUE [a:integer] ( MIL_TIME $hour1 0 pm ) ) }
    | ( dinnertime ) { ( VALUE [a:integer] 1700 ) }
    | ( midnight ) { ( VALUE [a:integer] 0 ) }
    | ( noon ) { ( VALUE [a:integer] 1200 ) }
    | ( noon time ) { ( VALUE [a:integer] 1200 ) }
    | ( noontime ) { ( VALUE [a:integer] 1200 ) }
    | ( twelve o'clock noon ) { ( VALUE [a:integer] 1200 ) }
    | ( twelve noon ) { ( VALUE [a:integer] 1200 ) }
  ) .

<to-airport>
  ::= ( ( at <airport-descr> :airport-descr2 ) { ( VALUE [a:flight] ( APPEND to_airport  $airport-descr2 ) ) }
    | ( destination <airport-descr> :airport-descr2 ) { ( VALUE [a:flight] ( APPEND to_airport  $airport-descr2 ) ) }
    | ( for <airport-descr> :airport-descr2 ) { ( VALUE [a:flight] ( APPEND to_airport  $airport-descr2 ) ) }
    | ( in <airport-descr> :airport-descr2 ) { ( VALUE [a:flight] ( APPEND to_airport  $airport-descr2 ) ) }
    | ( into <airport-descr> :airport-descr2 ) { ( VALUE [a:flight] ( APPEND to_airport  $airport-descr2 ) ) }
    | ( on <airport-descr> :airport-descr2 ) { ( VALUE [a:flight] ( APPEND to_airport  $airport-descr2 ) ) }
    | ( to <airport-descr> :airport-descr2 ) { ( VALUE [a:flight] ( APPEND to_airport  $airport-descr2 ) ) }
    | ( at <city-descr> :city-descr2 ) { ( VALUE [a:flight] ( APPEND to_city  $city-descr2 ) ) }
    | ( destination <city-descr> :city-descr2 ) { ( VALUE [a:flight] ( APPEND to_city  $city-descr2 ) ) }
    | ( for <city-descr> :city-descr2 ) { ( VALUE [a:flight] ( APPEND to_city  $city-descr2 ) ) }
    | ( in <city-descr> :city-descr2 ) { ( VALUE [a:flight] ( APPEND to_city  $city-descr2 ) ) }
    | ( into <city-descr> :city-descr2 ) { ( VALUE [a:flight] ( APPEND to_city  $city-descr2 ) ) }
    | ( on <city-descr> :city-descr2 ) { ( VALUE [a:flight] ( APPEND to_city  $city-descr2 ) ) }
    | ( to <city-descr> :city-descr2 ) { ( VALUE [a:flight] ( APPEND to_city  $city-descr2 ) ) }
    | ( to <airport-descr> :airport-descr2 and to <airport-descr> :airport-descr5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND to_airport  $airport-descr2 ) ( APPEND to_airport  $airport-descr5 ) ) ) }
    | ( to <airport-descr> :airport-descr2 or to <airport-descr> :airport-descr5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND to_airport  $airport-descr2 ) ( APPEND to_airport  $airport-descr5 ) ) ) }
    | ( to <airport-descr> :airport-descr2 and to <city-descr> :city-descr5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND to_airport  $airport-descr2 ) ( APPEND to_city  $city-descr5 ) ) ) ( WRITE context/airport $airport-descr2 ) ( WRITE context/city $city-descr5 ) }
    | ( to <airport-descr> :airport-descr2 or to <city-descr> :city-descr5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND to_airport  $airport-descr2 ) ( APPEND to_city  $city-descr5 ) ) ) ( WRITE context/airport $airport-descr2 ) ( WRITE context/city $city-descr5 ) }
    | ( to <airport-descr> :airport-descr2 and <city-descr> :city-descr4 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND to_airport  $airport-descr2 ) ( APPEND to_city  $city-descr4 ) ) ) ( WRITE context/airport $airport-descr2 ) ( WRITE context/city $city-descr4 ) }
    | ( to <airport-descr> :airport-descr2 or <city-descr> :city-descr4 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND to_airport  $airport-descr2 ) ( APPEND to_city  $city-descr4 ) ) ) ( WRITE context/airport $airport-descr2 ) ( WRITE context/city $city-descr4 ) }
    | ( to <city-descr> :city-descr2 and to <airport-descr> :airport-descr5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND to_city  $city-descr2 ) ( APPEND to_airport  $airport-descr5 ) ) ) ( WRITE context/city $city-descr2 ) ( WRITE context/airport $airport-descr5 ) }
    | ( to <city-descr> :city-descr2 or to <airport-descr> :airport-descr5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND to_city  $city-descr2 ) ( APPEND to_airport  $airport-descr5 ) ) ) ( WRITE context/city $city-descr2 ) ( WRITE context/airport $airport-descr5 ) }
    | ( to <city-descr> :city-descr2 and <airport-descr> :airport-descr4 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND to_city  $city-descr2 ) ( APPEND to_airport  $airport-descr4 ) ) ) ( WRITE context/city $city-descr2 ) ( WRITE context/airport $airport-descr4 ) }
    | ( to <city-descr> :city-descr2 or <airport-descr> :airport-descr4 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND to_city  $city-descr2 ) ( APPEND to_airport  $airport-descr4 ) ) ) ( WRITE context/city $city-descr2 ) ( WRITE context/airport $airport-descr4 ) }
    | ( to <city-descr> :city-descr2 and to <city-descr> :city-descr5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND to_city  $city-descr2 ) ( APPEND to_city  $city-descr5 ) ) ) }
    | ( to <city-descr> :city-descr2 or to <city-descr> :city-descr5 ) { ( VALUE [a:flight] ( APPEND OR  ( APPEND to_city  $city-descr2 ) ( APPEND to_city  $city-descr5 ) ) ) }
  ) .

<type>
  ::= ( ( kind ) 
    | ( kinds ) 
    | ( sort ) 
    | ( sorts ) 
    | ( type ) 
    | ( types ) 
  ) .

<utterance>
  ::= ( ( <pre-filler> <query> :query2 <post-filler> ) { ( VALUE [a:query] $query2 ) }
    | ( <query> :query1 <post-filler> ) { ( VALUE [a:query] $query1 ) }
    | ( <pre-filler> <query> :query2 ) { ( VALUE [a:query] $query2 ) }
    | ( <query> :query1 ) { ( VALUE [a:query] $query1 ) }
  ) .

<start_symbol_with-aircraft>
  ::= ( ( for <aircraft-descr> :aircraft-descr2 ) { ( VALUE [a:aircraft] $aircraft-descr2 ) }
    | ( of <aircraft-descr> :aircraft-descr2 ) { ( VALUE [a:aircraft] $aircraft-descr2 ) }
  ) .

<start_symbol_with-airport>
  ::= ( ( at <airport-descr> :airport-descr2 ) { ( VALUE [a:airport] $airport-descr2 ) }
    | ( for <airport-descr> :airport-descr2 ) { ( VALUE [a:airport] $airport-descr2 ) }
  ) .

<with-city>
  ::= ( ( at <city-descr> :city-descr2 ) { ( VALUE [a:city] $city-descr2 ) }
    | ( in <city-descr> :city-descr2 ) { ( VALUE [a:city] $city-descr2 ) }
  ) .

<with-class>
  ::= ( ( <class-type> :class-type1 ) { ( VALUE $class-type1 ) }
    | ( <class-type> :class-type1 <fare> ) { ( VALUE $class-type1 ) }
    | ( <pron-rel> are <class-type> :class-type3 ) { ( VALUE $class-type3 ) }
    | ( taking <class-type> :class-type2 ) { ( VALUE $class-type2 ) }
  ) .

<with-flight>
  ::= ( ( for <flight-descr> :flight-descr2 ) { ( VALUE [a:flight] $flight-descr2 ) }
    | ( from <flight-descr> :flight-descr2 ) { ( VALUE [a:flight] $flight-descr2 ) }
    | ( in <flight-descr> :flight-descr2 ) { ( VALUE [a:flight] $flight-descr2 ) }
    | ( of <flight-descr> :flight-descr2 ) { ( VALUE [a:flight] $flight-descr2 ) }
    | ( on <flight-descr> :flight-descr2 ) { ( VALUE [a:flight] $flight-descr2 ) }
    | ( with <flight-descr> :flight-descr2 ) { ( VALUE [a:flight] $flight-descr2 ) }
    | ( for flying <flight-mod-phrase> :flight-mod-phrase3 ) { ( VALUE [a:flight] $flight-mod-phrase3 ) ( WRITE context/flight $flight-mod-phrase3 ) }
    | ( for these ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( from these <flight> listed ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( from this list ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
    | ( of these ) { ( READ context/flight ( [a:flight] ) ) ( VALUE ( [a:flight] ) ) }
  ) .

<with-ground-service>
  ::= ( ( for <ground-service-descr> :ground-service-descr2 ) { ( VALUE [a:ground_service] $ground-service-descr2 ) }
    | ( of <ground-service-descr> :ground-service-descr2 ) { ( VALUE [a:ground_service] $ground-service-descr2 ) }
  ) .

<with-interval>
  ::= ( ( <interval> :interval1 ) { ( VALUE [a:bounded_integer] $interval1 ) }
    | ( all <interval> :interval2 ) { ( VALUE [a:bounded_integer] $interval2 ) }
    | ( during the <interval> :interval3 ) { ( VALUE [a:bounded_integer] $interval3 ) }
    | ( during the day ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  600 ) ( APPEND range/upper/<=  1800 ) ) ) }
    | ( early a m ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  0 ) ( APPEND range/upper/<=  800 ) ) ) }
    | ( early in the afternoon ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  1200 ) ( APPEND range/upper/<=  1400 ) ) ) }
    | ( early in the day ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  0 ) ( APPEND range/upper/<=  1000 ) ) ) }
    | ( early in the evening ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  1800 ) ( APPEND range/upper/<=  2000 ) ) ) }
    | ( early in the morning ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  0 ) ( APPEND range/upper/<=  800 ) ) ) }
    | ( evenings ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  1800 ) ( APPEND range/upper/<=  2200 ) ) ) }
    | ( in the <interval> :interval3 ) { ( VALUE [a:bounded_integer] $interval3 ) }
    | ( in the <interval> :interval3 or <interval> :interval5 ) { ( VALUE [a:bounded_integer] ( APPEND OR  $interval3 $interval5 ) ) }
    | ( in the a m ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  0 ) ( APPEND range/upper/<=  1200 ) ) ) }
    | ( late ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  2000 ) ( APPEND range/upper/<=  300 ) ) ) }
    | ( late in the afternoon ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  1600 ) ( APPEND range/upper/<=  1800 ) ) ) }
    | ( late in the evening ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  2000 ) ( APPEND range/upper/<=  2200 ) ) ) }
    | ( late in the morning ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  1000 ) ( APPEND range/upper/<=  1200 ) ) ) }
    | ( nights ) { ( VALUE [a:bounded_integer] ( APPEND AND ( APPEND range/lower/>=  1800 ) ( APPEND range/upper/<=  600 ) ) ) }
  ) .

<with-seating-capacity-smallest>
  ::= ( ( with the smallest seating capacity ) 
  ) .

<year>
  ::= ( ( nineteen ninety three ) { ( VALUE [a:integer] 1993 ) }
  ) .

