eh ?[um uh]

YES_WORDS [(yes ?_IT_IS)
           _IT_IS
           yup
           yeah
           okay
           sure
           (you got it)
           (?(?yes that's) [right correct])
          ]

NO_WORDS  [nope
           (absolutely not)
           (no ?[_IT_IS_NOT way])
           _IT_IS_NOT
           (?(?no that's)
            [wrong
             (not [correct right])
             incorrect
            ]
           )
          ]

_IT_IS
    (it [sure certainly] is)

_IT_IS_NOT
    [(it isn't) (it's not) (it is not)]


DigitString
[ 
        zero    {dollars = ("0");}
        oh      {dollars = ("0");}
        one     {dollars = ("1");}
        two     {dollars = ("2");}
        three   {dollars = ("3");}
        four    {dollars = ("4");}
        five    {dollars = ("5");}
        six     {dollars = ("6");}
        seven   {dollars = ("7");}
        eight   {dollars = ("8");}
        nine    {dollars = ("9");}
]

DigitString_0_1 
[ 
        zero    {dollars = ("0");}
        oh      {dollars = ("0");}
        one     {dollars = ("1");}
]

4DigitString  (?Uh 
               DigitString     { d1  = dollars; }
               DigitString     { d2  = dollars; }
               DigitString     { d3  = dollars; }
               DigitString     { d4  = dollars; }
              )
              {dollars = d1 + d2 + d3 + d4                                      ; }

5DigitString  (?Uh 
               DigitString     { d1  = dollars; }
               DigitString     { d2  = dollars; }
               DigitString     { d3  = dollars; }
               DigitString     { d4  = dollars; }
               DigitString     { d5  = dollars; }
              )
              {dollars = d1 + d2 + d3 + d4 + d5                                 ; }

7DigitString  (?Uh 
               DigitString     { d1  = dollars; }
               DigitString     { d2  = dollars; }
               DigitString     { d3  = dollars; }
               DigitString     { d4  = dollars; }
               DigitString     { d5  = dollars; }
               DigitString     { d6  = dollars; }
               DigitString     { d7  = dollars; }
              )
              {dollars = d1 + d2 + d3 + d4 + d5 + d6 + d7                       ; }

10DigitString (?Uh 
               DigitString     { d1  = dollars; }
               DigitString     { d2  = dollars; }
               DigitString     { d3  = dollars; }
               DigitString     { d4  = dollars; }
               DigitString     { d5  = dollars; }
               DigitString     { d6  = dollars; }
               DigitString     { d7  = dollars; }
               DigitString     { d8  = dollars; }
               DigitString     { d9  = dollars; }
               DigitString     { d10 = dollars; }
              )
              {dollars = d1 + d2 + d3 + d4 + d5 + d6 + d7 + d8 + d9 + d10       ; }

11DigitString (?Uh
               DigitString_0_1 { d1  = dollars; }
               DigitString     { d2  = dollars; }
               DigitString     { d3  = dollars; }
               DigitString     { d4  = dollars; }
               DigitString     { d5  = dollars; }
               DigitString     { d6  = dollars; }
               DigitString     { d7  = dollars; }
               DigitString     { d8  = dollars; }
               DigitString     { d9  = dollars; }
               DigitString     { d10 = dollars; }
               DigitString     { d11 = dollars; }
              )
              {dollars = d1 + d2 + d3 + d4 + d5 + d6 + d7 + d8 + d9 + d10 + d11 ; }

7-10-11-Digits 
[
    [ 
        7DigitString  :num 
        10DigitString :num 
        11DigitString :num
    ] {dollars = dollars;}  ;;  {return($num)}
]


Atonin
[ at on in
]

I_Want
[
        (?maya ?please)
    (?maya ?please i want)
    (?maya ?please i would like)
    (?maya ?please i'd like)
]

I_Wish
[
        (?maya ?please)
    (?maya ?please i [wish want])
    (?maya ?please i would like)
    (?maya ?please i'd like)
]

I_Do_Wish
[
        (?maya ?please)
    (?maya ?please i ?do [wish want])
    (?maya ?please i would like)
    (?maya ?please i'd like)
]

Give_Me
[
        (?maya ?please)
    (?maya ?please [(give me) (get ?me) (show ?me) ] )
]

I_Want_Ext
[
    I_Want
    Give_Me
]

I_Want_Ext_To
[
    (I_Want to)
    Give_Me
]


I_Want_Ext_My
[
    (I_Want_Ext ?my)
    my
]

I_Want_The
[
    (I_Want ?the)
    the
]

I_Want_Ext_The
[
    (I_Want_Ext ?the)
    the
]


I_Want_Ext_MyThe
[
    (I_Want_Ext ?[the my])
    [the my]
]

Suffix_Please
[
    please
]

Suffix_MenuPlease
(
    [ (menu ?please) please ]
)

Universal_Help
[
    (
        ?[
            I_Want_Ext 
            (can i get)
            (I_Want to get)
        ]
        ?some help ?Suffix_Please
    ) {dollars = "help";}
]

Universal_Cancel
[
         (?that's enough) {dollars = "cancel";}
     (?[(I_Wish to) please] cancel ?it ?Suffix_Please)  {dollars = "cancel";}

]

Universal_Exit
[
     (?[(I_Wish to) please] exit ?(to ?the main menu) ?Suffix_Please) {dollars = "exit";}

]

Universal_StartOver
[
     (?[(I_Wish to) please] (start over) ?Suffix_Please) {dollars = "exit";}
]

Universal_Goodbye
[
     [(?(thank you) ?maya goodbye ?maya ?(thank you)) (hang up)] {dollars = "goodbye";}

]

Universal_Commands_NoExit
(
    ?Uh
    [
        Universal_Help      :uc
        Universal_Cancel    :uc
        Universal_Goodbye   :uc
        Universal_StartOver :uc
        Universal_Exit      :uc
    ] {dollars = dollars;} 
)

Universal_Commands_NoCancel
(
    ?Uh
    [
        Universal_Help      :uc
        Universal_Exit      :uc
        Universal_StartOver :uc
        Universal_Goodbye   :uc    
    ] {dollars = dollars;}
)               

Universal_Commands_HelpCancel
(   
    ?Uh
    [
        Universal_Help   :uc
        Universal_Cancel :uc
    ] {dollars = dollars;}
)               

Universal_Commands_HelpGoodbye
(   
    ?Uh
    [
        Universal_Help    : uc
        Universal_Goodbye : uc
    ] {dollars = dollars;}
)               


Universal_Commands 
(
    ?Uh
    [
        Universal_Help      :uc
        Universal_Cancel    :uc     
        Universal_Exit      :uc
        Universal_StartOver :uc
        Universal_Goodbye   :uc
    ] { dollars = dollars; }
)

.Univ_Cancel_Conf
[
  (
    ?Uh
    [
        [ 
            (YES_WORDS)
            (   
                ?Yes_Only 
                [
                    (?(I_Do_Wish to) cancel ?[it (the ?current operation)])
                    (i do)
                    (?please cancel)
                ]
            )
        ] {confirm = "yes";}

        [
            NO_WORDS
            (?NO_WORDS (stop ?it))
            (?(NO_WORDS ?stop) ?please ([don't (do not)] ?(cancel ?[it (the ?current operation)])))
            (
                ?No_Only 
                [
                    (i [don't (do not)] ?([wish want] [it (to cancel ?[it (the ?current operation)])]))
                ]
                
            )
        ]{confirm = "no";}

    ]
    ?Suffix_Please
  )
  Universal_Help:uc~0.01   {ucommand = dollars;}
]

.Cancel_Conf_During_Outgoing_Call
[
   [
        NO_WORDS
    (?NO_WORDS (stop ?it))
    (?(NO_WORDS ?stop) ?please ([don't (do not)] ?(cancel ?[it (the ?current operation)])))
    (
                ?No_Only 
                [
                    (i [don't (do not)] ?([wish want] [it (to cancel ?[it (the ?current operation)])]))
                ]
        )
    (?(I_Do_Wish to) cancel ?[it (the ?current operation)])
    (?please cancel)
    ( wake up maya )
   ] {confirm = "no";}

   (?please start over) {confirm = "start over";}
   (?please exit)       {confirm = "start over";}
]

.Univ_Exit_Conf
[
  ?Uh
  (
    [
        [ 
            (YES_WORDS)
            (   
                ?Yes_Only 
                [
                    (I_Do_Wish to)
                    (?(I_Do_Wish to)  [exit (return to ?the main menu)])
                    (i do)
                ]
            )
        ] {confirm = "yes";}

        [
            NO_WORDS
            (?NO_WORDS (stop ?it))
            (?(NO_WORDS ?stop) ?please ([don't (do not)] ?[exit (return to ?the main menu)]))
            (
                ?No_Only 
                [
                    (i [don't (do not)] ?([wish want] [ (to [exit (return to ?the main menu)]) that ]))
                ]
                
            )
        ] {confirm = "no";}

    ]
    ?Suffix_Please
  )
  Universal_Help:uc~0.01   {ucommand = dollars;}
  Universal_Cancel         {ucommand = dollars;}
  Universal_StartOver      {ucommand = dollars;}
]

.Univ_Goodbye_Conf
[
  (
    ?[Uh please]
    [
        [
            ((YES_WORDS) ?[(go ahead) ?please (leave ingenious)])
            (
                ?Yes_Only 
                [
                        (?(I_Do_Wish to) leave ?ingenious)
                        (goodbye maya)
                        (i do)
                ]
            )
        ]  {confirm = "yes";}

        [
            NO_WORDS
            (?NO_WORDS (stop ?it))
            (?(NO_WORDS ?stop) ?please ([don't (do not)] ?[(leave ingenious) (do that)]))
            (?(?No_Only ?stop) (i [don't (do not)] ?([wish want] [ (to leave ingenious) that] )))
        ] {confirm = "no";}
    ] 
    ?Suffix_Please
  )
  Universal_Help:uc~0.01 {ucommand = dollars;}
  Universal_Cancel       {ucommand = dollars;}
]

.Login_Main
[
  [
  [
    (5DigitString:pwd)
  ]                                 {subscrib_pwd = dollars;}
  [Universal_Cancel stop Stop_Call] {ucommand = "cancel";}
  ]
]


.Login_AccNo
[
  [
        (10DigitString:pwd)
  ] {subscrib_accno = dollars;}
]

Loginname [ Sanjay ]

.Login_Name
[
        Loginname:nm {login_name = dollars;}
]

No_Ext
[
    NO_WORDS
    (?No_Only certainly not)
    (of course not)
]


Yes_Ext
[
    YES_WORDS
    (?Yes_Only of course)
    certainly
]

I_Did_Generic
[
     (?Yes_Only [
            (i ?certainly did)
            (of course i did)
          ]
    )
]

I_DidNot_Generic
[
    (?No_Only 
        [ 
            (?(of course) i [didn't (did not)]) 
            (i certainly  [didn't (did not)])
        ] 
    )
]

Enough_TTS
[
        ?Uh (stop ?it) okay (?that's enough) ?Suffix_Please
]

.Login_Pwd_Conf
[
     Yes_Ext {confirm = "yes";}
     No_Ext  {confirm = "no" ;}
     (
        [
            I_Did_Generic    {confirm = "yes";}
            I_DidNot_Generic {confirm = "no" ;}
        ] 
        ?(say that ?number)
     )
]

Stock_Market
[
        ([stock financial] ?market ?watch ?[report quotes chart update news information info])
        (stocks)
]

Stock_Market_Indicators
[
        (?maya ?please [stock financial market] ?market ?watch [indicators indices chart])
]

Stock_Market_Portfolio
[
        (?maya ?please [stock financial] ?market ?watch [portfolio portfolios quotes])
]

MM1
[
        (?maya ?please [address phone] book)      {command = "address book" ; }
        (Stock_Market)                            {command = "stock"        ; }
        (Stock_Market_Indicators  ?Suffix_Please) {command = "stock_ind"    ; }
        (Stock_Market_Portfolio  ?Suffix_Please)  {command = "stock_portf"  ; }
        (Page)                                    {command = "page"         ; }
        (Page                                     {command = "page"         ; } 
         Name:nm                                  {name = dollars           ; }
        )
        (?maya last direction)                    {command = "last direction";}
]

MM_Group1
[
    (?I_Want_Ext_The MM1 ?Suffix_MenuPlease)
    (?I_Want_Ext_My MM1 ?Suffix_Please)
]

MM4
[
        [(news edge) (?today's headlines) (headline news) (news ?headlines) (headlines menu)] {command = "headlines"        ; }
        (traffic ?[report update condition conditions information menu] ?Suffix_Please)       {command = "traffic"          ; }
        (weather ?[channel report update menu])                                               {command = "weather"          ; }
        ([today's local] [(weather ?channel ?forecast) forecast] ?Suffix_Please)              {command = "weather_today"    ; }
        ([extended (three day)] [(weather ?channel ?forecast) forecast] ?Suffix_Please)       {command = "weather_extended" ; }
]

MM4a
[
        [(flight tracking) (flight status) (biztravel)] {command = "flight";}
]

MM_Group4
[
        (?I_Want_Ext_The MM4 ?Suffix_Please)
        (?I_Want_Ext MM4a ?Suffix_Please)
]

MM5a
[
        [(my info) (information) (my information) (content)] {command="my_info";}
]

MM_Group5
[
        (?I_Want_Ext MM5a ?Suffix_Please)
]

MM6
[
        (voice [calling dialing])  {command = "call";}
        (?voice paging) {command = "page";}
]

Want_Call
[
    (I_Want to [make place] a ?phone call) {command = "call";}
]

Want_Page
[
    (I_Want to [send place] a page) {command = "page";}
]

MM_Group6
[
    (?I_Want_Ext [ MM6 (the MM6 menu) ] ?Suffix_Please)
    Want_Call
]

NamePhrase
[
        ?[and ?cc]  Name:nm {dollars = dollars;}  ;; return($nm)}
]

Location
[
    (home ?phone)                       {dollars = "home"  ; }
    (?the office ?phone)                {dollars = "office"; }
        (work ?phone)                   {dollars = "work"  ; }
        ([mobile cell cellular] ?phone) {dollars = "mobile"; }
        (car ?phone)                    {dollars = "car"   ; }
        (other ?phone)                  {dollars = "other" ; }
]

Device
[
    (home ?phone)                   {dollars = "home"  ;}
    (office ?phone)                 {dollars = "office";}
    (work ?phone)                   {dollars = "work"  ;}
    ([mobile cell cellular] ?phone) {dollars = "mobile";}
    (car ?phone)                    {dollars = "car"   ;}
    (pager)                         {dollars = "pager" ;}
    (other ?phone)                  {dollars = "other" ;}
]

Call
[
        (?I_Want_Ext [call dial] )
    (?I_Want_Ext [make place] a ?phone call to)
    (?I_Want_Ext get ?me)
]


Page
[
    (?I_Want_Ext page)
    (?I_Want_Ext [make place send] ?a page ?to)
]    


MM7
[
    call {command = "call";}
    dial {command = "call";}
]

MM_Group7
[
        (?I_Want_Ext MM7 ?Suffix_Please) 

]

MM_Group8
(
    ?[I_Want to please]
    [
                (?I_Want_Ext Call {command = "call";}  Name:nm {name = dollars;} ?([(Atonin ?[his her])] Location:loc {location = dollars;}))
                (?I_Want_Ext Page {command = "page";} Name:nm {name = dollars;} )
    ]
    ?Suffix_Please
)

MM_Group9
(
    ?(I_Want to)
    [
        (?Call ?new [direction directions] {command = "call"; name = "direction";})
        (?Call (customer [care service assistance]) {command = "call"; name = "customer care";})
                (?Call (help desk) {command = "call"; name = "customer care";})
        (?Call ?(area code)~0.01 7-10-11-Digits:num {command = "call"; phone_number = dollars;})
    ]
    ?Suffix_Please
)


PauseMain
[
  ([(pause) (pause maya) (maya pause)]  {command = "pause";})
]

ChangePin
[
  ((?maya ?please change account) {command = "change account";})
]

Wakeup_Genie
[
  Wakeup {command = "wakeup_genie";}
]

Drop_Call_Genie
[
  (     
    ?Uh
    ?[(I_Wish to) please]
    [
        (
            [ drop ?drop {command = "drop_call_genie";} ]  ?[ it (?(the ?telephone) call) ]
        )
    ]
    ?Suffix_Please
  )     
]

.MM_Main
[
  (
    ?Uh
    [
        MM_Group1
        MM_Group4
        MM_Group5
        MM_Group6
        MM_Group7
        MM_Group8
        MM_Group9
        ChangePin
        PauseMain
        Want_Return_Call
        Drop_Call_Genie
    ] ?Suffix_Please
  )
  menu {ucommand = "help";}
  Universal_Commands_NoExit  {ucommand = dollars;}
]

.MM_Main_NoNbr
[
  (
    ?Uh
    [
        MM_Group1
        MM_Group4
        MM_Group5
        MM_Group6
        MM_Group7
        MM_Group8
        PauseMain
        Drop_Call_Genie
    ] ?Suffix_Please
  )
  menu {ucommand = "help";}
  Universal_Commands_NoExit  {ucommand = dollars;}
]

.MMenu_GoodbyeWhenCallIsOnHold
[cancel           {command = "cancel"         ; }
 (return to call) {command = "return to call" ; }
]

Want_Return_Call
[
    (?(I_Want to) return to ?the call) {command = "return to call";}
]

.MM_Main_Call_Hold
[
  (
    ?Uh
    [
        MM_Group1
        MM_Group4
        MM_Group5
        Want_Return_Call
        ChangePin
        PauseMain
    ] ?Suffix_Please
  )
  menu {ucommand = "help";}
  Universal_Commands_NoExit  {ucommand = dollars;}
]

It_s
[
    it's
    that's
]

Yes_Only
[
    yes
    yeah 
    yup
    yep
]

No_Only
[
    no
    nope
]

Okay_Query
[
    YES_WORDS
    (?Yes_Only (?[it's its that's] okay ?(as ?it is)))
    (?Yes_Only ?[that's its it's] fine)
]

Not_Okay
[
    NO_WORDS
    (?No_Only (?[it's its that's] not okay))
]

Groups_AtEnd
[
    (?my family)                  {dollars = "family"            ; }
    (?my friends)                 {dollars = "friends"           ; }
    (?[my the] business contacts) {dollars = "business contacts" ; }
    urgent                        {dollars = "urgent"            ; }
    [other (all others)]          {dollars = "other"             ; }
]

Groups_AtBegin
[
    ((everyone ?(of?[the my]))        ) {dollars = "all"               ; }
    (?[my the] family                 ) {dollars = "family"            ; }
    (?[my the] friends                ) {dollars = "friends"           ; }
    (?the business ?[contact contacts]) {dollars = ""business contacts"; }
    (?the [urgent priority]           ) {dollars = "urgent"            ; }
    ((?[the all] other)               ) {dollars = "other"             ; }
]

AddrName
[
        sanjay { dollars = "sanjay"; }
]

Addr_Bk_MM_Group8
(
    ?[I_Want to please]
    [
        (Call {command = "call";} ?[(Name {name = dollars;}) [him her]] ?([ (Atonin ?[his her])] Location {location = dollars;}))
        (Page {command = "page";} ?[(Name {name = dollars;}) [him her]])
    ]
    ?Suffix_Please
)

.Addr_Bk_Main
[
  (
    ?Uh
    [
        (?(?I_Want_Ext_The ?([listings entries category group] [for of]) ) Groups_AtEnd:grp)
        
        ( ?[(I_Want_Ext ?(to hear)) hear ] 
                (Groups_AtBegin { group = dollars; } ?[entries listings category categories group groups]))
    ] 
    ?Suffix_Please 
  ) 
  (?Uh [(everyone ?(of them)) everybody]) {group = "all";}
  (?Uh list ?everyone ?(of them) ?everybody) {group  = "all";}

  [
    ( ?Uh [?(I_Want to) please] stop 
        ?Suffix_Please
    )
    Enough_TTS
  ] { group = "stop"; }

  (
    ?Uh
    [
        (?(?I_Want_Ext_The ?([listing entry ] [for of]) ) Name:nm)
        
        ( ?[(I_Want_Ext ?(to hear)) hear ] 
                (Name {name = dollars;} ?( [entry listing])) )
    ] 
    ?Suffix_Please 
  )
  Addr_Bk_MM_Group8
  Universal_Commands  {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
  [quit (start over)] {ucommand = "exit";}
]

.Addr_Bk_Details [
        (?Uh ?I_Want_Ext_The details ?Suffix_Please) {command = "detail";}
        Enough_TTS {ucommand = "exit";}
        Universal_Commands  {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
        Addr_Bk_MM_Group8
]

Stop_Listings
[
  (
     [
     (?[(I_Want to) please] stop ?[ it ?(?the [listing listings]) ] )
     (?okay ?that's enough)
     ]
     ?Suffix_Please
  )   {dollars = "stop";}
]

.All_Listings
[       
     (?Uh Stop_Listings:cmd) {command = dollars;}
     Universal_Commands  {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
]

.Category_Listings
[
    (?Uh Stop_Listings:cmd) {command = dollars;}
    Universal_Commands  {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
]

.Name_Listing
[
    (?Uh Stop_Listings:cmd) {command = dollars;}
    Universal_Commands  {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
]

.Voice_Dial_Main 
[
  (
    ?Uh
    ?[(I_Wish to) please]
    [
        (?Call Name {name = dollars;} ?([(Atonin ?[his her])] Location {location = dollars;} ))
        (?Call ?(area code)~0.01 7-10-11-Digits {phone_number = dollars; })
    ]
    ?Suffix_Please
  )
  Universal_Commands  {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}

]

Stop_Words
[
    [
        NO_WORDS
        (?NO_WORDS ?please [cancel  stop] ?it )
        (wait a minute)
        (hold it)
        (?no don't )
    ] 
] 

Stop_Words_NoCancel
[
    [
        NO_WORDS
        (?no don't )
    ] 
] 

Cancel_Call
[
    (NO_WORDS)
    (?no [ ( (?please [cancel stop])  ?[it ([the that this] ?phone call)]) don't ])
]

Stop_Call
[ 
    (Cancel_Call)
        (no ?no ?no ?no)
    (?no wait ?(a minute))
    (hold it)
]

Cancel_Page
[
    (NO_WORDS)
    (?no ?please [ ([cancel stop] ?[it ([the that this] ?page)]) don't])
    (?no ?please don't send [it (the page)])
]

Stop_Page
[
    (Cancel_Page)
        (no ?no ?no ?no)
    (?no wait ?(a minute))
    (hold it)
]

Wait
[
        (?no wait ?(a minute))
        (hold it)
]

Implicit_Call_Conf
[
        ([YES_WORDS Yes_Phrase] { dollars="yes"; })
        [
                Stop_Call 
                (?No_Only (i [don't (do not)] ?([wish want] [it (?(to [make place]) this call)]))) 
                (?No_Only [don't (do not)] [make  place] [it ([the this] call)])
                (Wait ?please)
        ] {dollars = "no";}
]

Implicit_Page_Conf
[
        ([YES_WORDS Yes_Phrase] { dollars = "yes"; } )
        [
                Stop_Page
                (?No_Only (i [don't (do not)] ?([wish want] [it (?(to [send place]) this page)])))
                (?No_Only [don't (do not)] [send place] [it ([the this] page)]) 
                (?No_Only stop ?paging)
        ] {dollars = "no";}
]

Yes_Phrase
[
        (yes ?yes ?yes ?yes)
        (?Yes_Only ?[it's that's] [okay  fine])
        (?[Yes_Only okay sure fine] go ahead )
]

No_Phrase
[
    (
        ?No_Only 
        [
                ([it's that's] not ?okay)
                (certainly not)
                (of course not)
        ]
    )
]

Wish_Call
[
        (
            [
                (YES_WORDS)
                Yes_Phrase
                (?Yes_Only (i do ?([wish want] [(to [make place] [the this] call)])))
                (?Yes_Only ?please [send place] [the this]  page)
                (?Yes_Only [send place] [the this]  page ?Suffix_Please)
                (yes Suffix_Please)
            ] 
        ) { dollars = "yes"; }
        [
                Stop_Call
                (?no (i [don't (do not)] ?([wish want] [it (?(to [make place]) [the this] call)]))) 
                (?no ?please [don't (do not)] [make  place] [it ([the this] call)])
        ] { dollars = "no"; }
]

Wish_Page
[
        (
            [
                (YES_WORDS)
                Yes_Phrase
                (Yes_Only (i do ?([wish want] [(to [send place] this page)])))
                (Yes_Only ?please [send place] [the this]  page)
                (Yes_Only [send place] [the this]  page ?Suffix_Please)
                (yes Suffix_Please)
            ]
       )  {dollars = "yes";}
        [
                Stop_Page
                (?no (i [don't (do not)] ?([wish want] [it (?(to [make place]) [the this] page)]))) 
                (?no ?please [don't (do not)] [make  place] [it ([the this] page)])
        ] {dollars = "no";}
]

.Phone_Num_Conf
[
    (?Uh Implicit_Call_Conf {confirm = dollars;} )
        Universal_Help:uc~0.01   {ucommand = dollars;}  ;;  {<ucommand $uc>}
        Universal_Exit           {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
        Universal_StartOver      {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
        Universal_Goodbye        {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}   
]

.Call_Conf
[
        (place [(?the call) it]) {confirm = "yes";}
    (?Uh Wish_Call {confirm = dollars;} )
        Universal_Help:uc~0.01   {ucommand = dollars;}  ;;  {<ucommand $uc>}
        Universal_Exit           {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
        Universal_StartOver      {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
        Universal_Goodbye        {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}   
]


No_Didnt
[
    (No_Only ?(of course) i [(did not) didn't])
    ([certainly  (of course)] not)
]

Yes_Did
[
    (Yes_Only ?(of course) i did)
     (of course)
]


.Sec_Ch_Num_Conf
[
  (
    ?Uh
    [
      (Wish_Call {confirm = dollars;} ?Suffix_Please)
      (Yes_Did {confirm = "yes";})
      (No_Didnt {confirm = "no";})
    ]
  )
        Universal_Help:uc~0.01  {ucommand = dollars;}  ;;  {<ucommand $uc>}
        Universal_Exit          {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
        Universal_StartOver     {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
        Universal_Goodbye       {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}   
]


.Name_Loc_Conf
[
    (?Uh Implicit_Call_Conf {confirm = dollars;}  ?Suffix_Please) ;;  {<confirm $conf>}
        Universal_Help:uc~0.01 {ucommand = dollars;}  ;;  {<ucommand $uc>}
        Universal_Exit         {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
        Universal_StartOver    {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
        Universal_Goodbye      {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}   
]


.Change_Name_Loc
[
    (
        ?Uh
        ?[ (?[(I_Wish to) please] change ?the) change ?the]
        [
            name {change = "name";}
            [location place] {change = "location";}
            [
                (?please start [over again]) 
                ([all both] ?(of them))
                (?both [ (?the name and ?the [location place]) (?the [location place] and ?the name) ]) 
            ] {change = "all";}
        ]
        ?Suffix_Please
    ) 
    Universal_Commands  {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
]

.Get_Loc
[
    (?Uh ?(?[at in] [his her the]) Location {location = dollars;} ?Suffix_Please )
    Universal_Commands  {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
]

.Get_Name
[
    (?Uh ?[call dial] Name {name = dollars;} ?Suffix_Please)
    Universal_Commands  {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
]

.Get_Name_Loc
[
    (
        ?Uh
        ?[ (I_Wish ?(to Call)) (?please Call) ]
        (Name {name = dollars;} ?([(at ?[his her])] Location  {location = dollars;} ))
     ?Suffix_Please
    )
    Universal_Commands  {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
]

.Get_Phn_Num
[
    (
        ?Uh
        ?[ (I_Wish ?(to Call)) (?please Call) ]
        ?(area code)~0.01 7-10-11-Digits:num {phone_number = dollars;}  ;;  {<phone_number $num>} 
        ?Suffix_Please
    )
    Universal_Commands  {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
]

I_Did
[
    YES_WORDS
    (?yes [
            (i ?certainly did)
            (of course i did)
          ]
      ?(say a ?phone number))
    (?yes of course)
]

Yes_I_Do
[
    YES_WORDS
    Yes_Phrase
    (
        ?Yes_Only 
        [
            (i ?certainly do)
            ([(of course) certainly] ?(i do))
        ]
    )
]

I_DidNot
[
    NO_WORDS
    (?no 
        [ 
            (?(of course) i [didn't (did not)]) 
            (i certainly  [didn't (did not)])
        ] 
                ?([say speak] a ?phone number))
    (?no certainly not)
    (of course not)
]

No_I_Dont_Only
[
    (
        ?No_Only 
        [ 
            (?(of course) i [don't (do not)]) 
            (i certainly  [don't (do not)])
        ] 
    )
]


No_I_Dont
[
    NO_WORDS
    No_Phrase
    No_I_Dont_Only
]

.Num_Dial_Conf
[
    (?Uh I_Did)    {confirm = "yes";} ;;  {<confirm yes>}
    (?Uh I_DidNot) {confirm = "no";}  ;;  {<confirm no>}

        Universal_Help:uc~0.01   {ucommand = dollars;}  ;;  {<ucommand $uc>}
        Universal_Cancel         {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
        Universal_Exit           {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
        Universal_StartOver      {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
        Universal_Goodbye        {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
]

.Paging_Main
[
  (
    ?Uh
    ?[(I_Wish to) please]
    [
        (?Page  Name {name = dollars;} ) ;;  :nm {<name $nm>}
    ]
    ?Suffix_Please
  )
  Universal_Commands  {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
]

.Page_Conf
[
    (?Uh Wish_Page { confirm = dollars; }  ?Suffix_Please) ;; {<confirm $conf>}
        Universal_Help:uc~0.01          {ucommand = dollars;}  ;;  {<ucommand $uc>}
        Universal_Exit                  {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
        Universal_StartOver             {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
        Universal_Goodbye               {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}   
]

.Paging_Name_Ret_Conf
[
    (?Uh Implicit_Page_Conf  {confirm = dollars;} ?Suffix_Please) 
        Universal_Help~0.01  {ucommand = dollars;}  ;;  :uc~0.01 {<ucommand $uc>}
        Universal_Exit       {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
        Universal_StartOver  {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
        Universal_Goodbye    {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}   
]


.Chg_Paging_Name_Ret
[
    (
        ?Uh
        ?[ (?[(I_Wish to) please] change the) change the]
        [
           (name {change = "name";} )
           (?[my  the] ?return location { change = "location"; } )
           ([
                (?please start [over again]) 
                ([all both] ?(of them))
                (?both [ (?the name and ?[my the] (?return location)) (?[my the] (?return location) and ?the name) ])
            ] {change = "all";} )
       ]
       ?Suffix_Please
    )  
    Universal_Commands
]


.Chg_Paging_Name
[
  (
        ?Uh
        ?[ (?[(I_Wish to) please] change the) change the]
        [
            (name ?(of the person ?(to page))) {change = "name"; }  ;;  {<change name>}
            (?please start [over again])  {change = "all";}  ;;  {<change all>}
        ]
        ?Suffix_Please
  )
  Universal_Commands { ucommand = dollars; }  ;;  :uc {<ucommand $uc>}
]

.Get_Paging_Loc
[
    (
        ?Uh
        ?[
                (?the ?return location ?is)  
                ( ?(?the ?return location is)  ([at (?at [the my]) ]) )
                (return [call page] to ?[the my])
        ]       
        Location { location = dollars;}  ;;  :loc {<location $loc>} 
        ?Suffix_Please
    )
        (
        ?Uh
        ?[
                (?the ?return location ?is)  
                ( ?(?the ?return location is)  ([at (?at [the my]) ]) )
                (return [call page] to ?[the my])
        ]       
        ?(area code)~0.01 7-10-11-Digits  {phone_number = dollars;}  ;;  :num {<phone_number $num>} 
        ?Suffix_Please
    )
    Universal_Commands  {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
]

.Get_Pagee_Name
[
    (?Uh ?please ?page Name {name = dollars;} ?Suffix_Please)  ;;  (?Uh ?please ?page Name:nm {<name $nm>} ?Suffix_Please)
    Universal_Commands {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
]

.Weather_Main
[
   (
        ?Uh
        ?[     
          I_Want_Ext
          (?please [read (get ?me)])
        ]
        [
             ([(today's {period = "today";}) (?the ([(five day) extended] {period = "extended";})) ] ?weather ?[forecast report])
             (?(the ?weather forecast for) [today {period = "today";} ( ?(the [next following]) five days ) {period = "extended";} ])
        ] 
        ?Suffix_Please
   )
   Universal_Commands { ucommand = dollars; }  ;;  :uc {<ucommand $uc>}
   
]

Weather
[
        ?maya
        [
                weather
                (?weather [forecast report info information])
        ]
]

.Today_Weather
[
    (
        ?Uh
        ?maya
        ?please 
        [
          [
            (repeat ?(?[the today's] Weather) ?([ again (from the beginning)]))
            (repeat it ?again)
          ]     {command = "repeat";}  ;;  {<command repeat>}

          [
            ([stop leave exit (start over)] ? [(?[today's the ] Weather ) (the weather) ])
            Enough_TTS
          ] {command = "exit";}  ;;  {<command exit>}
      Rejects:d
        ]
        ?Suffix_Please
    ) 
    Universal_Commands  {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
]

.Extended_Weather
[
    (
        ?Uh
        ?maya
        ?please 
        [
          [
            (repeat ?(?the ?(five day) ?(extended) Weather) ?([ again (from the beginning)]))
            (repeat it ?again)
          ] {command = "repeat";}  ;;  {<command repeat>}
          [
            ([stop leave exit (start over)] ?(?the (?(five day) ?(extended) Weather) ))
            Enough_TTS
          ] {command = "exit";}  ;;  {<command exit>}
      Rejects:d
        ]
        ?Suffix_Please
    ) 
    Universal_Commands {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
]


Headlines
[
        ?maya
        [
                headlines
                (?headline news)
                (news report)
        ]
]

.Head_News_Main
[
    (?Uh ?maya ?please 
        [
            (repeat ?(?[the today's] Headlines) ?([ again (from the beginning)])) {command = "repeat";}  ;;  {<command repeat>}
            (repeat it ?again) {command = "repeat";}  ;;  {<command repeat>}
            ([stop leave exit (start over)] ?(?[the today's] Headlines)) {command = "exit";}  ;;  {<command exit>}
            Enough_TTS {command = "exit";}  ;;  {<command exit>}
            Rejects:d
        ]
        ?Suffix_Please
    ) 
    Universal_Commands {ucommand = dollars; }  ;;  :uc {<ucommand $uc>}
]

Traffic
[
        (?maya ?traffic [conditions report update news information info ])
]

.Traff_Cond_Main
[
    (?Uh ?maya ?please 
        [
            (repeat ?(?the Traffic) ?([ again (from the beginning)])) {command = "repeat";}  ;;  {<command repeat>}
            (repeat it ?again)  {command = "repeat";}  ;;  {<command repeat>}
            ([leave exit (start over)] ?(?the Traffic)) {command = "exit";}  ;;  {<command exit>}
            ([stop cancel] ?(?the Traffic)) {command = "cancel";}  ;;  {<command cancel>}
            Enough_TTS  {command = "cancel";}  ;;  {<command cancel>}
            Rejects:d
        ]
        ?Suffix_Please
    ) 
    Universal_Commands { ucommand = dollars; }  ;;  :uc {<ucommand $uc>}
]

Stock_Portf
[
        (?maya [stock (?stock portfolio)])
]

Market_Ind
[
        (?maya ?[financial stock] ?market [indicators indices index])
]

.Stock_Mkt_Main
[
    (?Uh 

        ?[     
          I_Want_Ext
          (?please [read (get ?me)])
        ]

        [
            (?[my the] Stock_Portf) {category = "portfolio";}  ;; {<category portfolio>}
            (?the Market_Ind) {category = "indicators";}  ;;  {<category indicators>}
        ]
        ?Suffix_Please
    ) 
    Universal_Commands {ucommand = dollars;}  ;;  :uc {<ucommand $uc>}
]

Portf
[
    (Stock_Portf ?[report quotes chart update news information info])
]

.Stock_Portf
[
    (?Uh ?maya ?please 
        [
            (repeat ?(?[the my] Portf) ?([ again (from the beginning)])) {command = "repeat";}  ;;  {<command repeat>}
            (repeat it ?again) {command = "repeat";}  ;;  {<command repeat>}
            ([stop leave exit (start over)] ?(?[the my] Portf)) {command = "exit";}  ;;  {<command exit>}
            Enough_TTS  {command = "exit";}  ;;  {<command exit>}
            Rejects:d
        ]
        ?Suffix_Please
    ) 
    Universal_Commands { ucommand = dollars; }  ;;  :uc {<ucommand $uc>}
]


.Stock_Mkt_Ind
[
    (?Uh ?maya ?please 
        [
            (repeat ?(?the Market_Ind) ?([ again (from the beginning)])) {command="repeat";}  ;;  {<command repeat>}
            (repeat it ?again)                                   {command = "repeat";}  ;;  {<command repeat>}
            ([stop leave exit (start over)] ?(?the  Market_Ind)) {command = "exit";}    ;;  {<command exit>}
            Enough_TTS  {command = "exit";}  ;;  {<command exit>}
            Rejects:d
        ]
        ?Suffix_Please
    ) 
    Universal_Commands  {ucommand = dollars;}  ;; :uc {<ucommand $uc>}
]

Cancel_It
[
    (?No_Only [stop cancel] [it this that])
]

.Genie_Main
( ?Uh
  [
    Rejects:d
    Wakeup:d  {magic_word = "found";}  ;;  {<magic_word found>}
  ]
)

;  Rejects ( +reject_word )  ;; jozwiak changed this line since "reject_word" is not an english word so can not be enunciated.
Rejects ( +reject )

Wakeup [
    ( wake up maya )
    ( goodbye for now)
]

.Genie_Call_Opt
[
  (     
    ?Uh
    ?[(I_Wish to) please]
    [
        (
            [ 
                drop ?drop                             {command = "drop";  }  ;;  {<command drop>}
                ((main menu) ?Suffix_Please)           {command = "hold";  }  ;;  {<command hold>}
            ]  
            ?[ it (?(the ?telephone) call) ]
        )
        (return ?(to [ it (?(the ?telephone) call) ])) {command = "return";}  ;;  {<command return>}       
    ]
    ?Suffix_Please
  )     
]


.Genie_Hold_Conf
[
  (
    ?Uh
    [
        [
            YES_WORDS
            (?Yes_Only ?please [(hold ?[it (?the call)]) do])
        ] {confirm = "yes"; }  ;;  {<confirm yes>}
        [
            NO_WORDS
            (?No_Only (?please [don't (do not)]) ?(hold ?[it (?the call)] ))
        ] {confirm = "no";  }  ;;  {<confirm no>}
    ]
    ?Suffix_Please
  )
        Universal_Help~0.01 { ucommand = dollars; }  ;;  :uc {<ucommand $uc>}
        Universal_Cancel    { ucommand = dollars; }  ;;  :uc {<ucommand $uc>}
        Universal_Exit      { ucommand = dollars; }  ;;  :uc {<ucommand $uc>}
        Universal_StartOver { ucommand = dollars; }  ;;  :uc {<ucommand $uc>}
        Universal_Goodbye   { ucommand = dollars; }  ;;  :uc {<ucommand $uc>}
]

.Genie_Drop_Conf
[
  (
    ?Uh
    [
        [
            YES_WORDS
            (?Yes_Only ?please [(drop ?[it (?the call)]) do])
        ] {confirm = "yes";}  ;;  {<confirm yes>}
        [
            NO_WORDS
            (?No_Only (?please [don't (do not)]) ?(drop ?[it (?the call)] ))
        ] {confirm = "no";}  ;;  {<confirm no>}
    ]
    ?Suffix_Please
  )
        Universal_Help~0.01 {ucommand = dollars; }  ;;  :uc~0.01 {<ucommand $uc>}
        Universal_Cancel    {ucommand = dollars; }  ;;  :uc {<ucommand $uc>}
        Universal_Exit      {ucommand = dollars; }  ;;  :uc {<ucommand $uc>}
        Universal_StartOver {ucommand = dollars; }  ;;  :uc {<ucommand $uc>}
        Universal_Goodbye   {ucommand = dollars; }  ;;  :uc {<ucommand $uc>}
]

Suffix_Telematic
[
    direction
        directions
    maneuver
    turn
]

.Telematic_Cmd
[
    (
        ?Uh
        ?please 
        [
          [ (repeat)                ]   { command = "repeat"  ; }  ;;  {<command repeat>}
          [ (next [direction turn]) ]   { command = "next"    ; }  ;;  {<command next>}
          [ (previous)              ]   { command = "previous"; }  ;;  {<command previous>}
          [ (first)                 ]   { command = "first"   ; }  ;;  {<command first>}
          [ (last)                  ]   { command = "last"    ; }  ;;  {<command last>}
          [ (help)                  ]   { command = "help"    ; }  ;;  {<command help>}
        ]
        ?Suffix_Telematic
        ?Suffix_Please
    ) 
    Universal_Commands  { ucommand = dollars; }  ;;  :uc {<ucommand $uc>}
]

.Traff_Cond_Main_Menu
[
        (all ?[traffic update condition conditions] ?Suffix_Please)                                       { command = "all"                ; }  ;; {<command all>}
        ((kennedy) ?[traffic update condition conditions] ?Suffix_Please)                                 { command = "kennedy"            ; }  ;; {<command kennedy>}
        (?[outbound] (kennedy outbound) ?[traffic update condition conditions] ?Suffix_Please)            { command = "kennedy_outbound"   ; }  ;; {<command kennedy_outbound>}
        (?[inbound] (kennedy inbound) ?[traffic update condition conditions] ?Suffix_Please)              { command = "kennedy_inbound"    ; }  ;; {<command kennedy_inbound>}
        ((edens) ?[traffic update condition conditions] ?Suffix_Please)                                   { command = "edens"              ; }  ;; {<command edens>}
        (?[outbound] (edens outbound) ?[traffic update condition conditions] ?Suffix_Please)              { command = "edens_outbound"     ; }  ;; {<command edens_outbound>}
        (?[inbound] (edens inbound) ?[traffic update condition conditions] ?Suffix_Please)                { command = "edens_inbound"      ; }  ;; {<command edens_inbound>}
        ((dan ryan) ?[traffic update condition conditions] ?Suffix_Please)                                { command = "danryan"            ; }  ;; {<command danryan>}
        (?[outbound] (dan ryan outbound) ?[traffic update condition conditions] ?Suffix_Please)           { command = "danryan_outbound"   ; }  ;; {<command danryan_outbound>}
        (?[inbound] (dan ryan inbound) ?[traffic update condition conditions] ?Suffix_Please)             { command = "danryan_inbound"    ; }  ;; {<command danryan_inbound>}
        ((stevenson) ?[traffic update condition conditions] ?Suffix_Please)                               { command = "stephenson";          }  ;; {<command stevenson>}
        (?[outbound] (stevenson outbound) ?[traffic update condition conditions] ?Suffix_Please)          { command = "stephenson_outbound"; }  ;; {<command stevenson_outbound>}
        (?[inbound] (stevenson inbound) ?[traffic update condition conditions] ?Suffix_Please)            { command = "stephenson_inbound" ; }  ;; {<command stevenson_inbound>}
        ((eisenhower) ?[traffic update condition conditions] ?Suffix_Please)                              { command = "eisenhower";          }  ;; {<command eisenhower>}
        (?[outbound] (eisenhower outbound) ?[traffic update condition conditions] ?Suffix_Please)         { command = "eisenhower_outbound"; }  ;; {<command eisenhower_outbound>}
        (?[inbound] (eisenhower inbound) ?[traffic update condition conditions] ?Suffix_Please)           { command = "eisenhower_inbound" ; }  ;; {<command eisenhower_inbound>}
        ((lakeshore) ?[drive] ?[traffic update condition conditions] ?Suffix_Please)                      { command = "lakeshore";           }  ;; {<command lakeshore>}
        (?[outbound] (lakeshore ?[drive] outbound) ?[traffic update condition conditions] ?Suffix_Please) { command = "lakeshore_outbound";  }  ;; {<command lakeshore_outbound>}
        (?[inbound] (lakeshore ?[drive] inbound) ?[traffic update condition conditions] ?Suffix_Please)   { command = "lakeshore_inbound";   }  ;; {<command lakeshore_inbound>}
    Universal_Commands { ucommand = dollars; }  ;;  :uc  {<ucommand $uc>}
]

.Traff_Cond_Each
[
    (?Uh ?please 
        [
            (repeat ?(?the Traffic) ?([ again (from the beginning)])) {command = "repeat";}  ;;  {<command repeat>}
            (repeat it ?again) {command = "repeat";}  ;;  {<command repeat>}
            ([leave exit (start over)] ?(?the Traffic)) {command = "exit"; }  ;;  {<command exit>}
            ([stop cancel] ?(?the Traffic)) {command = "cancel";}  ;; {<command cancel>}
            Enough_TTS  {command = "cancel";}  ;; {<command cancel>}
            Rejects:d
        ]
        ?Suffix_Please
    ) 
    Universal_Commands    {ucommand = dollars;}  ;; :uc {<ucommand $uc>}
]

.My_Info_Main
[
        (
                ?Uh
                [
                        (Stock_Market)                           {command = "stock"      ;}  ;; {<command stock>}
                        (Stock_Market_Indicators ?Suffix_Please) {command = "stock_ind"  ;}  ;; {<command stock_ind>  }
                        (Stock_Market_Portfolio ?Suffix_Please)  {command = "stock_portf";}  ;; {<command stock_portf>}
                        MM_Group4
                ]
                ?Suffix_Please
        )
        Universal_Commands                                       {ucommand = dollars;}       ;; {<ucommand $uc>}
]

Name [
( a c b )
( a c n )
( a t t )
(kathy volpi)
(aaron donahue)
(abby cale)
(abby kail)
(abdul)
(ace hardware)
(again)
(ah rowan)
(aileen atlas)
(air india information)
(air india)
(airlines american)
(akey)
(al england)
(al pierce)
(al)
(alain)
(albert)
(alene)
(alessandra)
(alex)
(ali)
(alice)
(alicia)
(alison allen)
(alison)
(all about learning)
(allen burkman)
(allen reiter)
(allen)
(allie)
(alonso)
(alpa)
(alton)
(amanda grimes)
(amber distler)
(amber)
(ameen)
(american airline)
(american communications)
(american express travel)
(american express)
(american taxi)
(american)
(amex main office)
(amex travel)
(amex)
(amy curtis)
(amy)
(ana)
(anderson)
(andre)
(andrea lang)
(andrea)
(andrew)
(andy kurtz)
(andy lang)
(andy oken)
(andy)
(angel)
(angela)
(angie defoe)
(angie)
(anita)
(ann becker)
(ann haircut)
(ann j)
(ann joseph)
(ann o van o)
(ann walsh)
(ann williams)
(ann)
(anna)
(annette merriman)
(annette)
(annie lang)
(annie mae)
(annie streeter)
(annie)
(anthony)
(apple valley)
(april regan)
(arlene)
(art jessen)
(art)
(arturo)
(ashok)
(at)
(audrie)
(augustine mitchell)
(aunt dolores)
(aunt eleanor)
(aunt grace)
(aunt judy)
(aunt shelly)
(aunt shirley)
(aunt sue)
(baby)
(bachman)
(ball)
(banda gul)
(bank)
(barb ballard)
(barb carter)
(barb mccarthy)
(barb mcfall)
(barb nathanson)
(barb)
(barbara carter)
(barbara maccarthy)
(barbara mccarthy)
(barbara stevenson)
(barber dave)
(barber)
(barrett)
(barry zipp)
(barry)
(bart williams)
(bay front)
(bea hicks)
(becket)
(becky horn)
(becky)
(belinda wilson)
(belinda)
(ben dover)
(ben)
(benson)
(bernice)
(bernie)
(beth cook)
(beth hillel)
(beth johnson)
(beth)
(bethany)
(betty)
(big d)
(big)
(biggie)
(bill addy)
(bill birmingham)
(bill maris)
(bill marsh)
(bill phelps)
(bill schneider)
(bill schwartz)
(bill selby)
(bill sohn)
(bill thiesen)
(bill)
(bishop booker)
(bishop clemmons)
(bishop luke edwards)
(bishop marshall)
(blair mcdougall)
(blair)
(blake)
(block)
(bloom)
(bloomingdale)
(blue)
(bob anderson)
(bob bussen)
(bob denaro)
(bob direct)
(bob fess)
(bob johnson)
(bob o'hare)
(bob placko)
(bob roberts)
(bob smith)
(bob swaine)
(bob)
(bobby bobby)
(bobby smith)
(bobby)
(bondy)
(bonnie garrison)
(bonnie jeanne mahar)
(bonnie jeanne maher)
(bonnie picket)
(bonnie pickett)
(boss)
(boyle)
(brad hicken)
(brad williams)
(brad)
(brenda marr)
(brenda parker)
(brenda)
(brendan)
(brennen)
(brett flenniken)
(brett)
(brian levine)
(brian mccalley)
(brian murray)
(brian)
(bridget)
(brittany)
(bruce brown)
(bruce)
(bruno)
(bryce)
(bud)
(buddy products)
(buddy)
(bufford)
(building)
(bum)
(bush)
(bushy)
(butch)
(byron)
(c b s)
(c c)
(cabin)
(cairo)
(calling card)
(calvary light house)
(calvin)
(candice)
(car phone)
(cara)
(carl summers)
(carla flanagan)
(carla)
(carlos martinez)
(carlos)
(carmen)
(carney)
(carol hartigan)
(carol l c i)
(carol schwartz)
(carol)
(carole)
(carolyn home)
(carolyn jonathan at work)
(carolyn richards)
(carolyn)
(cary furman)
(cary schwartz)
(cary)
(casey carda)
(casey)
(catherine cox)
(catherine)
(cato)
(cell phone)
(cellular phone)
(cellular)
(cesar brea)
(cesar)
(chairman)
(charles cross jr)
(charles morris)
(charles)
(charlie hodges)
(charlie marth)
(charlotte)
(charmaine)
(chauffeur)
(cheryl baldwin)
(cheryl hawley)
(cheryl)
(cho cho)
(chou chou)
(chris buss)
(chris caliendo)
(chris galvin)
(chris griffin)
(chris jim blanco)
(chris kris)
(chris lewis)
(chris marius)
(chris mcclain)
(chris morrison)
(chris ness)
(chris oliver)
(chris ramming)
(chris richards)
(chris sherwin)
(chris summers)
(chris)
(chrissy)
(christ o'hare)
(christ)
(christina)
(christine barker)
(christine morrison)
(christine)
(christopher o'hare)
(christopher summers job)
(christopher summers)
(christy shay)
(christy)
(chuck buffum)
(chuck geiger)
(chuck powers)
(chuck)
(church of the open door)
(church)
(cindy fultz)
(cindy)
(cipher)
(clair)
(clara)
(claude rogers)
(claude)
(claudia)
(claudine)
(clayton)
(clemens)
(clerk)
(cliff)
(cod)
(colleen collins)
(colleen)
(concord sand)
(concord stand)
(concrete man)
(conference line)
(conference)
(connie urbaniak)
(connie)
(corey miller)
(corey)
(corona)
(cot call)
(cottage)
(countrywide)
(courtney)
(cousin jim)
(craig marian)
(craig)
(crew scheduling)
(cro)
(crow)
(culler)
(curt tuckey)
(cushman and wakefield)
(customer care)
(customer service)
(customer support)
(cynthia)
(cypher)
(d c f f)
(dad beel)
(dad lewis)
(dad)
(daddy private)
(daddy)
(dale massie)
(dale)
(dan coombes)
(dan furman)
(dan grage)
(dan hartman)
(dan kerrigan)
(dan myers)
(dan)
(daniel bleier)
(daniel)
(danielle)
(danna)
(danny chambers)
(danny)
(darius)
(darlene abbott)
(darlene schultz)
(darlington)
(darren)
(daryl)
(das)
(database)
(daughter)
(dave baker)
(dave barber)
(dave dan kerrigan)
(dave gross)
(dave hay)
(dave ladd)
(dave offerman)
(dave shuman)
(dave smiley)
(dave summers)
(dave viray)
(dave)
(david brown) (david church)
(david hall) (david hull)
(david ladd) (david nagel)
(david neves) (david smiley)
(david twigg) (david viray)
(david weiner) (david)
(davis')
(davis)
(davy)
(dawn webb)
(dawn)
(dean)
(deanna)
(deb mathew)
(deb mathews)
(deb prill)
(deb)
(debbie bachman) (debbie brown) (debbie kaplan) (debbie murphy) (debbie schwartz) (debbie)
(deborah hope) (deborah pardini) (deborah picket) (deborah pickett) (deborah)
(debra hunter)
(debra matlock)
(debra)
(dee)
(deepak)
(del robinson)
(deller)
(dempsey)
(dena)
(denise willsey)
(denise)
(dennis roberson) (dennis robertson) (dennis robinson) (dennis thomas) (dennis thompson) (dennis)
(dental center)
(dentist)
(denver)
(design)
(devon mcnary)
(devry tech)
(devry)
(di)
(dian)
(diana)
(diane bo) (diane bozeman) (diane kurtz) (diane lesner) (diane)
(dice mold)
(dice)
(dick)
(dillon)
(dina)
(diode)
(dion)
(direction center)
(direction)
(directory assistance) (directory information) (distributive services)
(doc)
(doctor gomez) (doctor joe) (doctor kuo) (doctor mckee) (doctor paulus) (doctor yell) (doctor)
(doll)
(dolores)
(dom)
(don barnes)
(don miller)
(don)
(donna ellison)
(donna)
(doreen anding)
(doreen)
(doris)
(dorothy roberts) (dorothy straughter) (dorothy) (dos)
(doubletree)
(doug becker) (doug brems) (doug friend) (doug garland) (doug sanders) (doug)
(douglas ben) (douglas)
(dow)
(durrell hillis)
(dwight)
(ear doctor)
(ed alpern) (ed gasior) (ed halpern) (ed kiley) (ed)
(edgar)
(edward)
(edwin turcotte)
(egg)
(eileen)
(ekstrom)
(elaine graves)
(elaine mckenna)
(elaine)
(eleanor)
(elegant limo)
(elgin academy)
(elgin)
(elisa)
(elise)
(elizabeth fudge) (elizabeth garrison) (elizabeth goldsmith) (elizabeth penick) (elizabeth)
(ellen mccaffrey) (ellen mckenna) (ellen ryder) (ellen white) (ellen)
(emanuel)
(embassy)
(emily)
(enoch)
(eric bodner) (eric burke) (eric pullins) (eric sumner) (eric)
(erica canter)
(erica roll)
(erica wok)
(erica)
(erin seivert)
(erin williams)
(erin)
(erline kate)
(erline)
(ernestine canty)
(ernestine norman)
(ernestine)
(ernie roberts)
(ernie)
(estell powers)
(estell)
(estella powers)
(estella)
(ethel smith)
(ethel)
(etta)
(eugene randolph)
(eugene)
(eva oliva)
(evelyn pettis)
(evelyn)
(ever)
(everest)
(evergreen park)
(f c m)
(father ken)
(father peter)
(fedex)
(fitzgerald)
(flight information)
(florida)
(focal communication)
(fogel)
(for weather)
(fort smith)
(forward)
(forwarding)
(fran)
(frank geck) (frank powers) (frank)
(frankie g) (frankie)
(franklin)
(fred smith) (fred ward) (fred)
(freddie jackson)
(frida)
(friday)
(frog frog)
(frog)
(gabe)
(gabriel)
(gale grube)
(galt)
(gari)
(garish)
(gary kamen)
(gary)
(gauger)
(gaye)
(genie fink)
(genie)
(george filley) (george fry) (george lukas) (george o'hare business) (george o'hare) (george smith) (george stewart) (george troop) (george)
(georgia o'connor)
(georgie)
(gerald clark) (gerald pager) (gerald)
(german shepherd club)
(gerold)
(gert markowitz)
(gilles cellular)
(gina)
(ginger)
(ginny)
(gioia)
(glen gleaves)
(glen shelby)
(glenda)
(glenn thompson) (glenn)
(gloria dalton) (gloria)
(gomes)
(goodyear)
(grace jenkins)
(grace)
(gracie buckley)
(grammy)
(grandma and grandpa)
(grandma bessie)
(grandma edge)
(grandma t)
(grandma violet)
(grandma wallie)
(grandma)
(grandpa and grandma)
(grandpa)
(granny)
(grant)
(graphic arts)
(greg herman)
(greg johnson)
(greg kelley)
(greg provenzano)
(greg)
(gross)
(guest kathy)
(guiles cellular)
(guillermo martinez)
(gus)
(gwen patterson)
(gwen)
(gwyn)
(hahn dinh)
(hahn)
(hair)
(haircut)
(hallie harper)
(hammond)
(han dean)
(harlem)
(harriet buckley)
(harriet)
(harry bliss) (harry blitz) (harry heller) (harry leek) (harry)
(harvey)
(hassan baker)
(hazel shepard)
(hazel)
(health south)
(heather)
(hector)
(heidi timber)
(heidi)
(helen)
(help desk)
(help)
(her back)
(her)
(herman)
(him)
(holly kurtz) (holly)
(home office number) (home office) (home voice mail) (home)
(homewood)
(hong lin)
(hoots)
(hotel)
(house helpers)
(howard brown clinic) (howard brown health center)
(hugh hamill)
(hunter)
(hyler)
(ian)
(im)
(imagination publishing)
(ina jacobs)
(ina)
(india)
(indira hamilton)
(indy)
(information again)
(information)
(insurance)
(ira)
(irene)
(irma ragland)
(it anyway)
(j w)
(jack finlayson)
(jack martin)
(jackie petersen)
(jackie welch)
(jackie)
(jaime borras)
(jaime)
(james austin)
(james cook)
(james hayes)
(james)
(jamie massey)
(jamie)
(jane)
(janet ahmad)
(janet)
(janice webb)
(jason)
(jasper brewster)
(jasper richman)
(jasper)
(jay hahn)
(jay)
(jazz)
(jean delaney)
(jean lenning)
(jean)
(jeanette ray)
(jeanette)
(jeanie)
(jeff greenberg)
(jeff halstead)
(jeff house)
(jeff miller)
(jeff moon)
(jeff schwartz)
(jeff stark)
(jeff)
(jeffery kreg)
(jeffery)
(jeffrey craig)
(jeffrey)
(jen car)
(jen perry)
(jen)
(jennifer hughes)
(jennifer marcus)
(jennifer o'hare)
(jennifer weiss)
(jennifer)
(jenny gonzalez)
(jenny m)
(jenny)
(jeremy richter)
(jeremy)
(jerry clark)
(jerry lemke)
(jerry loch)
(jerry roseland)
(jerry upton)
(jerry)
(jess)
(jesse)
(jest)
(jill)
(jim concrete)
(jim cook)
(jim fox)
(jim gauger)
(jim gray)
(jim harris)
(jim kale)
(jim lund)
(jim oliver)
(jim petersen)
(jim reinhart)
(jim roach)
(jim seidman)
(jim)
(jimmy)
(joan deere)
(joan gier)
(joan meyer)
(joan)
(joanna)
(joanne barish)
(joanne clark)
(joanne meyer)
(joanne miller)
(joanne)
(jocelyn carter miller)
(jody buchholtz)
(jody miller)
(jody)
(joe brennen)
(joe cygan)
(joe dumas)
(joe edgerton)
(joe guglielmi)
(joe school)
(joe urban)
(joe west)
(joe)
(joel)
(joey)
(john ark)
(john barrett)
(john bartlett)
(john decoteau)
(john dodson)
(john escher)
(john gear)
(john gibbons)
(john hammond)
(john hunt)
(john lewis)
(john powers)
(john schroeder)
(john simms)
(john sweet)
(john wiens)
(john)
(johnson)
(jonathan and lisa)
(jonathan)
(jordan roderick)
(joseph edger)
(joseph edgerton)
(joseph nichols)
(joseph urban)
(josephine johnson)
(josh)
(joy kaczmarek)
(joy nelson)
(joy)
(joyce jefferson)
(joyce)
(juanita)
(jude)
(judith markowitz)
(judy kelly)
(judy schwartz)
(judy)
(julie knight)
(julie shimer)
(julie)
(julio blanca)
(julius)
(june)
(justice)
(justin levine)
(justin)
(kane)
(kang lee)
(kang)
(kansas)
(kara)
(karen larson)
(karen petersen)
(karen suing)
(karen)
(karim)
(kate deborah)
(kate)
(katherine ladd)
(kathleen)
(kathy adams)
(kathy bradwell)
(kathy broadwell)
(kathy grube)
(kathy hurtt)
(kathy katy)
(kathy loria)
(kathy thompson)
(kathy wagner)
(kathy)
(katie)
(kay)
(kaya)
(keith bane)
(keith rolle)
(keith rolly)
(keith)
(kelley)
(ken lewis)
(ken rehor)
(ken webb)
(ken)
(kendrick)
(kenneth wood)
(kenneth woods)
(kenneth)
(kenrick)
(kerrigan)
(kevin buford)
(kevin hicks)
(kevin horn)
(kevin kinder)
(kevin kline)
(kevin westerfield)
(kevin)
(khanna)
(kids)
(kim collier)
(kim dean)
(kim dodson)
(kim geary)
(kim gomes)
(kim green p c s)
(kim green)
(kim harrington)
(kim kumpf)
(kim madden)
(kim nelson)
(kim)
(kimball)
(kohler)
(krista schwartz)
(krista)
(kristin)
(kurt)
(lab)
(larry picket)
(larry seligman)
(larry's car)
(larry)
(lasalle bell)
(laura hilliker)
(laura)
(laureen)
(lauren)
(laurence john)
(laurence)
(lawyer)
(lee adams)
(lee coleman)
(lee mcneal)
(lee)
(leif)
(lemont fortune teller)
(len)
(lena)
(lenny)
(leo harris)
(leo junior)
(leo)
(leon henderson)
(leon hospital)
(leon)
(leroy)
(les price)
(les)
(leslie ullman)
(leslie)
(lester)
(levine)
(lewis)
(lifetime fitness)
(lila)
(lily allen)
(lily lozano)
(lily)
(linda akins)
(linda brooks)
(linda foster)
(linda lewis)
(linda oliva)
(linda)
(linden oaks)
(lindsey kotz)
(lindsey taylor)
(lindsey)
(linsey taylor)
(linus)
(lisa alexander)
(lisa banks)
(lisa cate)
(lisa griggs)
(lisa kate)
(lisa spina)
(lisa tyree)
(lisa webb)
(lisa)
(lisle station)
(little sue)
(liz elizabeth garrison)
(liz slaughter)
(liz)
(liza)
(lois garth)
(lois)
(lola)
(loleta luther)
(loleta)
(long distance)
(longview)
(lora)
(lorenzo little)
(loretta howell)
(loretta)
(lorie davis)
(lorie hartman)
(lorie lerner)
(lorie lorie)
(lorie peck)
(lorie)
(lorraine)
(louise)
(lucille)
(lucinda clark)
(lucy marotta)
(luke)
(lydia)
(lynette)
(lynn newman)
(lynn wilson)
(lynn)
(m g waldbaum)
(ma)
(mab)
(mackenzie)
(macnab)
(maddie)
(madison)
(magda)
(mahesh)
(mahon)
(mail voice)
(mail)
(malik)
(mama)
(manatee)
(manish)
(marcin)
(marcy)
(margaret)
(marget)
(margo)
(margot)
(maria martinez)
(maria)
(marian)
(marianne haircut)
(marie paro)
(marie)
(marina)
(marion)
(maris)
(mark curran)
(mark krukowski)
(mark kukowski)
(mark langguth)
(mark morris)
(mark murray)
(mark randolph)
(mark schwartz)
(mark)
(marla)
(marlene)
(marshall fried)
(martha evens)
(martha)
(mary bart)
(mary ellen)
(mary esselman)
(mary fitzpatrick)
(mary hicks)
(mary jane dodson)
(mary joe)
(mary kay stallone)
(mary kay)
(mary lou)
(mary mckittrick)
(mary smith)
(mary zeigler)
(mary)
(maryann)
(masi)
(mat)
(mathew)
(mathy)
(matlock)
(matt hall)
(matt motorola)
(matt ostman)
(matt simpson)
(matt)
(matty)
(maureen govern)
(maury)
(max robbin)
(max robbins)
(may or lila)
(may pao)
(may poe)
(may)
(maya)
(mccauley)
(mckay)
(me)
(medearis)
(medi)
(meegan)
(megan mcgrath)
(megan)
(melia)
(melissa)
(melva)
(mercantile bank)
(merle gilmore)
(merrell)
(messages)
(metro landscape)
(miami)
(michael ashby)
(michael foreman)
(michael goodyear)
(michael hanson)
(michael hare)
(michael)
(micheal ashby)
(micheal manning)
(michell marian)
(michell witt)
(michell)
(michelle emanuel)
(michelle houser)
(michelle manuel)
(michelle marian)
(michelle marion)
(michelle virgo)
(michelle)
(michigan)
(mickey)
(micky)
(microsoft)
(mike abbott)
(mike and mindy)
(mike barlow)
(mike brown)
(mike doheny)
(mike farlow)
(mike fuqua)
(mike gaumond)
(mike hanson)
(mike hay)
(mike kay)
(mike krasner)
(mike maloney)
(mike martin)
(mike morrison)
(mike murdock)
(mike naughton)
(mike ryder)
(mike weldy)
(mike)
(mikey)
(miko)
(mill street school)
(miller)
(mills)
(mindy)
(minnie bragg)
(minnie cole)
(minnie offered)
(minnie)
(miss grey)
(missy)
(mobile)
(moe)
(mollie)
(molly)
(mom and dad)
(mom josephine johnson)
(mom)
(mommy)
(monica c e d)
(monica)
(morgan)
(mother down)
(mother)
(motorola switchboard)
(motorola)
(mountain tops)
(mountains tops)
(mr miami)
(mr tillman)
(my cellular)
(my house)
(my job)
(my number)
(my office)
(my oh)
(my sister)
(my son)
(my voice mail)
(my wife)
(n b a)
(nadine)
(nan nancy)
(nan)
(nana)
(nancy kushner)
(nancy ryan)
(nancy seth)
(nancy)
(nanni)
(naomi)
(natalie)
(nathan)
(natural landscape)
(natural landscaping)
(nay yung)
(nay)
(neil russell)
(neil)
(new trier)
(news)
(newt payne)
(nicholas nash)
(nick dellis)
(nick)
(nicki)
(nicole)
(nikki scott)
(nikki)
(node)
(noel)
(nora)
(norma newton)
(north marina)
(north point marina)
(number)
(nyberg)
(office  number)
(office)
(oh regina)
(olga)
(oliver)
(operator)
(otis richardson)
(otto)
(owen youngman)
(ox finances)
(ox)
(pad)
(pager)
(pakistan)
(pam may)
(pam)
(pamela quintana)
(papa and fluffy)
(paper)
(parents)
(pastor alma)
(pastor night)
(pastor washington)
(pastor)
(pat and ted)
(pat brannon)
(pat henrikson)
(pat kerrigan)
(pat love)
(pat mccleary)
(pat mom)
(pat's mom)
(pat)
(patrice)
(patrick carrol)
(patrick kerrigan)
(patrick)
(patty)
(paul and wallie)
(paul and wally)
(paul arman)
(paul barry)
(paul bartlett)
(paul battaglia)
(paul berry)
(paul cardinal)
(paul cizek)
(paul fowler)
(paul harmon)
(paul smith)
(paul steinberg)
(paul)
(paula banks)
(paula)
(paulette)
(pauline adams)
(pauline)
(pauly cardinal)
(pause)
(pediatrician)
(peg mcmanus)
(peg)
(peggy fess)
(peggy fest)
(peggy)
(pennsylvania)
(pepper)
(personal)
(pete and kathy)
(pete)
(peter vick)
(peter)
(petersen)
(phil)
(philippe)
(phillipe kahn)
(phyllis)
(pickup)
(pizza)
(plummer pilot)
(plummer)
(pop)
(powell)
(prasad)
(precious)
(preferred staffing)
(pro staff)
(progressive foods)
(progressive)
(pugh marina)
(rachel ott)
(rachel)
(rachelle ott)
(rachelle)
(radio)
(rain)
(raj)
(raju thompson)
(ralph smith)
(ram)
(ramada)
(ramesh)
(randall)
(randy)
(ranee)
(rational help)
(ravi)
(ray gil)
(ray riddell)
(ray ward)
(ray)
(raymond nichols)
(reagan)
(reggie eleazer)
(reggie)
(regina)
(rego mold)
(rehab)
(reider)
(renee eugene)
(renee jackson)
(reno)
(rich mcgowan)
(rich moran)
(rich piepho)
(rich)
(richard defoe)
(richard)
(rick b)
(rick dixon)
(rick eugene)
(rick kurtz)
(rick michaux)
(rick piepho)
(rick)
(ridder)
(rima)
(rita brown)
(rita singh)
(rita)
(rob adrian)
(rob hammond)
(rob protz)
(rob randolph)
(rob vandall)
(rob)
(robbins)
(robert arganbright)
(robert densmore)
(robert o'hare)
(robert schultz)
(robert)
(roberta miller)
(roberto miller)
(robin smith)
(robin)
(roby)
(rochelle)
(rocky)
(rodney streater)
(rodney)
(roger fordham)
(roger thompson)
(roger)
(romelle stanford)
(romero)
(ron henrichs)
(ronnie)
(rosalind jacobs)
(rosalind)
(rosalyn wesley)
(rose)
(rosie)
(rossi)
(rowan beneke)
(rowan)
(roy smith)
(ruby)
(russ)
(russo)
(ryan)
(ryder)
(sabina)
(sabrina holiday)
(sabrina o neil)
(sabrina)
(sally)
(sam alexander)
(sam)
(samuel jenkins)
(sandra doi)
(sandra)
(sandy bandy)
(sandy fitzmaurice)
(sandy wilke)
(sandy)
(sanjay)
(santa clause)
(sara gartman)
(sara joe)
(sara)
(sarasota memorial)
(scheduling)
(schwartz)
(scott farley)
(scott heckman)
(scott hendry)
(scott paulsen)
(scott summers)
(scott)
(screening)
(sean wingate)
(sean)
(secretary)
(sen)
(sergio benavides)
(seth wallace)
(seth)
(shane butler)
(shari friedman)
(shari)
(sharon mcgee)
(sharon rushing)
(sharon silverman)
(sharon)
(shegog)
(sheila alison)
(sheila wells)
(sheila)
(shelly and george)
(shelly trotman)
(shelly)
(shirley spencer)
(shirley)
(shiva prasad)
(shiva)
(shorty)
(shu)
(silverman)
(simon roberts)
(sis)
(sky page)
(skytel)
(softball)
(somebody)
(son)
(sonja)
(sophia)
(south house)
(south west women center)
(south west women)
(south)
(spence)
(speth)
(spider)
(spiro)
(sports)
(stable)
(stacy rogers)
(stacy)
(stan)
(state farm)
(station commander)
(steph)
(stephanie fans)
(stephanie)
(sterling)
(steve bailey)
(steve biederman)
(steve bohnert)
(steve earhart)
(steve eick)
(steve goldsmith)
(steve hawkins)
(steve ho)
(steve larson)
(steve leek)
(steve martz)
(steve meyer)
(steve miller)
(steve ness)
(steve shuman)
(steve)
(steven)
(stipe)
(stith)
(stocks)
(stu)
(stuart gabel)
(stuart)
(stumpf)
(sue bailey)
(sue defoe)
(sue ellen)
(sue foster)
(sue miller)
(sue whitney)
(sue)
(super kmart)
(suresh)
(susan eick)
(susan franz)
(susan imus)
(susan schultz)
(susan)
(susanna)
(susanne)
(suzy)
(sweetie)
(swing)
(t l c)
(t w sheng)
(t w)
(tada)
(tammy)
(tanya)
(tara whoop)
(tara)
(tariq)
(tart)
(taxi)
(tea brown)
(ted alonso)
(ted and pat)
(ted trost)
(ted)
(tee)
(temperature)
(teresa ahmad)
(teresa alonso)
(teresa anthony)
(teresa)
(terrance)
(terry diggs)
(terry hanes)
(terry heng)
(terry)
(test case)
(test mail)
(test)
(that shit head again)
(the ben)
(the dennis thompson)
(the esselman)
(the frog)
(the gloria)
(the lab)
(the line)
(the operator)
(the party again)
(the ray)
(the susanne)
(the voicemail)
(the weather forecast)
(the weather)
(thelma thelma)
(thelma)
(theresa)
(thomas)
(thompson)
(tibbs)
(tie)
(tiffany)
(tillman)
(tim cirrincione)
(tim davis)
(tim glen)
(tim henn)
(tim levert)
(tim madden cellular)
(tim now)
(tim stone)
(tim suminski)
(tim)
(time and temp)
(tina curran)
(tina)
(tita)
(todd)
(tom abbott)
(tom baldwin)
(tom ball)
(tom brey)
(tom derrico)
(tom dew)
(tom esselman)
(tom fritz)
(tom grube)
(tom reddy)
(tom ritchie)
(tom roth)
(tom schultz)
(tom whitaker)
(tom whittaker)
(tom)
(tommy wilson)
(tony hyler)
(tony lou)
(tony smith)
(tony)
(trace)
(tracey williams)
(traffic)
(training)
(transfer)
(tricia)
(triple a)
(trisha)
(truck world)
(twin yes)
(twin)
(uncle al)
(uncle dave)
(uncle gary)
(v m l node)
(valencia)
(valerie)
(veen a)
(veen)
(vela)
(vena)
(vern)
(verna)
(veronica leon)
(veronica)
(vicky)
(victoria nichols)
(vincent)
(vinnie)
(viray)
(virginia)
(vivian)
(voice mail maya)
(voice mail)
(voice)
(wabash)
(waiting)
(wakefield)
(waldbaum)
(walt barnes)
(walt cook)
(walt thompson)
(walt)
(walter bronze)
(wan)
(wanda)
(waterhouse securities)
(wayne anderson)
(weather)
(wendy)
(will sullivan)
(will)
(willard)
(william alexander)
(william keith)
(william thompson)
(williams)
(willie mae)
(willie may)
(willie)
(winchell)
(wing)
(woody richie)
(woolfolk)
(work messages)
(work personal)
(work voice mail)
(work)
(yakov simkin)
(yan ming)
(yo)
(yolanda)
(york)
(yorktown)
(young hao chen)
(zach hoffman)
(zane)
(zenobia)
]
